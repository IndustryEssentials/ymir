# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.swagger_models.base_model_ import Model
from src.swagger_models.annotations import Annotations  # noqa: F401,E501
from src.swagger_models.assets_meta_info_metadata import AssetsMetaInfoMetadata  # noqa: F401,E501
from src import util


class AssetsMetaInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, annotations: Annotations=None, class_ids: List[int]=None, metadata: AssetsMetaInfoMetadata=None):  # noqa: E501
        """AssetsMetaInfo - a model defined in Swagger

        :param annotations: The annotations of this AssetsMetaInfo.  # noqa: E501
        :type annotations: Annotations
        :param class_ids: The class_ids of this AssetsMetaInfo.  # noqa: E501
        :type class_ids: List[int]
        :param metadata: The metadata of this AssetsMetaInfo.  # noqa: E501
        :type metadata: AssetsMetaInfoMetadata
        """
        self.swagger_types = {
            'annotations': Annotations,
            'class_ids': List[int],
            'metadata': AssetsMetaInfoMetadata
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'class_ids': 'class_ids',
            'metadata': 'metadata'
        }
        self._annotations = annotations
        self._class_ids = class_ids
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsMetaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetsMetaInfo of this AssetsMetaInfo.  # noqa: E501
        :rtype: AssetsMetaInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self) -> Annotations:
        """Gets the annotations of this AssetsMetaInfo.


        :return: The annotations of this AssetsMetaInfo.
        :rtype: Annotations
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations: Annotations):
        """Sets the annotations of this AssetsMetaInfo.


        :param annotations: The annotations of this AssetsMetaInfo.
        :type annotations: Annotations
        """

        self._annotations = annotations

    @property
    def class_ids(self) -> List[int]:
        """Gets the class_ids of this AssetsMetaInfo.


        :return: The class_ids of this AssetsMetaInfo.
        :rtype: List[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids: List[int]):
        """Sets the class_ids of this AssetsMetaInfo.


        :param class_ids: The class_ids of this AssetsMetaInfo.
        :type class_ids: List[int]
        """

        self._class_ids = class_ids

    @property
    def metadata(self) -> AssetsMetaInfoMetadata:
        """Gets the metadata of this AssetsMetaInfo.


        :return: The metadata of this AssetsMetaInfo.
        :rtype: AssetsMetaInfoMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: AssetsMetaInfoMetadata):
        """Sets the metadata of this AssetsMetaInfo.


        :param metadata: The metadata of this AssetsMetaInfo.
        :type metadata: AssetsMetaInfoMetadata
        """

        self._metadata = metadata
