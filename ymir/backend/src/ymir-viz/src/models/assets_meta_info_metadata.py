# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.models.base_model_ import Model
from src.models.assets_meta_info_metadata_timestamp import AssetsMetaInfoMetadataTimestamp  # noqa: F401,E501
from src import util


class AssetsMetaInfoMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, asset_type: str=None, width: int=None, height: int=None, image_channels: int=None, timestamp: AssetsMetaInfoMetadataTimestamp=None):  # noqa: E501
        """AssetsMetaInfoMetadata - a model defined in Swagger

        :param asset_type: The asset_type of this AssetsMetaInfoMetadata.  # noqa: E501
        :type asset_type: str
        :param width: The width of this AssetsMetaInfoMetadata.  # noqa: E501
        :type width: int
        :param height: The height of this AssetsMetaInfoMetadata.  # noqa: E501
        :type height: int
        :param image_channels: The image_channels of this AssetsMetaInfoMetadata.  # noqa: E501
        :type image_channels: int
        :param timestamp: The timestamp of this AssetsMetaInfoMetadata.  # noqa: E501
        :type timestamp: AssetsMetaInfoMetadataTimestamp
        """
        self.swagger_types = {
            'asset_type': str,
            'width': int,
            'height': int,
            'image_channels': int,
            'timestamp': AssetsMetaInfoMetadataTimestamp
        }

        self.attribute_map = {
            'asset_type': 'asset_type',
            'width': 'width',
            'height': 'height',
            'image_channels': 'image_channels',
            'timestamp': 'timestamp'
        }
        self._asset_type = asset_type
        self._width = width
        self._height = height
        self._image_channels = image_channels
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsMetaInfoMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetsMetaInfo_metadata of this AssetsMetaInfoMetadata.  # noqa: E501
        :rtype: AssetsMetaInfoMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_type(self) -> str:
        """Gets the asset_type of this AssetsMetaInfoMetadata.


        :return: The asset_type of this AssetsMetaInfoMetadata.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type: str):
        """Sets the asset_type of this AssetsMetaInfoMetadata.


        :param asset_type: The asset_type of this AssetsMetaInfoMetadata.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def width(self) -> int:
        """Gets the width of this AssetsMetaInfoMetadata.


        :return: The width of this AssetsMetaInfoMetadata.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this AssetsMetaInfoMetadata.


        :param width: The width of this AssetsMetaInfoMetadata.
        :type width: int
        """

        self._width = width

    @property
    def height(self) -> int:
        """Gets the height of this AssetsMetaInfoMetadata.


        :return: The height of this AssetsMetaInfoMetadata.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this AssetsMetaInfoMetadata.


        :param height: The height of this AssetsMetaInfoMetadata.
        :type height: int
        """

        self._height = height

    @property
    def image_channels(self) -> int:
        """Gets the image_channels of this AssetsMetaInfoMetadata.


        :return: The image_channels of this AssetsMetaInfoMetadata.
        :rtype: int
        """
        return self._image_channels

    @image_channels.setter
    def image_channels(self, image_channels: int):
        """Sets the image_channels of this AssetsMetaInfoMetadata.


        :param image_channels: The image_channels of this AssetsMetaInfoMetadata.
        :type image_channels: int
        """

        self._image_channels = image_channels

    @property
    def timestamp(self) -> AssetsMetaInfoMetadataTimestamp:
        """Gets the timestamp of this AssetsMetaInfoMetadata.


        :return: The timestamp of this AssetsMetaInfoMetadata.
        :rtype: AssetsMetaInfoMetadataTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: AssetsMetaInfoMetadataTimestamp):
        """Sets the timestamp of this AssetsMetaInfoMetadata.


        :param timestamp: The timestamp of this AssetsMetaInfoMetadata.
        :type timestamp: AssetsMetaInfoMetadataTimestamp
        """

        self._timestamp = timestamp
