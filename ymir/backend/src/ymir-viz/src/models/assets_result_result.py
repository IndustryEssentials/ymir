# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.models.base_model_ import Model
from src.models.asset_info import AssetInfo  # noqa: F401,E501
from src import util


class AssetsResultResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_ids_count: object=None, elements: List[AssetInfo]=None, offset: int=None, limit: int=None, tatal: int=None):  # noqa: E501
        """AssetsResultResult - a model defined in Swagger

        :param class_ids_count: The class_ids_count of this AssetsResultResult.  # noqa: E501
        :type class_ids_count: object
        :param elements: The elements of this AssetsResultResult.  # noqa: E501
        :type elements: List[AssetInfo]
        :param offset: The offset of this AssetsResultResult.  # noqa: E501
        :type offset: int
        :param limit: The limit of this AssetsResultResult.  # noqa: E501
        :type limit: int
        :param tatal: The tatal of this AssetsResultResult.  # noqa: E501
        :type tatal: int
        """
        self.swagger_types = {
            'class_ids_count': object,
            'elements': List[AssetInfo],
            'offset': int,
            'limit': int,
            'tatal': int
        }

        self.attribute_map = {
            'class_ids_count': 'class_ids_count',
            'elements': 'elements',
            'offset': 'offset',
            'limit': 'limit',
            'tatal': 'tatal'
        }
        self._class_ids_count = class_ids_count
        self._elements = elements
        self._offset = offset
        self._limit = limit
        self._tatal = tatal

    @classmethod
    def from_dict(cls, dikt) -> 'AssetsResultResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssetsResult_result of this AssetsResultResult.  # noqa: E501
        :rtype: AssetsResultResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_ids_count(self) -> object:
        """Gets the class_ids_count of this AssetsResultResult.


        :return: The class_ids_count of this AssetsResultResult.
        :rtype: object
        """
        return self._class_ids_count

    @class_ids_count.setter
    def class_ids_count(self, class_ids_count: object):
        """Sets the class_ids_count of this AssetsResultResult.


        :param class_ids_count: The class_ids_count of this AssetsResultResult.
        :type class_ids_count: object
        """

        self._class_ids_count = class_ids_count

    @property
    def elements(self) -> List[AssetInfo]:
        """Gets the elements of this AssetsResultResult.


        :return: The elements of this AssetsResultResult.
        :rtype: List[AssetInfo]
        """
        return self._elements

    @elements.setter
    def elements(self, elements: List[AssetInfo]):
        """Sets the elements of this AssetsResultResult.


        :param elements: The elements of this AssetsResultResult.
        :type elements: List[AssetInfo]
        """

        self._elements = elements

    @property
    def offset(self) -> int:
        """Gets the offset of this AssetsResultResult.


        :return: The offset of this AssetsResultResult.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this AssetsResultResult.


        :param offset: The offset of this AssetsResultResult.
        :type offset: int
        """

        self._offset = offset

    @property
    def limit(self) -> int:
        """Gets the limit of this AssetsResultResult.


        :return: The limit of this AssetsResultResult.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this AssetsResultResult.


        :param limit: The limit of this AssetsResultResult.
        :type limit: int
        """

        self._limit = limit

    @property
    def tatal(self) -> int:
        """Gets the tatal of this AssetsResultResult.


        :return: The tatal of this AssetsResultResult.
        :rtype: int
        """
        return self._tatal

    @tatal.setter
    def tatal(self, tatal: int):
        """Sets the tatal of this AssetsResultResult.


        :param tatal: The tatal of this AssetsResultResult.
        :type tatal: int
        """

        self._tatal = tatal
