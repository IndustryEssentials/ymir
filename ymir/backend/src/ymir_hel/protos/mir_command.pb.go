// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.2
// source: mir_command.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// assertion type: training, validation or test
type TvtType int32

const (
	TvtType_TvtTypeUnknown    TvtType = 0
	TvtType_TvtTypeTraining   TvtType = 1
	TvtType_TvtTypeValidation TvtType = 2
	TvtType_TvtTypeTest       TvtType = 3
)

// Enum value maps for TvtType.
var (
	TvtType_name = map[int32]string{
		0: "TvtTypeUnknown",
		1: "TvtTypeTraining",
		2: "TvtTypeValidation",
		3: "TvtTypeTest",
	}
	TvtType_value = map[string]int32{
		"TvtTypeUnknown":    0,
		"TvtTypeTraining":   1,
		"TvtTypeValidation": 2,
		"TvtTypeTest":       3,
	}
)

func (x TvtType) Enum() *TvtType {
	p := new(TvtType)
	*p = x
	return p
}

func (x TvtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TvtType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[0].Descriptor()
}

func (TvtType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[0]
}

func (x TvtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TvtType.Descriptor instead.
func (TvtType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{0}
}

type AssetType int32

const (
	AssetType_AssetTypeUnknown       AssetType = 0
	AssetType_AssetTypeImageJpeg     AssetType = 1
	AssetType_AssetTypeImagePng      AssetType = 2
	AssetType_AssetTypeImagePixelMat AssetType = 3
	AssetType_AssetTypeImageYuv420p  AssetType = 4
	AssetType_AssetTypeImageYuv420sp AssetType = 5
	AssetType_AssetTypeImageYuv422p  AssetType = 6
	AssetType_AssetTypeImageYuv422sp AssetType = 7
	AssetType_AssetTypeImageBmp      AssetType = 8
	AssetType_AssetTypeVideoMp4      AssetType = 101
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0:   "AssetTypeUnknown",
		1:   "AssetTypeImageJpeg",
		2:   "AssetTypeImagePng",
		3:   "AssetTypeImagePixelMat",
		4:   "AssetTypeImageYuv420p",
		5:   "AssetTypeImageYuv420sp",
		6:   "AssetTypeImageYuv422p",
		7:   "AssetTypeImageYuv422sp",
		8:   "AssetTypeImageBmp",
		101: "AssetTypeVideoMp4",
	}
	AssetType_value = map[string]int32{
		"AssetTypeUnknown":       0,
		"AssetTypeImageJpeg":     1,
		"AssetTypeImagePng":      2,
		"AssetTypeImagePixelMat": 3,
		"AssetTypeImageYuv420p":  4,
		"AssetTypeImageYuv420sp": 5,
		"AssetTypeImageYuv422p":  6,
		"AssetTypeImageYuv422sp": 7,
		"AssetTypeImageBmp":      8,
		"AssetTypeVideoMp4":      101,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[1].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[1]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{1}
}

type GtOrPredType int32

const (
	GtOrPredType_GPT_NOTSET GtOrPredType = 0
	GtOrPredType_GPT_GT     GtOrPredType = 1
	GtOrPredType_GPT_PRED   GtOrPredType = 2
	GtOrPredType_GPT_ANY    GtOrPredType = 3
)

// Enum value maps for GtOrPredType.
var (
	GtOrPredType_name = map[int32]string{
		0: "GPT_NOTSET",
		1: "GPT_GT",
		2: "GPT_PRED",
		3: "GPT_ANY",
	}
	GtOrPredType_value = map[string]int32{
		"GPT_NOTSET": 0,
		"GPT_GT":     1,
		"GPT_PRED":   2,
		"GPT_ANY":    3,
	}
)

func (x GtOrPredType) Enum() *GtOrPredType {
	p := new(GtOrPredType)
	*p = x
	return p
}

func (x GtOrPredType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GtOrPredType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[2].Descriptor()
}

func (GtOrPredType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[2]
}

func (x GtOrPredType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GtOrPredType.Descriptor instead.
func (GtOrPredType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{2}
}

/// task type
type TaskType int32

const (
	TaskType_TaskTypeUnknown    TaskType = 0
	TaskType_TaskTypeTraining   TaskType = 1
	TaskType_TaskTypeMining     TaskType = 2
	TaskType_TaskTypeLabel      TaskType = 3
	TaskType_TaskTypeFilter     TaskType = 4
	TaskType_TaskTypeImportData TaskType = 5
	TaskType_TaskTypeExportData TaskType = 6
	TaskType_TaskTypeCopyData   TaskType = 7
	TaskType_TaskTypeMerge      TaskType = 8
	TaskType_TaskTypeInfer      TaskType = 9
	TaskType_TaskTypeSampling   TaskType = 10
	TaskType_TaskTypeFusion     TaskType = 11
	/// used by ymir_controller
	TaskType_TaskTypeInit         TaskType = 12
	TaskType_TaskTypeImportModel  TaskType = 13
	TaskType_TaskTypeCopyModel    TaskType = 14
	TaskType_TaskTypeDatasetInfer TaskType = 15
	TaskType_TaskTypeEvaluate     TaskType = 16
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "TaskTypeUnknown",
		1:  "TaskTypeTraining",
		2:  "TaskTypeMining",
		3:  "TaskTypeLabel",
		4:  "TaskTypeFilter",
		5:  "TaskTypeImportData",
		6:  "TaskTypeExportData",
		7:  "TaskTypeCopyData",
		8:  "TaskTypeMerge",
		9:  "TaskTypeInfer",
		10: "TaskTypeSampling",
		11: "TaskTypeFusion",
		12: "TaskTypeInit",
		13: "TaskTypeImportModel",
		14: "TaskTypeCopyModel",
		15: "TaskTypeDatasetInfer",
		16: "TaskTypeEvaluate",
	}
	TaskType_value = map[string]int32{
		"TaskTypeUnknown":      0,
		"TaskTypeTraining":     1,
		"TaskTypeMining":       2,
		"TaskTypeLabel":        3,
		"TaskTypeFilter":       4,
		"TaskTypeImportData":   5,
		"TaskTypeExportData":   6,
		"TaskTypeCopyData":     7,
		"TaskTypeMerge":        8,
		"TaskTypeInfer":        9,
		"TaskTypeSampling":     10,
		"TaskTypeFusion":       11,
		"TaskTypeInit":         12,
		"TaskTypeImportModel":  13,
		"TaskTypeCopyModel":    14,
		"TaskTypeDatasetInfer": 15,
		"TaskTypeEvaluate":     16,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[3].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[3]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{3}
}

type TaskState int32

const (
	TaskState_TaskStateUnknown TaskState = 0
	TaskState_TaskStatePending TaskState = 1
	TaskState_TaskStateRunning TaskState = 2
	TaskState_TaskStateDone    TaskState = 3
	TaskState_TaskStateError   TaskState = 4
	TaskState_TaskStateMiss    TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TaskStateUnknown",
		1: "TaskStatePending",
		2: "TaskStateRunning",
		3: "TaskStateDone",
		4: "TaskStateError",
		5: "TaskStateMiss",
	}
	TaskState_value = map[string]int32{
		"TaskStateUnknown": 0,
		"TaskStatePending": 1,
		"TaskStateRunning": 2,
		"TaskStateDone":    3,
		"TaskStateError":   4,
		"TaskStateMiss":    5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[4].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[4]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{4}
}

type Sha1Type int32

const (
	Sha1Type_SHA1_TYPE_UNKNOWN Sha1Type = 0
	Sha1Type_SHA1_TYPE_ASSET   Sha1Type = 1
	Sha1Type_SHA1_TYPE_COMMIT  Sha1Type = 2
)

// Enum value maps for Sha1Type.
var (
	Sha1Type_name = map[int32]string{
		0: "SHA1_TYPE_UNKNOWN",
		1: "SHA1_TYPE_ASSET",
		2: "SHA1_TYPE_COMMIT",
	}
	Sha1Type_value = map[string]int32{
		"SHA1_TYPE_UNKNOWN": 0,
		"SHA1_TYPE_ASSET":   1,
		"SHA1_TYPE_COMMIT":  2,
	}
)

func (x Sha1Type) Enum() *Sha1Type {
	p := new(Sha1Type)
	*p = x
	return p
}

func (x Sha1Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sha1Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[5].Descriptor()
}

func (Sha1Type) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[5]
}

func (x Sha1Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sha1Type.Descriptor instead.
func (Sha1Type) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{5}
}

type MirStorage int32

const (
	MirStorage_MIR_METADATAS   MirStorage = 0
	MirStorage_MIR_ANNOTATIONS MirStorage = 1
	MirStorage_MIR_KEYWORDS    MirStorage = 2
	MirStorage_MIR_TASKS       MirStorage = 3
	MirStorage_MIR_CONTEXT     MirStorage = 4
)

// Enum value maps for MirStorage.
var (
	MirStorage_name = map[int32]string{
		0: "MIR_METADATAS",
		1: "MIR_ANNOTATIONS",
		2: "MIR_KEYWORDS",
		3: "MIR_TASKS",
		4: "MIR_CONTEXT",
	}
	MirStorage_value = map[string]int32{
		"MIR_METADATAS":   0,
		"MIR_ANNOTATIONS": 1,
		"MIR_KEYWORDS":    2,
		"MIR_TASKS":       3,
		"MIR_CONTEXT":     4,
	}
)

func (x MirStorage) Enum() *MirStorage {
	p := new(MirStorage)
	*p = x
	return p
}

func (x MirStorage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirStorage) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[6].Descriptor()
}

func (MirStorage) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[6]
}

func (x MirStorage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirStorage.Descriptor instead.
func (MirStorage) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{6}
}

type AssetFormat int32

const (
	AssetFormat_AF_UNKNOWN AssetFormat = 0
	AssetFormat_AF_RAW     AssetFormat = 1
	AssetFormat_AF_LMDB    AssetFormat = 2
)

// Enum value maps for AssetFormat.
var (
	AssetFormat_name = map[int32]string{
		0: "AF_UNKNOWN",
		1: "AF_RAW",
		2: "AF_LMDB",
	}
	AssetFormat_value = map[string]int32{
		"AF_UNKNOWN": 0,
		"AF_RAW":     1,
		"AF_LMDB":    2,
	}
)

func (x AssetFormat) Enum() *AssetFormat {
	p := new(AssetFormat)
	*p = x
	return p
}

func (x AssetFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[7].Descriptor()
}

func (AssetFormat) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[7]
}

func (x AssetFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetFormat.Descriptor instead.
func (AssetFormat) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{7}
}

type ObjectType int32

const (
	ObjectType_OT_UNKNOWN        ObjectType = 0
	ObjectType_OT_CLASS          ObjectType = 1 // Classification with class id, not implemented.
	ObjectType_OT_DET_BOX        ObjectType = 2 // Detection w. bounding box.
	ObjectType_OT_SEG            ObjectType = 3 // semantic segmentation w. polygon or mask
	ObjectType_OT_NO_ANNOTATIONS ObjectType = 100
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:   "OT_UNKNOWN",
		1:   "OT_CLASS",
		2:   "OT_DET_BOX",
		3:   "OT_SEG",
		100: "OT_NO_ANNOTATIONS",
	}
	ObjectType_value = map[string]int32{
		"OT_UNKNOWN":        0,
		"OT_CLASS":          1,
		"OT_DET_BOX":        2,
		"OT_SEG":            3,
		"OT_NO_ANNOTATIONS": 100,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[8].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[8]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{8}
}

type ObjectSubType int32

const (
	ObjectSubType_OST_NOTSET ObjectSubType = 0
	//OT_SEG sub types
	ObjectSubType_OST_SEG_MASK    ObjectSubType = 30
	ObjectSubType_OST_SEG_POLYGON ObjectSubType = 31
)

// Enum value maps for ObjectSubType.
var (
	ObjectSubType_name = map[int32]string{
		0:  "OST_NOTSET",
		30: "OST_SEG_MASK",
		31: "OST_SEG_POLYGON",
	}
	ObjectSubType_value = map[string]int32{
		"OST_NOTSET":      0,
		"OST_SEG_MASK":    30,
		"OST_SEG_POLYGON": 31,
	}
)

func (x ObjectSubType) Enum() *ObjectSubType {
	p := new(ObjectSubType)
	*p = x
	return p
}

func (x ObjectSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[9].Descriptor()
}

func (ObjectSubType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[9]
}

func (x ObjectSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectSubType.Descriptor instead.
func (ObjectSubType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{9}
}

type ExportFormat int32

const (
	ExportFormat_EF_NO_ANNOTATIONS ExportFormat = 0
	ExportFormat_EF_VOC_XML        ExportFormat = 1
	ExportFormat_EF_ARK_TXT        ExportFormat = 2
	ExportFormat_EF_LS_JSON        ExportFormat = 3
	ExportFormat_EF_COCO_JSON      ExportFormat = 4
)

// Enum value maps for ExportFormat.
var (
	ExportFormat_name = map[int32]string{
		0: "EF_NO_ANNOTATIONS",
		1: "EF_VOC_XML",
		2: "EF_ARK_TXT",
		3: "EF_LS_JSON",
		4: "EF_COCO_JSON",
	}
	ExportFormat_value = map[string]int32{
		"EF_NO_ANNOTATIONS": 0,
		"EF_VOC_XML":        1,
		"EF_ARK_TXT":        2,
		"EF_LS_JSON":        3,
		"EF_COCO_JSON":      4,
	}
)

func (x ExportFormat) Enum() *ExportFormat {
	p := new(ExportFormat)
	*p = x
	return p
}

func (x ExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[10].Descriptor()
}

func (ExportFormat) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[10]
}

func (x ExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportFormat.Descriptor instead.
func (ExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{10}
}

type ConfusionMatrixType int32

const (
	ConfusionMatrixType_NotSet  ConfusionMatrixType = 0
	ConfusionMatrixType_TP      ConfusionMatrixType = 1
	ConfusionMatrixType_FP      ConfusionMatrixType = 2
	ConfusionMatrixType_FN      ConfusionMatrixType = 3
	ConfusionMatrixType_TN      ConfusionMatrixType = 4
	ConfusionMatrixType_Unknown ConfusionMatrixType = 5
	// Matched True Positive, only for gt.
	ConfusionMatrixType_MTP     ConfusionMatrixType = 11
	ConfusionMatrixType_IGNORED ConfusionMatrixType = 12
)

// Enum value maps for ConfusionMatrixType.
var (
	ConfusionMatrixType_name = map[int32]string{
		0:  "NotSet",
		1:  "TP",
		2:  "FP",
		3:  "FN",
		4:  "TN",
		5:  "Unknown",
		11: "MTP",
		12: "IGNORED",
	}
	ConfusionMatrixType_value = map[string]int32{
		"NotSet":  0,
		"TP":      1,
		"FP":      2,
		"FN":      3,
		"TN":      4,
		"Unknown": 5,
		"MTP":     11,
		"IGNORED": 12,
	}
)

func (x ConfusionMatrixType) Enum() *ConfusionMatrixType {
	p := new(ConfusionMatrixType)
	*p = x
	return p
}

func (x ConfusionMatrixType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfusionMatrixType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[11].Descriptor()
}

func (ConfusionMatrixType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[11]
}

func (x ConfusionMatrixType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfusionMatrixType.Descriptor instead.
func (ConfusionMatrixType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{11}
}

type EvaluationState int32

const (
	// evaluate not started
	EvaluationState_ES_NOT_SET EvaluationState = 0
	// evaluation result ready to use
	EvaluationState_ES_READY EvaluationState = 1
	// evaluation not finished because there's no gt or pred
	EvaluationState_ES_NO_GT_OR_PRED EvaluationState = 2
	// evaluation not finished because there're too many images or too many class ids
	EvaluationState_ES_EXCEEDS_LIMIT EvaluationState = 3
	// evaluation not finished because there's no evaluate class ids
	EvaluationState_ES_NO_CLASS_IDS EvaluationState = 4
)

// Enum value maps for EvaluationState.
var (
	EvaluationState_name = map[int32]string{
		0: "ES_NOT_SET",
		1: "ES_READY",
		2: "ES_NO_GT_OR_PRED",
		3: "ES_EXCEEDS_LIMIT",
		4: "ES_NO_CLASS_IDS",
	}
	EvaluationState_value = map[string]int32{
		"ES_NOT_SET":       0,
		"ES_READY":         1,
		"ES_NO_GT_OR_PRED": 2,
		"ES_EXCEEDS_LIMIT": 3,
		"ES_NO_CLASS_IDS":  4,
	}
)

func (x EvaluationState) Enum() *EvaluationState {
	p := new(EvaluationState)
	*p = x
	return p
}

func (x EvaluationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvaluationState) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[12].Descriptor()
}

func (EvaluationState) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[12]
}

func (x EvaluationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvaluationState.Descriptor instead.
func (EvaluationState) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{12}
}

/// ========== metadatas.mir ==========
type MirMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// key: asset hash, value: attributes
	Attributes map[string]*MetadataAttributes `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirMetadatas) Reset() {
	*x = MirMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirMetadatas) ProtoMessage() {}

func (x *MirMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirMetadatas.ProtoReflect.Descriptor instead.
func (*MirMetadatas) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{0}
}

func (x *MirMetadatas) GetAttributes() map[string]*MetadataAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type MetadataAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TvtType        TvtType    `protobuf:"varint,3,opt,name=tvt_type,json=tvtType,proto3,enum=mir.command.TvtType" json:"tvt_type,omitempty"`
	AssetType      AssetType  `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=mir.command.AssetType" json:"asset_type,omitempty"`
	Width          int32      `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`                                      /// column number
	Height         int32      `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`                                    /// row number
	ImageChannels  int32      `protobuf:"varint,7,opt,name=image_channels,json=imageChannels,proto3" json:"image_channels,omitempty"` /// (for images) channel count
	ByteSize       int32      `protobuf:"varint,8,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	OriginFilename string     `protobuf:"bytes,9,opt,name=origin_filename,json=originFilename,proto3" json:"origin_filename,omitempty"`
}

func (x *MetadataAttributes) Reset() {
	*x = MetadataAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataAttributes) ProtoMessage() {}

func (x *MetadataAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataAttributes.ProtoReflect.Descriptor instead.
func (*MetadataAttributes) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{1}
}

func (x *MetadataAttributes) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetadataAttributes) GetTvtType() TvtType {
	if x != nil {
		return x.TvtType
	}
	return TvtType_TvtTypeUnknown
}

func (x *MetadataAttributes) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_AssetTypeUnknown
}

func (x *MetadataAttributes) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MetadataAttributes) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MetadataAttributes) GetImageChannels() int32 {
	if x != nil {
		return x.ImageChannels
	}
	return 0
}

func (x *MetadataAttributes) GetByteSize() int32 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *MetadataAttributes) GetOriginFilename() string {
	if x != nil {
		return x.OriginFilename
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// start time stamp, use int32 as int64 is not correctly parsed.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	/// duration (in seconds), for images, it's always 0
	Duration float32 `protobuf:"fixed32,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{2}
}

func (x *Timestamp) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Timestamp) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

/// ========== annotations.mir ==========
type MirAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroundTruth *SingleTaskAnnotations `protobuf:"bytes,3,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	Prediction  *SingleTaskAnnotations `protobuf:"bytes,4,opt,name=prediction,proto3" json:"prediction,omitempty"`
	// key: asset id, value: cks and image quality, from pred and gt
	ImageCks map[string]*SingleImageCks `protobuf:"bytes,5,rep,name=image_cks,json=imageCks,proto3" json:"image_cks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirAnnotations) Reset() {
	*x = MirAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirAnnotations) ProtoMessage() {}

func (x *MirAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirAnnotations.ProtoReflect.Descriptor instead.
func (*MirAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{3}
}

func (x *MirAnnotations) GetGroundTruth() *SingleTaskAnnotations {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

func (x *MirAnnotations) GetPrediction() *SingleTaskAnnotations {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *MirAnnotations) GetImageCks() map[string]*SingleImageCks {
	if x != nil {
		return x.ImageCks
	}
	return nil
}

type SingleTaskAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// key: image id, value: annotations of that single image
	ImageAnnotations map[string]*SingleImageAnnotations `protobuf:"bytes,1,rep,name=image_annotations,json=imageAnnotations,proto3" json:"image_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskId           string                             `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Type             ObjectType                         `protobuf:"varint,3,opt,name=type,proto3,enum=mir.command.ObjectType" json:"type,omitempty"`
	// Set of all shown class ids.
	TaskClassIds           []int32 `protobuf:"varint,4,rep,packed,name=task_class_ids,json=taskClassIds,proto3" json:"task_class_ids,omitempty"`
	IsInstanceSegmentation bool    `protobuf:"varint,5,opt,name=is_instance_segmentation,json=isInstanceSegmentation,proto3" json:"is_instance_segmentation,omitempty"`
	// meta infos of this SingleTaskAnnotations
	EvalClassIds []int32 `protobuf:"varint,10,rep,packed,name=eval_class_ids,json=evalClassIds,proto3" json:"eval_class_ids,omitempty"`
	// model meta info associated with this single_task_annotations
	Model *ModelMeta `protobuf:"bytes,11,opt,name=model,proto3" json:"model,omitempty"`
	// executor config used to generate this single task annotations
	ExecutorConfig string `protobuf:"bytes,12,opt,name=executor_config,json=executorConfig,proto3" json:"executor_config,omitempty"`
}

func (x *SingleTaskAnnotations) Reset() {
	*x = SingleTaskAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskAnnotations) ProtoMessage() {}

func (x *SingleTaskAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskAnnotations.ProtoReflect.Descriptor instead.
func (*SingleTaskAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{4}
}

func (x *SingleTaskAnnotations) GetImageAnnotations() map[string]*SingleImageAnnotations {
	if x != nil {
		return x.ImageAnnotations
	}
	return nil
}

func (x *SingleTaskAnnotations) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SingleTaskAnnotations) GetType() ObjectType {
	if x != nil {
		return x.Type
	}
	return ObjectType_OT_UNKNOWN
}

func (x *SingleTaskAnnotations) GetTaskClassIds() []int32 {
	if x != nil {
		return x.TaskClassIds
	}
	return nil
}

func (x *SingleTaskAnnotations) GetIsInstanceSegmentation() bool {
	if x != nil {
		return x.IsInstanceSegmentation
	}
	return false
}

func (x *SingleTaskAnnotations) GetEvalClassIds() []int32 {
	if x != nil {
		return x.EvalClassIds
	}
	return nil
}

func (x *SingleTaskAnnotations) GetModel() *ModelMeta {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *SingleTaskAnnotations) GetExecutorConfig() string {
	if x != nil {
		return x.ExecutorConfig
	}
	return ""
}

type SingleImageAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boxes []*ObjectAnnotation `protobuf:"bytes,2,rep,name=boxes,proto3" json:"boxes,omitempty"`
	// Set of class ids shown in this image.
	ImgClassIds []int32 `protobuf:"varint,5,rep,packed,name=img_class_ids,json=imgClassIds,proto3" json:"img_class_ids,omitempty"`
}

func (x *SingleImageAnnotations) Reset() {
	*x = SingleImageAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleImageAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleImageAnnotations) ProtoMessage() {}

func (x *SingleImageAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleImageAnnotations.ProtoReflect.Descriptor instead.
func (*SingleImageAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{5}
}

func (x *SingleImageAnnotations) GetBoxes() []*ObjectAnnotation {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *SingleImageAnnotations) GetImgClassIds() []int32 {
	if x != nil {
		return x.ImgClassIds
	}
	return nil
}

type SingleImageCks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cks          map[string]string `protobuf:"bytes,1,rep,name=cks,proto3" json:"cks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImageQuality float32           `protobuf:"fixed32,2,opt,name=image_quality,json=imageQuality,proto3" json:"image_quality,omitempty"`
}

func (x *SingleImageCks) Reset() {
	*x = SingleImageCks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleImageCks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleImageCks) ProtoMessage() {}

func (x *SingleImageCks) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleImageCks.ProtoReflect.Descriptor instead.
func (*SingleImageCks) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{6}
}

func (x *SingleImageCks) GetCks() map[string]string {
	if x != nil {
		return x.Cks
	}
	return nil
}

func (x *SingleImageCks) GetImageQuality() float32 {
	if x != nil {
		return x.ImageQuality
	}
	return 0
}

type ObjectAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of this annotation in current single image, may be different from the index in repeated field.
	Index       int32               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Box         *Rect               `protobuf:"bytes,2,opt,name=box,proto3" json:"box,omitempty"`
	ClassId     int32               `protobuf:"varint,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Score       float64             `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	AnnoQuality float32             `protobuf:"fixed32,5,opt,name=anno_quality,json=annoQuality,proto3" json:"anno_quality,omitempty"`
	Tags        map[string]string   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cm          ConfusionMatrixType `protobuf:"varint,7,opt,name=cm,proto3,enum=mir.command.ConfusionMatrixType" json:"cm,omitempty"`
	DetLinkId   int32               `protobuf:"varint,8,opt,name=det_link_id,json=detLinkId,proto3" json:"det_link_id,omitempty"`
	ClassName   string              `protobuf:"bytes,9,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"` // for data parsed from outside, e.g. inference.
	Polygon     []*IntPoint         `protobuf:"bytes,10,rep,name=polygon,proto3" json:"polygon,omitempty"`
	Mask        string              `protobuf:"bytes,11,opt,name=mask,proto3" json:"mask,omitempty"`        // RLE encoded mask
	Iscrowd     int32               `protobuf:"varint,12,opt,name=iscrowd,proto3" json:"iscrowd,omitempty"` // 0 or 1
	Type        ObjectSubType       `protobuf:"varint,13,opt,name=type,proto3,enum=mir.command.ObjectSubType" json:"type,omitempty"`
	MaskArea    int32               `protobuf:"varint,14,opt,name=mask_area,json=maskArea,proto3" json:"mask_area,omitempty"`
}

func (x *ObjectAnnotation) Reset() {
	*x = ObjectAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAnnotation) ProtoMessage() {}

func (x *ObjectAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAnnotation.ProtoReflect.Descriptor instead.
func (*ObjectAnnotation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{7}
}

func (x *ObjectAnnotation) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ObjectAnnotation) GetBox() *Rect {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *ObjectAnnotation) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *ObjectAnnotation) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ObjectAnnotation) GetAnnoQuality() float32 {
	if x != nil {
		return x.AnnoQuality
	}
	return 0
}

func (x *ObjectAnnotation) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ObjectAnnotation) GetCm() ConfusionMatrixType {
	if x != nil {
		return x.Cm
	}
	return ConfusionMatrixType_NotSet
}

func (x *ObjectAnnotation) GetDetLinkId() int32 {
	if x != nil {
		return x.DetLinkId
	}
	return 0
}

func (x *ObjectAnnotation) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ObjectAnnotation) GetPolygon() []*IntPoint {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *ObjectAnnotation) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *ObjectAnnotation) GetIscrowd() int32 {
	if x != nil {
		return x.Iscrowd
	}
	return 0
}

func (x *ObjectAnnotation) GetType() ObjectSubType {
	if x != nil {
		return x.Type
	}
	return ObjectSubType_OST_NOTSET
}

func (x *ObjectAnnotation) GetMaskArea() int32 {
	if x != nil {
		return x.MaskArea
	}
	return 0
}

type Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X           int32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y           int32   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W           int32   `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H           int32   `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	RotateAngle float32 `protobuf:"fixed32,5,opt,name=rotate_angle,json=rotateAngle,proto3" json:"rotate_angle,omitempty"` // unit in pi.
}

func (x *Rect) Reset() {
	*x = Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{8}
}

func (x *Rect) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rect) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rect) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Rect) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Rect) GetRotateAngle() float32 {
	if x != nil {
		return x.RotateAngle
	}
	return 0
}

/// ========== keywords.mir ==========
type MirKeywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredIdx *CiTagToIndex `protobuf:"bytes,7,opt,name=pred_idx,json=predIdx,proto3" json:"pred_idx,omitempty"` // ci to assets, generated from preds
	GtIdx   *CiTagToIndex `protobuf:"bytes,8,opt,name=gt_idx,json=gtIdx,proto3" json:"gt_idx,omitempty"`       // ci to assets, generated from gt
	// key: ck main key, value: assets and assets with sub keys, from (mir_annotations.image_cks) pred and gt
	CkIdx map[string]*AssetAnnoIndex `protobuf:"bytes,9,rep,name=ck_idx,json=ckIdx,proto3" json:"ck_idx,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirKeywords) Reset() {
	*x = MirKeywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirKeywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirKeywords) ProtoMessage() {}

func (x *MirKeywords) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirKeywords.ProtoReflect.Descriptor instead.
func (*MirKeywords) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{9}
}

func (x *MirKeywords) GetPredIdx() *CiTagToIndex {
	if x != nil {
		return x.PredIdx
	}
	return nil
}

func (x *MirKeywords) GetGtIdx() *CiTagToIndex {
	if x != nil {
		return x.GtIdx
	}
	return nil
}

func (x *MirKeywords) GetCkIdx() map[string]*AssetAnnoIndex {
	if x != nil {
		return x.CkIdx
	}
	return nil
}

type CiTagToIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: ci, value: annos
	Cis map[int32]*MapStringToInt32List `protobuf:"bytes,1,rep,name=cis,proto3" json:"cis,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key: ck main key, value: annos and annos with sub keys
	Tags map[string]*AssetAnnoIndex `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CiTagToIndex) Reset() {
	*x = CiTagToIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiTagToIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiTagToIndex) ProtoMessage() {}

func (x *CiTagToIndex) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiTagToIndex.ProtoReflect.Descriptor instead.
func (*CiTagToIndex) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{10}
}

func (x *CiTagToIndex) GetCis() map[int32]*MapStringToInt32List {
	if x != nil {
		return x.Cis
	}
	return nil
}

func (x *CiTagToIndex) GetTags() map[string]*AssetAnnoIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds []string `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{11}
}

func (x *StringList) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

type MapStringToInt32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyIds map[string]*Int32List `protobuf:"bytes,1,rep,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringToInt32List) Reset() {
	*x = MapStringToInt32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringToInt32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringToInt32List) ProtoMessage() {}

func (x *MapStringToInt32List) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringToInt32List.ProtoReflect.Descriptor instead.
func (*MapStringToInt32List) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{12}
}

func (x *MapStringToInt32List) GetKeyIds() map[string]*Int32List {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{13}
}

func (x *Int32List) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type AssetAnnoIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetAnnos map[string]*Int32List            `protobuf:"bytes,1,rep,name=asset_annos,json=assetAnnos,proto3" json:"asset_annos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: asset id, value: annotation indexes
	SubIndexes map[string]*MapStringToInt32List `protobuf:"bytes,2,rep,name=sub_indexes,json=subIndexes,proto3" json:"sub_indexes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: ck value, value: asset and it's annotation indexes
}

func (x *AssetAnnoIndex) Reset() {
	*x = AssetAnnoIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAnnoIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAnnoIndex) ProtoMessage() {}

func (x *AssetAnnoIndex) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAnnoIndex.ProtoReflect.Descriptor instead.
func (*AssetAnnoIndex) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{14}
}

func (x *AssetAnnoIndex) GetAssetAnnos() map[string]*Int32List {
	if x != nil {
		return x.AssetAnnos
	}
	return nil
}

func (x *AssetAnnoIndex) GetSubIndexes() map[string]*MapStringToInt32List {
	if x != nil {
		return x.SubIndexes
	}
	return nil
}

/// ========== tasks.mir ==========
type MirTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks      map[string]*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeadTaskId string           `protobuf:"bytes,2,opt,name=head_task_id,json=headTaskId,proto3" json:"head_task_id,omitempty"`
}

func (x *MirTasks) Reset() {
	*x = MirTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirTasks) ProtoMessage() {}

func (x *MirTasks) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirTasks.ProtoReflect.Descriptor instead.
func (*MirTasks) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{15}
}

func (x *MirTasks) GetTasks() map[string]*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *MirTasks) GetHeadTaskId() string {
	if x != nil {
		return x.HeadTaskId
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=mir.command.TaskType" json:"type,omitempty"`
	/// user defined task name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	/// auto generated unique id
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	/// execution time of this task
	Timestamp int32 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // RFC 3339 date strings
	/// (for training task): result model for cmd train
	Model      *ModelMeta  `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	ReturnCode int32       `protobuf:"varint,8,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string      `protobuf:"bytes,9,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Evaluation *Evaluation `protobuf:"bytes,10,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	/// (for import task): new types for cmd import, key: class name, value: asset count
	NewTypes map[string]int32 `protobuf:"bytes,11,rep,name=new_types,json=newTypes,proto3" json:"new_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	/// (for import task): reason for new types, True: added, False: ignored
	NewTypesAdded            bool   `protobuf:"varint,12,opt,name=new_types_added,json=newTypesAdded,proto3" json:"new_types_added,omitempty"`
	SerializedExecutorConfig string `protobuf:"bytes,103,opt,name=serialized_executor_config,json=serializedExecutorConfig,proto3" json:"serialized_executor_config,omitempty"`
	SrcRevs                  string `protobuf:"bytes,104,opt,name=src_revs,json=srcRevs,proto3" json:"src_revs,omitempty"`
	DstRev                   string `protobuf:"bytes,105,opt,name=dst_rev,json=dstRev,proto3" json:"dst_rev,omitempty"`
	Executor                 string `protobuf:"bytes,106,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{16}
}

func (x *Task) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TaskTypeUnknown
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Task) GetModel() *ModelMeta {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Task) GetReturnCode() int32 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *Task) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *Task) GetEvaluation() *Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *Task) GetNewTypes() map[string]int32 {
	if x != nil {
		return x.NewTypes
	}
	return nil
}

func (x *Task) GetNewTypesAdded() bool {
	if x != nil {
		return x.NewTypesAdded
	}
	return false
}

func (x *Task) GetSerializedExecutorConfig() string {
	if x != nil {
		return x.SerializedExecutorConfig
	}
	return ""
}

func (x *Task) GetSrcRevs() string {
	if x != nil {
		return x.SrcRevs
	}
	return ""
}

func (x *Task) GetDstRev() string {
	if x != nil {
		return x.DstRev
	}
	return ""
}

func (x *Task) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

type ModelMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// hash for models.tar.gz
	ModelHash string `protobuf:"bytes,1,opt,name=model_hash,json=modelHash,proto3" json:"model_hash,omitempty"`
	/// available in detection models
	MAP float32 `protobuf:"fixed32,2,opt,name=mAP,proto3" json:"mAP,omitempty"`
	/// context generated by train command
	Context        string                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	Stages         map[string]*ModelStage `protobuf:"bytes,4,rep,name=stages,proto3" json:"stages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BestStageName  string                 `protobuf:"bytes,5,opt,name=best_stage_name,json=bestStageName,proto3" json:"best_stage_name,omitempty"`
	ClassNames     []string               `protobuf:"bytes,6,rep,name=class_names,json=classNames,proto3" json:"class_names,omitempty"`
	EvaluateConfig *EvaluateConfig        `protobuf:"bytes,7,opt,name=evaluate_config,json=evaluateConfig,proto3" json:"evaluate_config,omitempty"`
	/// detection: 2, semantic segmentation: 3, instance segmentation: 4
	ObjectType int32 `protobuf:"varint,8,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	/// available in semantic segmentation models
	MIoU float32 `protobuf:"fixed32,9,opt,name=mIoU,proto3" json:"mIoU,omitempty"`
	/// available in instance segmentation models
	MaskAP float32 `protobuf:"fixed32,10,opt,name=maskAP,proto3" json:"maskAP,omitempty"`
}

func (x *ModelMeta) Reset() {
	*x = ModelMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMeta) ProtoMessage() {}

func (x *ModelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMeta.ProtoReflect.Descriptor instead.
func (*ModelMeta) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{17}
}

func (x *ModelMeta) GetModelHash() string {
	if x != nil {
		return x.ModelHash
	}
	return ""
}

func (x *ModelMeta) GetMAP() float32 {
	if x != nil {
		return x.MAP
	}
	return 0
}

func (x *ModelMeta) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ModelMeta) GetStages() map[string]*ModelStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *ModelMeta) GetBestStageName() string {
	if x != nil {
		return x.BestStageName
	}
	return ""
}

func (x *ModelMeta) GetClassNames() []string {
	if x != nil {
		return x.ClassNames
	}
	return nil
}

func (x *ModelMeta) GetEvaluateConfig() *EvaluateConfig {
	if x != nil {
		return x.EvaluateConfig
	}
	return nil
}

func (x *ModelMeta) GetObjectType() int32 {
	if x != nil {
		return x.ObjectType
	}
	return 0
}

func (x *ModelMeta) GetMIoU() float32 {
	if x != nil {
		return x.MIoU
	}
	return 0
}

func (x *ModelMeta) GetMaskAP() float32 {
	if x != nil {
		return x.MaskAP
	}
	return 0
}

type ModelStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageName            string                   `protobuf:"bytes,1,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	Files                []string                 `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Timestamp            int32                    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CiAveragedEvaluation *SingleEvaluationElement `protobuf:"bytes,5,opt,name=ci_averaged_evaluation,json=ciAveragedEvaluation,proto3" json:"ci_averaged_evaluation,omitempty"`
}

func (x *ModelStage) Reset() {
	*x = ModelStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStage) ProtoMessage() {}

func (x *ModelStage) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStage.ProtoReflect.Descriptor instead.
func (*ModelStage) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{18}
}

func (x *ModelStage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *ModelStage) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ModelStage) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ModelStage) GetCiAveragedEvaluation() *SingleEvaluationElement {
	if x != nil {
		return x.CiAveragedEvaluation
	}
	return nil
}

type Evaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *EvaluateConfig                     `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	DatasetEvaluation *SingleDatasetEvaluation            `protobuf:"bytes,3,opt,name=dataset_evaluation,json=datasetEvaluation,proto3" json:"dataset_evaluation,omitempty"`
	MainCk            *SingleDatasetEvaluation            `protobuf:"bytes,4,opt,name=main_ck,json=mainCk,proto3" json:"main_ck,omitempty"`
	SubCks            map[string]*SingleDatasetEvaluation `protobuf:"bytes,5,rep,name=sub_cks,json=subCks,proto3" json:"sub_cks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State             EvaluationState                     `protobuf:"varint,6,opt,name=state,proto3,enum=mir.command.EvaluationState" json:"state,omitempty"`
}

func (x *Evaluation) Reset() {
	*x = Evaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evaluation) ProtoMessage() {}

func (x *Evaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evaluation.ProtoReflect.Descriptor instead.
func (*Evaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{19}
}

func (x *Evaluation) GetConfig() *EvaluateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Evaluation) GetDatasetEvaluation() *SingleDatasetEvaluation {
	if x != nil {
		return x.DatasetEvaluation
	}
	return nil
}

func (x *Evaluation) GetMainCk() *SingleDatasetEvaluation {
	if x != nil {
		return x.MainCk
	}
	return nil
}

func (x *Evaluation) GetSubCks() map[string]*SingleDatasetEvaluation {
	if x != nil {
		return x.SubCks
	}
	return nil
}

func (x *Evaluation) GetState() EvaluationState {
	if x != nil {
		return x.State
	}
	return EvaluationState_ES_NOT_SET
}

type EvaluateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfThr                float32    `protobuf:"fixed32,3,opt,name=conf_thr,json=confThr,proto3" json:"conf_thr,omitempty"`
	IouThrsInterval        string     `protobuf:"bytes,4,opt,name=iou_thrs_interval,json=iouThrsInterval,proto3" json:"iou_thrs_interval,omitempty"`
	NeedPrCurve            bool       `protobuf:"varint,5,opt,name=need_pr_curve,json=needPrCurve,proto3" json:"need_pr_curve,omitempty"`
	ClassIds               []int32    `protobuf:"varint,7,rep,packed,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	MainCk                 string     `protobuf:"bytes,8,opt,name=main_ck,json=mainCk,proto3" json:"main_ck,omitempty"`
	Type                   ObjectType `protobuf:"varint,9,opt,name=type,proto3,enum=mir.command.ObjectType" json:"type,omitempty"`
	IsInstanceSegmentation bool       `protobuf:"varint,10,opt,name=is_instance_segmentation,json=isInstanceSegmentation,proto3" json:"is_instance_segmentation,omitempty"`
}

func (x *EvaluateConfig) Reset() {
	*x = EvaluateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateConfig) ProtoMessage() {}

func (x *EvaluateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateConfig.ProtoReflect.Descriptor instead.
func (*EvaluateConfig) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{20}
}

func (x *EvaluateConfig) GetConfThr() float32 {
	if x != nil {
		return x.ConfThr
	}
	return 0
}

func (x *EvaluateConfig) GetIouThrsInterval() string {
	if x != nil {
		return x.IouThrsInterval
	}
	return ""
}

func (x *EvaluateConfig) GetNeedPrCurve() bool {
	if x != nil {
		return x.NeedPrCurve
	}
	return false
}

func (x *EvaluateConfig) GetClassIds() []int32 {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

func (x *EvaluateConfig) GetMainCk() string {
	if x != nil {
		return x.MainCk
	}
	return ""
}

func (x *EvaluateConfig) GetType() ObjectType {
	if x != nil {
		return x.Type
	}
	return ObjectType_OT_UNKNOWN
}

func (x *EvaluateConfig) GetIsInstanceSegmentation() bool {
	if x != nil {
		return x.IsInstanceSegmentation
	}
	return false
}

type SingleDatasetEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfThr               float32                         `protobuf:"fixed32,1,opt,name=conf_thr,json=confThr,proto3" json:"conf_thr,omitempty"`
	IouEvaluations        map[string]*SingleIouEvaluation `protobuf:"bytes,4,rep,name=iou_evaluations,json=iouEvaluations,proto3" json:"iou_evaluations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: string of iou threshold
	IouAveragedEvaluation *SingleIouEvaluation            `protobuf:"bytes,5,opt,name=iou_averaged_evaluation,json=iouAveragedEvaluation,proto3" json:"iou_averaged_evaluation,omitempty"`                                                                  // average for all ious
	SegmentationMetrics   *SegmentationMetrics            `protobuf:"bytes,6,opt,name=segmentation_metrics,json=segmentationMetrics,proto3" json:"segmentation_metrics,omitempty"`
}

func (x *SingleDatasetEvaluation) Reset() {
	*x = SingleDatasetEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetEvaluation) ProtoMessage() {}

func (x *SingleDatasetEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetEvaluation.ProtoReflect.Descriptor instead.
func (*SingleDatasetEvaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{21}
}

func (x *SingleDatasetEvaluation) GetConfThr() float32 {
	if x != nil {
		return x.ConfThr
	}
	return 0
}

func (x *SingleDatasetEvaluation) GetIouEvaluations() map[string]*SingleIouEvaluation {
	if x != nil {
		return x.IouEvaluations
	}
	return nil
}

func (x *SingleDatasetEvaluation) GetIouAveragedEvaluation() *SingleIouEvaluation {
	if x != nil {
		return x.IouAveragedEvaluation
	}
	return nil
}

func (x *SingleDatasetEvaluation) GetSegmentationMetrics() *SegmentationMetrics {
	if x != nil {
		return x.SegmentationMetrics
	}
	return nil
}

type SegmentationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AAcc float32           `protobuf:"fixed32,1,opt,name=aAcc,proto3" json:"aAcc,omitempty"`                                                                                        // overall accuracy
	MAcc float32           `protobuf:"fixed32,2,opt,name=mAcc,proto3" json:"mAcc,omitempty"`                                                                                        // mean accuracy
	MIoU float32           `protobuf:"fixed32,3,opt,name=mIoU,proto3" json:"mIoU,omitempty"`                                                                                        // mean iou
	Acc  map[int32]float32 `protobuf:"bytes,4,rep,name=Acc,proto3" json:"Acc,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // classwise accuracy
	IoU  map[int32]float32 `protobuf:"bytes,5,rep,name=IoU,proto3" json:"IoU,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // classwise iou
}

func (x *SegmentationMetrics) Reset() {
	*x = SegmentationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentationMetrics) ProtoMessage() {}

func (x *SegmentationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentationMetrics.ProtoReflect.Descriptor instead.
func (*SegmentationMetrics) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{22}
}

func (x *SegmentationMetrics) GetAAcc() float32 {
	if x != nil {
		return x.AAcc
	}
	return 0
}

func (x *SegmentationMetrics) GetMAcc() float32 {
	if x != nil {
		return x.MAcc
	}
	return 0
}

func (x *SegmentationMetrics) GetMIoU() float32 {
	if x != nil {
		return x.MIoU
	}
	return 0
}

func (x *SegmentationMetrics) GetAcc() map[int32]float32 {
	if x != nil {
		return x.Acc
	}
	return nil
}

func (x *SegmentationMetrics) GetIoU() map[int32]float32 {
	if x != nil {
		return x.IoU
	}
	return nil
}

type SingleIouEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiEvaluations        map[int32]*SingleEvaluationElement `protobuf:"bytes,1,rep,name=ci_evaluations,json=ciEvaluations,proto3" json:"ci_evaluations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: class ids
	CiAveragedEvaluation *SingleEvaluationElement           `protobuf:"bytes,2,opt,name=ci_averaged_evaluation,json=ciAveragedEvaluation,proto3" json:"ci_averaged_evaluation,omitempty"`                                                                   // evaluations averaged by class ids
}

func (x *SingleIouEvaluation) Reset() {
	*x = SingleIouEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleIouEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleIouEvaluation) ProtoMessage() {}

func (x *SingleIouEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleIouEvaluation.ProtoReflect.Descriptor instead.
func (*SingleIouEvaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{23}
}

func (x *SingleIouEvaluation) GetCiEvaluations() map[int32]*SingleEvaluationElement {
	if x != nil {
		return x.CiEvaluations
	}
	return nil
}

func (x *SingleIouEvaluation) GetCiAveragedEvaluation() *SingleEvaluationElement {
	if x != nil {
		return x.CiAveragedEvaluation
	}
	return nil
}

type SingleEvaluationElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// available in detection models and evaluate results
	Ap float32 `protobuf:"fixed32,1,opt,name=ap,proto3" json:"ap,omitempty"`
	Ar float32 `protobuf:"fixed32,2,opt,name=ar,proto3" json:"ar,omitempty"`
	// available in all models and evaluate results
	Tp      int32         `protobuf:"varint,3,opt,name=tp,proto3" json:"tp,omitempty"`
	Fp      int32         `protobuf:"varint,4,opt,name=fp,proto3" json:"fp,omitempty"`
	Fn      int32         `protobuf:"varint,5,opt,name=fn,proto3" json:"fn,omitempty"`
	PrCurve []*FloatPoint `protobuf:"bytes,6,rep,name=pr_curve,json=prCurve,proto3" json:"pr_curve,omitempty"`
	// available in semantic segmentation models and evaluate results
	Iou float32 `protobuf:"fixed32,7,opt,name=iou,proto3" json:"iou,omitempty"`
	Acc float32 `protobuf:"fixed32,8,opt,name=acc,proto3" json:"acc,omitempty"`
	// available in instance segmentation models and evaluate results
	MaskAP float32 `protobuf:"fixed32,9,opt,name=maskAP,proto3" json:"maskAP,omitempty"`
	BoxAP  float32 `protobuf:"fixed32,10,opt,name=boxAP,proto3" json:"boxAP,omitempty"`
}

func (x *SingleEvaluationElement) Reset() {
	*x = SingleEvaluationElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEvaluationElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEvaluationElement) ProtoMessage() {}

func (x *SingleEvaluationElement) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEvaluationElement.ProtoReflect.Descriptor instead.
func (*SingleEvaluationElement) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{24}
}

func (x *SingleEvaluationElement) GetAp() float32 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *SingleEvaluationElement) GetAr() float32 {
	if x != nil {
		return x.Ar
	}
	return 0
}

func (x *SingleEvaluationElement) GetTp() int32 {
	if x != nil {
		return x.Tp
	}
	return 0
}

func (x *SingleEvaluationElement) GetFp() int32 {
	if x != nil {
		return x.Fp
	}
	return 0
}

func (x *SingleEvaluationElement) GetFn() int32 {
	if x != nil {
		return x.Fn
	}
	return 0
}

func (x *SingleEvaluationElement) GetPrCurve() []*FloatPoint {
	if x != nil {
		return x.PrCurve
	}
	return nil
}

func (x *SingleEvaluationElement) GetIou() float32 {
	if x != nil {
		return x.Iou
	}
	return 0
}

func (x *SingleEvaluationElement) GetAcc() float32 {
	if x != nil {
		return x.Acc
	}
	return 0
}

func (x *SingleEvaluationElement) GetMaskAP() float32 {
	if x != nil {
		return x.MaskAP
	}
	return 0
}

func (x *SingleEvaluationElement) GetBoxAP() float32 {
	if x != nil {
		return x.BoxAP
	}
	return 0
}

type IntPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *IntPoint) Reset() {
	*x = IntPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntPoint) ProtoMessage() {}

func (x *IntPoint) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntPoint.ProtoReflect.Descriptor instead.
func (*IntPoint) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{25}
}

func (x *IntPoint) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IntPoint) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *IntPoint) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type FloatPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *FloatPoint) Reset() {
	*x = FloatPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatPoint) ProtoMessage() {}

func (x *FloatPoint) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatPoint.ProtoReflect.Descriptor instead.
func (*FloatPoint) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{26}
}

func (x *FloatPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FloatPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *FloatPoint) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

/// ========== context.mir ==========
type MirContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// total images count
	ImagesCnt int32 `protobuf:"varint,1,opt,name=images_cnt,json=imagesCnt,proto3" json:"images_cnt,omitempty"`
	/// from pred and gt
	CksCnt           map[string]*SingleMapCount `protobuf:"bytes,6,rep,name=cks_cnt,json=cksCnt,proto3" json:"cks_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalAssetMbytes int32                      `protobuf:"varint,11,opt,name=total_asset_mbytes,json=totalAssetMbytes,proto3" json:"total_asset_mbytes,omitempty"`
	PredStats        *AnnoStats                 `protobuf:"bytes,100,opt,name=pred_stats,json=predStats,proto3" json:"pred_stats,omitempty"`
	GtStats          *AnnoStats                 `protobuf:"bytes,101,opt,name=gt_stats,json=gtStats,proto3" json:"gt_stats,omitempty"`
}

func (x *MirContext) Reset() {
	*x = MirContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirContext) ProtoMessage() {}

func (x *MirContext) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirContext.ProtoReflect.Descriptor instead.
func (*MirContext) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{27}
}

func (x *MirContext) GetImagesCnt() int32 {
	if x != nil {
		return x.ImagesCnt
	}
	return 0
}

func (x *MirContext) GetCksCnt() map[string]*SingleMapCount {
	if x != nil {
		return x.CksCnt
	}
	return nil
}

func (x *MirContext) GetTotalAssetMbytes() int32 {
	if x != nil {
		return x.TotalAssetMbytes
	}
	return 0
}

func (x *MirContext) GetPredStats() *AnnoStats {
	if x != nil {
		return x.PredStats
	}
	return nil
}

func (x *MirContext) GetGtStats() *AnnoStats {
	if x != nil {
		return x.GtStats
	}
	return nil
}

type SingleMapCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt    int32            `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	SubCnt map[string]int32 `protobuf:"bytes,2,rep,name=sub_cnt,json=subCnt,proto3" json:"sub_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SingleMapCount) Reset() {
	*x = SingleMapCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleMapCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMapCount) ProtoMessage() {}

func (x *SingleMapCount) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMapCount.ProtoReflect.Descriptor instead.
func (*SingleMapCount) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{28}
}

func (x *SingleMapCount) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *SingleMapCount) GetSubCnt() map[string]int32 {
	if x != nil {
		return x.SubCnt
	}
	return nil
}

type AnnoStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalObjCnt      int32 `protobuf:"varint,1,opt,name=total_obj_cnt,json=totalObjCnt,proto3" json:"total_obj_cnt,omitempty"`
	PositiveAssetCnt int32 `protobuf:"varint,2,opt,name=positive_asset_cnt,json=positiveAssetCnt,proto3" json:"positive_asset_cnt,omitempty"`
	NegativeAssetCnt int32 `protobuf:"varint,3,opt,name=negative_asset_cnt,json=negativeAssetCnt,proto3" json:"negative_asset_cnt,omitempty"`
	// key: main tag name, value: main tag count and sub tag names and counts
	TagsCnt map[string]*SingleMapCount `protobuf:"bytes,7,rep,name=tags_cnt,json=tagsCnt,proto3" json:"tags_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key: class ids, value: asset count for this class id
	ClassIdsCnt map[int32]int32 `protobuf:"bytes,8,rep,name=class_ids_cnt,json=classIdsCnt,proto3" json:"class_ids_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Shortcut of class_ids for evaluation (dup. field as in SingleTaskAnnotations).
	EvalClassIds  []int32 `protobuf:"varint,9,rep,packed,name=eval_class_ids,json=evalClassIds,proto3" json:"eval_class_ids,omitempty"`
	TotalMaskArea int64   `protobuf:"varint,10,opt,name=total_mask_area,json=totalMaskArea,proto3" json:"total_mask_area,omitempty"`
	// key: class ids, value: mask area for this class id
	ClassIdsMaskArea map[int32]int64 `protobuf:"bytes,11,rep,name=class_ids_mask_area,json=classIdsMaskArea,proto3" json:"class_ids_mask_area,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// key: class ids, value: obj count for this class id
	ClassIdsObjCnt map[int32]int32 `protobuf:"bytes,12,rep,name=class_ids_obj_cnt,json=classIdsObjCnt,proto3" json:"class_ids_obj_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *AnnoStats) Reset() {
	*x = AnnoStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnoStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnoStats) ProtoMessage() {}

func (x *AnnoStats) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnoStats.ProtoReflect.Descriptor instead.
func (*AnnoStats) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{29}
}

func (x *AnnoStats) GetTotalObjCnt() int32 {
	if x != nil {
		return x.TotalObjCnt
	}
	return 0
}

func (x *AnnoStats) GetPositiveAssetCnt() int32 {
	if x != nil {
		return x.PositiveAssetCnt
	}
	return 0
}

func (x *AnnoStats) GetNegativeAssetCnt() int32 {
	if x != nil {
		return x.NegativeAssetCnt
	}
	return 0
}

func (x *AnnoStats) GetTagsCnt() map[string]*SingleMapCount {
	if x != nil {
		return x.TagsCnt
	}
	return nil
}

func (x *AnnoStats) GetClassIdsCnt() map[int32]int32 {
	if x != nil {
		return x.ClassIdsCnt
	}
	return nil
}

func (x *AnnoStats) GetEvalClassIds() []int32 {
	if x != nil {
		return x.EvalClassIds
	}
	return nil
}

func (x *AnnoStats) GetTotalMaskArea() int64 {
	if x != nil {
		return x.TotalMaskArea
	}
	return 0
}

func (x *AnnoStats) GetClassIdsMaskArea() map[int32]int64 {
	if x != nil {
		return x.ClassIdsMaskArea
	}
	return nil
}

func (x *AnnoStats) GetClassIdsObjCnt() map[int32]int32 {
	if x != nil {
		return x.ClassIdsObjCnt
	}
	return nil
}

type ExportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Asset config.
	AssetFormat    AssetFormat `protobuf:"varint,1,opt,name=asset_format,json=assetFormat,proto3,enum=mir.command.AssetFormat" json:"asset_format,omitempty"`
	AssetDir       string      `protobuf:"bytes,2,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	AssetIndexFile string      `protobuf:"bytes,3,opt,name=asset_index_file,json=assetIndexFile,proto3" json:"asset_index_file,omitempty"`
	// Index file writes abs path. In TMI case, path should be converted, e.g. /in/assets.
	AssetIndexPrefix string `protobuf:"bytes,4,opt,name=asset_index_prefix,json=assetIndexPrefix,proto3" json:"asset_index_prefix,omitempty"`
	MediaLocation    string `protobuf:"bytes,5,opt,name=media_location,json=mediaLocation,proto3" json:"media_location,omitempty"`
	NeedSubFolder    bool   `protobuf:"varint,6,opt,name=need_sub_folder,json=needSubFolder,proto3" json:"need_sub_folder,omitempty"`
	// Annotation config.
	AnnoFormat      ExportFormat `protobuf:"varint,50,opt,name=anno_format,json=annoFormat,proto3,enum=mir.command.ExportFormat" json:"anno_format,omitempty"`
	GtDir           string       `protobuf:"bytes,51,opt,name=gt_dir,json=gtDir,proto3" json:"gt_dir,omitempty"`
	GtIndexFile     string       `protobuf:"bytes,52,opt,name=gt_index_file,json=gtIndexFile,proto3" json:"gt_index_file,omitempty"`
	GtIndexPrefix   string       `protobuf:"bytes,53,opt,name=gt_index_prefix,json=gtIndexPrefix,proto3" json:"gt_index_prefix,omitempty"`
	PredDir         string       `protobuf:"bytes,54,opt,name=pred_dir,json=predDir,proto3" json:"pred_dir,omitempty"`
	PredIndexFile   string       `protobuf:"bytes,55,opt,name=pred_index_file,json=predIndexFile,proto3" json:"pred_index_file,omitempty"`
	PredIndexPrefix string       `protobuf:"bytes,56,opt,name=pred_index_prefix,json=predIndexPrefix,proto3" json:"pred_index_prefix,omitempty"`
	TvtIndexDir     string       `protobuf:"bytes,57,opt,name=tvt_index_dir,json=tvtIndexDir,proto3" json:"tvt_index_dir,omitempty"`
}

func (x *ExportConfig) Reset() {
	*x = ExportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfig) ProtoMessage() {}

func (x *ExportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfig.ProtoReflect.Descriptor instead.
func (*ExportConfig) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{30}
}

func (x *ExportConfig) GetAssetFormat() AssetFormat {
	if x != nil {
		return x.AssetFormat
	}
	return AssetFormat_AF_UNKNOWN
}

func (x *ExportConfig) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *ExportConfig) GetAssetIndexFile() string {
	if x != nil {
		return x.AssetIndexFile
	}
	return ""
}

func (x *ExportConfig) GetAssetIndexPrefix() string {
	if x != nil {
		return x.AssetIndexPrefix
	}
	return ""
}

func (x *ExportConfig) GetMediaLocation() string {
	if x != nil {
		return x.MediaLocation
	}
	return ""
}

func (x *ExportConfig) GetNeedSubFolder() bool {
	if x != nil {
		return x.NeedSubFolder
	}
	return false
}

func (x *ExportConfig) GetAnnoFormat() ExportFormat {
	if x != nil {
		return x.AnnoFormat
	}
	return ExportFormat_EF_NO_ANNOTATIONS
}

func (x *ExportConfig) GetGtDir() string {
	if x != nil {
		return x.GtDir
	}
	return ""
}

func (x *ExportConfig) GetGtIndexFile() string {
	if x != nil {
		return x.GtIndexFile
	}
	return ""
}

func (x *ExportConfig) GetGtIndexPrefix() string {
	if x != nil {
		return x.GtIndexPrefix
	}
	return ""
}

func (x *ExportConfig) GetPredDir() string {
	if x != nil {
		return x.PredDir
	}
	return ""
}

func (x *ExportConfig) GetPredIndexFile() string {
	if x != nil {
		return x.PredIndexFile
	}
	return ""
}

func (x *ExportConfig) GetPredIndexPrefix() string {
	if x != nil {
		return x.PredIndexPrefix
	}
	return ""
}

func (x *ExportConfig) GetTvtIndexDir() string {
	if x != nil {
		return x.TvtIndexDir
	}
	return ""
}

var File_mir_command_proto protoreflect.FileDescriptor

var file_mir_command_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x02, 0x0a,
	0x12, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x76, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x74, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x3d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x4d, 0x69, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x1a, 0x58, 0x0a, 0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x8b, 0x04,
	0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x76,
	0x61, 0x6c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x68, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x16, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6d,
	0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6d, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x03, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b,
	0x73, 0x2e, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x6b, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x1a, 0x36, 0x0a, 0x08, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x04, 0x0a,
	0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a,
	0x02, 0x63, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x63, 0x6d, 0x12,
	0x1e, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x4d, 0x69, 0x72, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x69, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x49, 0x64, 0x78, 0x12, 0x30, 0x0a, 0x06,
	0x67, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x69, 0x54, 0x61, 0x67,
	0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x67, 0x74, 0x49, 0x64, 0x78, 0x12, 0x3a,
	0x0a, 0x06, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x6b, 0x49, 0x64, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6b, 0x49, 0x64, 0x78, 0x1a, 0x55, 0x0a, 0x0a, 0x43, 0x6b,
	0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x43, 0x69, 0x54, 0x61, 0x67, 0x54,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x03, 0x63, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x69, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43,
	0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x69, 0x54, 0x61, 0x67, 0x54, 0x6f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x59, 0x0a, 0x08, 0x43, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x54, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x0f, 0x53, 0x75,
	0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a,
	0x08, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x1a, 0x4b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xf2, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x37, 0x0a,
	0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e,
	0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x72, 0x65, 0x76, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x52, 0x65, 0x76, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74, 0x52, 0x65, 0x76, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4e, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x64, 0x10, 0x65, 0x4a, 0x04, 0x08, 0x65, 0x10, 0x66, 0x4a,
	0x04, 0x08, 0x66, 0x10, 0x67, 0x22, 0xc2, 0x03, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x41, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x41, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x49,
	0x6f, 0x55, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x49, 0x6f, 0x55, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x41, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x6d, 0x61, 0x73, 0x6b, 0x41, 0x50, 0x1a, 0x52, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x5a, 0x0a, 0x16,
	0x63, 0x69, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x14, 0x63, 0x69, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xae,
	0x03, 0x0a, 0x0a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x75, 0x62, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x43, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x5f, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x43,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0xaa, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x68, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x6f, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6f, 0x75, 0x54, 0x68, 0x72,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6b, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xb7, 0x03, 0x0a,
	0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x74, 0x68, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x54, 0x68, 0x72, 0x12, 0x61, 0x0a, 0x0f, 0x69, 0x6f, 0x75, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x69, 0x6f, 0x75, 0x5f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x6f, 0x75, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x14, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x13, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x63, 0x0a, 0x13, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xbb, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x41, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x61, 0x41,
	0x63, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x41, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6d, 0x41, 0x63, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x49, 0x6f, 0x55, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x49, 0x6f, 0x55, 0x12, 0x3b, 0x0a, 0x03, 0x41, 0x63,
	0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x41, 0x63, 0x63, 0x12, 0x3b, 0x0a, 0x03, 0x49, 0x6f, 0x55, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6f, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x03, 0x49, 0x6f, 0x55, 0x1a, 0x36, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08,
	0x49, 0x6f, 0x55, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x02, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49,
	0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e,
	0x63, 0x69, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x69, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x63, 0x69, 0x5f, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14,
	0x63, 0x69, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x66, 0x0a, 0x12, 0x43, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x61, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x61, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x6e, 0x12, 0x32,
	0x0a, 0x08, 0x70, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6f, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x69, 0x6f, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x61, 0x63, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x41, 0x50,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x41, 0x50, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x78, 0x41, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x62,
	0x6f, 0x78, 0x41, 0x50, 0x22, 0x34, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c,
	0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x7a, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x7a, 0x22, 0x8f, 0x03, 0x0a, 0x0a, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6b, 0x73, 0x43, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6b, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x67,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0b, 0x43, 0x6b, 0x73, 0x43, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x0c, 0x10, 0x0d, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x75, 0x62, 0x43, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53,
	0x75, 0x62, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x06, 0x0a, 0x09, 0x41, 0x6e, 0x6e, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x43, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x76, 0x61, 0x6c, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x12,
	0x5b, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x41, 0x72, 0x65, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x65, 0x61, 0x12, 0x55, 0x0a, 0x11,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4f, 0x62, 0x6a, 0x43, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4f, 0x62, 0x6a,
	0x43, 0x6e, 0x74, 0x1a, 0x57, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x65, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4f, 0x62, 0x6a,
	0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xc1, 0x04, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x44, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x67,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x44,
	0x69, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x76, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x76, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x69, 0x72, 0x2a, 0x5a, 0x0a, 0x07, 0x54, 0x76,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x76, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x10, 0x03, 0x2a, 0x88, 0x02, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x70, 0x65, 0x67,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x4d, 0x61, 0x74, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59, 0x75, 0x76, 0x34, 0x32, 0x30, 0x70, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x59, 0x75, 0x76, 0x34, 0x32, 0x30, 0x73, 0x70, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59, 0x75,
	0x76, 0x34, 0x32, 0x32, 0x70, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59, 0x75, 0x76, 0x34, 0x32, 0x32, 0x73,
	0x70, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6d, 0x70, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x70, 0x34, 0x10,
	0x65, 0x2a, 0x45, 0x0a, 0x0c, 0x47, 0x74, 0x4f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x50, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x50, 0x54, 0x5f, 0x47, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x50, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x50, 0x54, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x2a, 0xf8, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x69,
	0x74, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x10, 0x10, 0x2a, 0x87, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x10, 0x05, 0x2a, 0x4c, 0x0a,
	0x08, 0x53, 0x68, 0x61, 0x31, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41,
	0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x0a, 0x4d,
	0x69, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x52,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x49, 0x52, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44,
	0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x53,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x04, 0x2a, 0x36, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x46, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x46, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x46, 0x5f, 0x4c, 0x4d, 0x44, 0x42, 0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x54, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x54, 0x5f, 0x44, 0x45,
	0x54, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x64, 0x2a, 0x46, 0x0a, 0x0d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x1e, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x47, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e,
	0x10, 0x1f, 0x2a, 0x67, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x4e, 0x4f,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x46, 0x5f,
	0x56, 0x4f, 0x43, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x46, 0x5f,
	0x41, 0x52, 0x4b, 0x5f, 0x54, 0x58, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x46, 0x5f,
	0x4c, 0x53, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x46, 0x5f,
	0x43, 0x4f, 0x43, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0x64, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x54, 0x50, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x50, 0x10, 0x02, 0x12, 0x06,
	0x0a, 0x02, 0x46, 0x4e, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x4e, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x54, 0x50, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10,
	0x0c, 0x2a, 0x70, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x54, 0x5f, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x53, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x44,
	0x53, 0x10, 0x04, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mir_command_proto_rawDescOnce sync.Once
	file_mir_command_proto_rawDescData = file_mir_command_proto_rawDesc
)

func file_mir_command_proto_rawDescGZIP() []byte {
	file_mir_command_proto_rawDescOnce.Do(func() {
		file_mir_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_mir_command_proto_rawDescData)
	})
	return file_mir_command_proto_rawDescData
}

var file_mir_command_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_mir_command_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_mir_command_proto_goTypes = []interface{}{
	(TvtType)(0),                    // 0: mir.command.TvtType
	(AssetType)(0),                  // 1: mir.command.AssetType
	(GtOrPredType)(0),               // 2: mir.command.GtOrPredType
	(TaskType)(0),                   // 3: mir.command.TaskType
	(TaskState)(0),                  // 4: mir.command.TaskState
	(Sha1Type)(0),                   // 5: mir.command.Sha1Type
	(MirStorage)(0),                 // 6: mir.command.MirStorage
	(AssetFormat)(0),                // 7: mir.command.AssetFormat
	(ObjectType)(0),                 // 8: mir.command.ObjectType
	(ObjectSubType)(0),              // 9: mir.command.ObjectSubType
	(ExportFormat)(0),               // 10: mir.command.ExportFormat
	(ConfusionMatrixType)(0),        // 11: mir.command.ConfusionMatrixType
	(EvaluationState)(0),            // 12: mir.command.EvaluationState
	(*MirMetadatas)(nil),            // 13: mir.command.MirMetadatas
	(*MetadataAttributes)(nil),      // 14: mir.command.MetadataAttributes
	(*Timestamp)(nil),               // 15: mir.command.Timestamp
	(*MirAnnotations)(nil),          // 16: mir.command.MirAnnotations
	(*SingleTaskAnnotations)(nil),   // 17: mir.command.SingleTaskAnnotations
	(*SingleImageAnnotations)(nil),  // 18: mir.command.SingleImageAnnotations
	(*SingleImageCks)(nil),          // 19: mir.command.SingleImageCks
	(*ObjectAnnotation)(nil),        // 20: mir.command.ObjectAnnotation
	(*Rect)(nil),                    // 21: mir.command.Rect
	(*MirKeywords)(nil),             // 22: mir.command.MirKeywords
	(*CiTagToIndex)(nil),            // 23: mir.command.CiTagToIndex
	(*StringList)(nil),              // 24: mir.command.StringList
	(*MapStringToInt32List)(nil),    // 25: mir.command.MapStringToInt32List
	(*Int32List)(nil),               // 26: mir.command.Int32List
	(*AssetAnnoIndex)(nil),          // 27: mir.command.AssetAnnoIndex
	(*MirTasks)(nil),                // 28: mir.command.MirTasks
	(*Task)(nil),                    // 29: mir.command.Task
	(*ModelMeta)(nil),               // 30: mir.command.ModelMeta
	(*ModelStage)(nil),              // 31: mir.command.ModelStage
	(*Evaluation)(nil),              // 32: mir.command.Evaluation
	(*EvaluateConfig)(nil),          // 33: mir.command.EvaluateConfig
	(*SingleDatasetEvaluation)(nil), // 34: mir.command.SingleDatasetEvaluation
	(*SegmentationMetrics)(nil),     // 35: mir.command.SegmentationMetrics
	(*SingleIouEvaluation)(nil),     // 36: mir.command.SingleIouEvaluation
	(*SingleEvaluationElement)(nil), // 37: mir.command.SingleEvaluationElement
	(*IntPoint)(nil),                // 38: mir.command.IntPoint
	(*FloatPoint)(nil),              // 39: mir.command.FloatPoint
	(*MirContext)(nil),              // 40: mir.command.MirContext
	(*SingleMapCount)(nil),          // 41: mir.command.SingleMapCount
	(*AnnoStats)(nil),               // 42: mir.command.AnnoStats
	(*ExportConfig)(nil),            // 43: mir.command.ExportConfig
	nil,                             // 44: mir.command.MirMetadatas.AttributesEntry
	nil,                             // 45: mir.command.MirAnnotations.ImageCksEntry
	nil,                             // 46: mir.command.SingleTaskAnnotations.ImageAnnotationsEntry
	nil,                             // 47: mir.command.SingleImageCks.CksEntry
	nil,                             // 48: mir.command.ObjectAnnotation.TagsEntry
	nil,                             // 49: mir.command.MirKeywords.CkIdxEntry
	nil,                             // 50: mir.command.CiTagToIndex.CisEntry
	nil,                             // 51: mir.command.CiTagToIndex.TagsEntry
	nil,                             // 52: mir.command.MapStringToInt32List.KeyIdsEntry
	nil,                             // 53: mir.command.AssetAnnoIndex.AssetAnnosEntry
	nil,                             // 54: mir.command.AssetAnnoIndex.SubIndexesEntry
	nil,                             // 55: mir.command.MirTasks.TasksEntry
	nil,                             // 56: mir.command.Task.NewTypesEntry
	nil,                             // 57: mir.command.ModelMeta.StagesEntry
	nil,                             // 58: mir.command.Evaluation.SubCksEntry
	nil,                             // 59: mir.command.SingleDatasetEvaluation.IouEvaluationsEntry
	nil,                             // 60: mir.command.SegmentationMetrics.AccEntry
	nil,                             // 61: mir.command.SegmentationMetrics.IoUEntry
	nil,                             // 62: mir.command.SingleIouEvaluation.CiEvaluationsEntry
	nil,                             // 63: mir.command.MirContext.CksCntEntry
	nil,                             // 64: mir.command.SingleMapCount.SubCntEntry
	nil,                             // 65: mir.command.AnnoStats.TagsCntEntry
	nil,                             // 66: mir.command.AnnoStats.ClassIdsCntEntry
	nil,                             // 67: mir.command.AnnoStats.ClassIdsMaskAreaEntry
	nil,                             // 68: mir.command.AnnoStats.ClassIdsObjCntEntry
}
var file_mir_command_proto_depIdxs = []int32{
	44, // 0: mir.command.MirMetadatas.attributes:type_name -> mir.command.MirMetadatas.AttributesEntry
	15, // 1: mir.command.MetadataAttributes.timestamp:type_name -> mir.command.Timestamp
	0,  // 2: mir.command.MetadataAttributes.tvt_type:type_name -> mir.command.TvtType
	1,  // 3: mir.command.MetadataAttributes.asset_type:type_name -> mir.command.AssetType
	17, // 4: mir.command.MirAnnotations.ground_truth:type_name -> mir.command.SingleTaskAnnotations
	17, // 5: mir.command.MirAnnotations.prediction:type_name -> mir.command.SingleTaskAnnotations
	45, // 6: mir.command.MirAnnotations.image_cks:type_name -> mir.command.MirAnnotations.ImageCksEntry
	46, // 7: mir.command.SingleTaskAnnotations.image_annotations:type_name -> mir.command.SingleTaskAnnotations.ImageAnnotationsEntry
	8,  // 8: mir.command.SingleTaskAnnotations.type:type_name -> mir.command.ObjectType
	30, // 9: mir.command.SingleTaskAnnotations.model:type_name -> mir.command.ModelMeta
	20, // 10: mir.command.SingleImageAnnotations.boxes:type_name -> mir.command.ObjectAnnotation
	47, // 11: mir.command.SingleImageCks.cks:type_name -> mir.command.SingleImageCks.CksEntry
	21, // 12: mir.command.ObjectAnnotation.box:type_name -> mir.command.Rect
	48, // 13: mir.command.ObjectAnnotation.tags:type_name -> mir.command.ObjectAnnotation.TagsEntry
	11, // 14: mir.command.ObjectAnnotation.cm:type_name -> mir.command.ConfusionMatrixType
	38, // 15: mir.command.ObjectAnnotation.polygon:type_name -> mir.command.IntPoint
	9,  // 16: mir.command.ObjectAnnotation.type:type_name -> mir.command.ObjectSubType
	23, // 17: mir.command.MirKeywords.pred_idx:type_name -> mir.command.CiTagToIndex
	23, // 18: mir.command.MirKeywords.gt_idx:type_name -> mir.command.CiTagToIndex
	49, // 19: mir.command.MirKeywords.ck_idx:type_name -> mir.command.MirKeywords.CkIdxEntry
	50, // 20: mir.command.CiTagToIndex.cis:type_name -> mir.command.CiTagToIndex.CisEntry
	51, // 21: mir.command.CiTagToIndex.tags:type_name -> mir.command.CiTagToIndex.TagsEntry
	52, // 22: mir.command.MapStringToInt32List.key_ids:type_name -> mir.command.MapStringToInt32List.KeyIdsEntry
	53, // 23: mir.command.AssetAnnoIndex.asset_annos:type_name -> mir.command.AssetAnnoIndex.AssetAnnosEntry
	54, // 24: mir.command.AssetAnnoIndex.sub_indexes:type_name -> mir.command.AssetAnnoIndex.SubIndexesEntry
	55, // 25: mir.command.MirTasks.tasks:type_name -> mir.command.MirTasks.TasksEntry
	3,  // 26: mir.command.Task.type:type_name -> mir.command.TaskType
	30, // 27: mir.command.Task.model:type_name -> mir.command.ModelMeta
	32, // 28: mir.command.Task.evaluation:type_name -> mir.command.Evaluation
	56, // 29: mir.command.Task.new_types:type_name -> mir.command.Task.NewTypesEntry
	57, // 30: mir.command.ModelMeta.stages:type_name -> mir.command.ModelMeta.StagesEntry
	33, // 31: mir.command.ModelMeta.evaluate_config:type_name -> mir.command.EvaluateConfig
	37, // 32: mir.command.ModelStage.ci_averaged_evaluation:type_name -> mir.command.SingleEvaluationElement
	33, // 33: mir.command.Evaluation.config:type_name -> mir.command.EvaluateConfig
	34, // 34: mir.command.Evaluation.dataset_evaluation:type_name -> mir.command.SingleDatasetEvaluation
	34, // 35: mir.command.Evaluation.main_ck:type_name -> mir.command.SingleDatasetEvaluation
	58, // 36: mir.command.Evaluation.sub_cks:type_name -> mir.command.Evaluation.SubCksEntry
	12, // 37: mir.command.Evaluation.state:type_name -> mir.command.EvaluationState
	8,  // 38: mir.command.EvaluateConfig.type:type_name -> mir.command.ObjectType
	59, // 39: mir.command.SingleDatasetEvaluation.iou_evaluations:type_name -> mir.command.SingleDatasetEvaluation.IouEvaluationsEntry
	36, // 40: mir.command.SingleDatasetEvaluation.iou_averaged_evaluation:type_name -> mir.command.SingleIouEvaluation
	35, // 41: mir.command.SingleDatasetEvaluation.segmentation_metrics:type_name -> mir.command.SegmentationMetrics
	60, // 42: mir.command.SegmentationMetrics.Acc:type_name -> mir.command.SegmentationMetrics.AccEntry
	61, // 43: mir.command.SegmentationMetrics.IoU:type_name -> mir.command.SegmentationMetrics.IoUEntry
	62, // 44: mir.command.SingleIouEvaluation.ci_evaluations:type_name -> mir.command.SingleIouEvaluation.CiEvaluationsEntry
	37, // 45: mir.command.SingleIouEvaluation.ci_averaged_evaluation:type_name -> mir.command.SingleEvaluationElement
	39, // 46: mir.command.SingleEvaluationElement.pr_curve:type_name -> mir.command.FloatPoint
	63, // 47: mir.command.MirContext.cks_cnt:type_name -> mir.command.MirContext.CksCntEntry
	42, // 48: mir.command.MirContext.pred_stats:type_name -> mir.command.AnnoStats
	42, // 49: mir.command.MirContext.gt_stats:type_name -> mir.command.AnnoStats
	64, // 50: mir.command.SingleMapCount.sub_cnt:type_name -> mir.command.SingleMapCount.SubCntEntry
	65, // 51: mir.command.AnnoStats.tags_cnt:type_name -> mir.command.AnnoStats.TagsCntEntry
	66, // 52: mir.command.AnnoStats.class_ids_cnt:type_name -> mir.command.AnnoStats.ClassIdsCntEntry
	67, // 53: mir.command.AnnoStats.class_ids_mask_area:type_name -> mir.command.AnnoStats.ClassIdsMaskAreaEntry
	68, // 54: mir.command.AnnoStats.class_ids_obj_cnt:type_name -> mir.command.AnnoStats.ClassIdsObjCntEntry
	7,  // 55: mir.command.ExportConfig.asset_format:type_name -> mir.command.AssetFormat
	10, // 56: mir.command.ExportConfig.anno_format:type_name -> mir.command.ExportFormat
	14, // 57: mir.command.MirMetadatas.AttributesEntry.value:type_name -> mir.command.MetadataAttributes
	19, // 58: mir.command.MirAnnotations.ImageCksEntry.value:type_name -> mir.command.SingleImageCks
	18, // 59: mir.command.SingleTaskAnnotations.ImageAnnotationsEntry.value:type_name -> mir.command.SingleImageAnnotations
	27, // 60: mir.command.MirKeywords.CkIdxEntry.value:type_name -> mir.command.AssetAnnoIndex
	25, // 61: mir.command.CiTagToIndex.CisEntry.value:type_name -> mir.command.MapStringToInt32List
	27, // 62: mir.command.CiTagToIndex.TagsEntry.value:type_name -> mir.command.AssetAnnoIndex
	26, // 63: mir.command.MapStringToInt32List.KeyIdsEntry.value:type_name -> mir.command.Int32List
	26, // 64: mir.command.AssetAnnoIndex.AssetAnnosEntry.value:type_name -> mir.command.Int32List
	25, // 65: mir.command.AssetAnnoIndex.SubIndexesEntry.value:type_name -> mir.command.MapStringToInt32List
	29, // 66: mir.command.MirTasks.TasksEntry.value:type_name -> mir.command.Task
	31, // 67: mir.command.ModelMeta.StagesEntry.value:type_name -> mir.command.ModelStage
	34, // 68: mir.command.Evaluation.SubCksEntry.value:type_name -> mir.command.SingleDatasetEvaluation
	36, // 69: mir.command.SingleDatasetEvaluation.IouEvaluationsEntry.value:type_name -> mir.command.SingleIouEvaluation
	37, // 70: mir.command.SingleIouEvaluation.CiEvaluationsEntry.value:type_name -> mir.command.SingleEvaluationElement
	41, // 71: mir.command.MirContext.CksCntEntry.value:type_name -> mir.command.SingleMapCount
	41, // 72: mir.command.AnnoStats.TagsCntEntry.value:type_name -> mir.command.SingleMapCount
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_mir_command_proto_init() }
func file_mir_command_proto_init() {
	if File_mir_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mir_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleImageAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleImageCks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirKeywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiTagToIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringToInt32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAnnoIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleIouEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEvaluationElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleMapCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnoStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mir_command_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mir_command_proto_goTypes,
		DependencyIndexes: file_mir_command_proto_depIdxs,
		EnumInfos:         file_mir_command_proto_enumTypes,
		MessageInfos:      file_mir_command_proto_msgTypes,
	}.Build()
	File_mir_command_proto = out.File
	file_mir_command_proto_rawDesc = nil
	file_mir_command_proto_goTypes = nil
	file_mir_command_proto_depIdxs = nil
}
