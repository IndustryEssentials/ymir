// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: backend.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MergeStrategy int32

const (
	MergeStrategy_STOP  MergeStrategy = 0
	MergeStrategy_HOST  MergeStrategy = 1
	MergeStrategy_GUEST MergeStrategy = 2
)

// Enum value maps for MergeStrategy.
var (
	MergeStrategy_name = map[int32]string{
		0: "STOP",
		1: "HOST",
		2: "GUEST",
	}
	MergeStrategy_value = map[string]int32{
		"STOP":  0,
		"HOST":  1,
		"GUEST": 2,
	}
)

func (x MergeStrategy) Enum() *MergeStrategy {
	p := new(MergeStrategy)
	*p = x
	return p
}

func (x MergeStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[0].Descriptor()
}

func (MergeStrategy) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[0]
}

func (x MergeStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MergeStrategy.Descriptor instead.
func (MergeStrategy) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{0}
}

type UnknownTypesStrategy int32

const (
	UnknownTypesStrategy_UTS_STOP   UnknownTypesStrategy = 0
	UnknownTypesStrategy_UTS_IGNORE UnknownTypesStrategy = 1
	UnknownTypesStrategy_UTS_ADD    UnknownTypesStrategy = 2
)

// Enum value maps for UnknownTypesStrategy.
var (
	UnknownTypesStrategy_name = map[int32]string{
		0: "UTS_STOP",
		1: "UTS_IGNORE",
		2: "UTS_ADD",
	}
	UnknownTypesStrategy_value = map[string]int32{
		"UTS_STOP":   0,
		"UTS_IGNORE": 1,
		"UTS_ADD":    2,
	}
)

func (x UnknownTypesStrategy) Enum() *UnknownTypesStrategy {
	p := new(UnknownTypesStrategy)
	*p = x
	return p
}

func (x UnknownTypesStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnknownTypesStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[1].Descriptor()
}

func (UnknownTypesStrategy) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[1]
}

func (x UnknownTypesStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnknownTypesStrategy.Descriptor instead.
func (UnknownTypesStrategy) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{1}
}

type RequestType int32

const (
	RequestType_UNKNOWN RequestType = 0
	// CMD task
	RequestType_CMD_BRANCH_DEL      RequestType = 1
	RequestType_CMD_BRANCH_LIST     RequestType = 2
	RequestType_CMD_BRANCH_CHECKOUT RequestType = 3
	RequestType_CMD_BRANCH_CREATE   RequestType = 4
	RequestType_CMD_CLONE           RequestType = 5
	RequestType_CMD_COMMIT          RequestType = 6
	RequestType_CMD_FILTER          RequestType = 7
	RequestType_CMD_INIT            RequestType = 8
	RequestType_CMD_LOG             RequestType = 9
	RequestType_CMD_MERGE           RequestType = 10
	RequestType_CMD_INFERENCE       RequestType = 11
	RequestType_CMD_LABEL_ADD       RequestType = 12
	RequestType_CMD_LABEL_GET       RequestType = 13
	RequestType_CMD_TERMINATE       RequestType = 14
	RequestType_CMD_PULL_IMAGE      RequestType = 16
	RequestType_CMD_GPU_INFO_GET    RequestType = 17
	RequestType_CMD_SAMPLING        RequestType = 18
	RequestType_CMD_EVALUATE        RequestType = 19
	RequestType_CMD_REPO_CHECK      RequestType = 20
	RequestType_CMD_REPO_CLEAR      RequestType = 21
	RequestType_CMD_VERSIONS_GET    RequestType = 22
	// Sandbox path operation
	RequestType_USER_LIST   RequestType = 101
	RequestType_USER_CREATE RequestType = 102
	RequestType_USER_REMOVE RequestType = 103
	RequestType_REPO_LIST   RequestType = 104
	RequestType_REPO_CREATE RequestType = 105
	RequestType_REPO_REMOVE RequestType = 106
	// Long task
	RequestType_TASK_CREATE RequestType = 1001
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0:    "UNKNOWN",
		1:    "CMD_BRANCH_DEL",
		2:    "CMD_BRANCH_LIST",
		3:    "CMD_BRANCH_CHECKOUT",
		4:    "CMD_BRANCH_CREATE",
		5:    "CMD_CLONE",
		6:    "CMD_COMMIT",
		7:    "CMD_FILTER",
		8:    "CMD_INIT",
		9:    "CMD_LOG",
		10:   "CMD_MERGE",
		11:   "CMD_INFERENCE",
		12:   "CMD_LABEL_ADD",
		13:   "CMD_LABEL_GET",
		14:   "CMD_TERMINATE",
		16:   "CMD_PULL_IMAGE",
		17:   "CMD_GPU_INFO_GET",
		18:   "CMD_SAMPLING",
		19:   "CMD_EVALUATE",
		20:   "CMD_REPO_CHECK",
		21:   "CMD_REPO_CLEAR",
		22:   "CMD_VERSIONS_GET",
		101:  "USER_LIST",
		102:  "USER_CREATE",
		103:  "USER_REMOVE",
		104:  "REPO_LIST",
		105:  "REPO_CREATE",
		106:  "REPO_REMOVE",
		1001: "TASK_CREATE",
	}
	RequestType_value = map[string]int32{
		"UNKNOWN":             0,
		"CMD_BRANCH_DEL":      1,
		"CMD_BRANCH_LIST":     2,
		"CMD_BRANCH_CHECKOUT": 3,
		"CMD_BRANCH_CREATE":   4,
		"CMD_CLONE":           5,
		"CMD_COMMIT":          6,
		"CMD_FILTER":          7,
		"CMD_INIT":            8,
		"CMD_LOG":             9,
		"CMD_MERGE":           10,
		"CMD_INFERENCE":       11,
		"CMD_LABEL_ADD":       12,
		"CMD_LABEL_GET":       13,
		"CMD_TERMINATE":       14,
		"CMD_PULL_IMAGE":      16,
		"CMD_GPU_INFO_GET":    17,
		"CMD_SAMPLING":        18,
		"CMD_EVALUATE":        19,
		"CMD_REPO_CHECK":      20,
		"CMD_REPO_CLEAR":      21,
		"CMD_VERSIONS_GET":    22,
		"USER_LIST":           101,
		"USER_CREATE":         102,
		"USER_REMOVE":         103,
		"REPO_LIST":           104,
		"REPO_CREATE":         105,
		"REPO_REMOVE":         106,
		"TASK_CREATE":         1001,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[2].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[2]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{2}
}

type AnnotationType int32

const (
	AnnotationType_NOT_SET AnnotationType = 0
	AnnotationType_GT      AnnotationType = 1
	AnnotationType_PRED    AnnotationType = 2
)

// Enum value maps for AnnotationType.
var (
	AnnotationType_name = map[int32]string{
		0: "NOT_SET",
		1: "GT",
		2: "PRED",
	}
	AnnotationType_value = map[string]int32{
		"NOT_SET": 0,
		"GT":      1,
		"PRED":    2,
	}
)

func (x AnnotationType) Enum() *AnnotationType {
	p := new(AnnotationType)
	*p = x
	return p
}

func (x AnnotationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[3].Descriptor()
}

func (AnnotationType) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[3]
}

func (x AnnotationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationType.Descriptor instead.
func (AnnotationType) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{3}
}

// Hel Ops Process
type HelOpsType int32

const (
	HelOpsType_HEL_OPS_UNKNOWN HelOpsType = 0
	// Require: singleton_op.
	HelOpsType_HEL_OPS_TERMINATE HelOpsType = 1
	// Require: No.
	HelOpsType_HEL_OPS_GET_GPU HelOpsType = 2
)

// Enum value maps for HelOpsType.
var (
	HelOpsType_name = map[int32]string{
		0: "HEL_OPS_UNKNOWN",
		1: "HEL_OPS_TERMINATE",
		2: "HEL_OPS_GET_GPU",
	}
	HelOpsType_value = map[string]int32{
		"HEL_OPS_UNKNOWN":   0,
		"HEL_OPS_TERMINATE": 1,
		"HEL_OPS_GET_GPU":   2,
	}
)

func (x HelOpsType) Enum() *HelOpsType {
	p := new(HelOpsType)
	*p = x
	return p
}

func (x HelOpsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HelOpsType) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[4].Descriptor()
}

func (HelOpsType) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[4]
}

func (x HelOpsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HelOpsType.Descriptor instead.
func (HelOpsType) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{4}
}

type GeneralReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RepoId  string      `protobuf:"bytes,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	ReqType RequestType `protobuf:"varint,3,opt,name=req_type,json=reqType,proto3,enum=ymir.backend.RequestType" json:"req_type,omitempty"`
	TaskId  string      `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// singleton ops arg, such as checkout rev, create branch, etc.
	SingletonOp string `protobuf:"bytes,5,opt,name=singleton_op,json=singletonOp,proto3" json:"singleton_op,omitempty"`
	// ancestor task id that initiates this task from.
	HisTaskId string `protobuf:"bytes,6,opt,name=his_task_id,json=hisTaskId,proto3" json:"his_task_id,omitempty"`
	// dest branch id to store current task result.
	DstDatasetId string `protobuf:"bytes,7,opt,name=dst_dataset_id,json=dstDatasetId,proto3" json:"dst_dataset_id,omitempty"`
	// branches you want to concat the data from
	InDatasetIds []string `protobuf:"bytes,8,rep,name=in_dataset_ids,json=inDatasetIds,proto3" json:"in_dataset_ids,omitempty"`
	// branches you want to exclude the data from
	ExDatasetIds []string `protobuf:"bytes,9,rep,name=ex_dataset_ids,json=exDatasetIds,proto3" json:"ex_dataset_ids,omitempty"`
	// keyid should be included, joint with OR
	InClassIds []int32 `protobuf:"varint,10,rep,packed,name=in_class_ids,json=inClassIds,proto3" json:"in_class_ids,omitempty"`
	// keyid that expected to be exclude, joint with OR
	ExClassIds         []int32       `protobuf:"varint,11,rep,packed,name=ex_class_ids,json=exClassIds,proto3" json:"ex_class_ids,omitempty"`
	Force              bool          `protobuf:"varint,12,opt,name=force,proto3" json:"force,omitempty"`
	CommitMessage      string        `protobuf:"bytes,13,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	ModelHash          string        `protobuf:"bytes,14,opt,name=model_hash,json=modelHash,proto3" json:"model_hash,omitempty"`
	AssetDir           string        `protobuf:"bytes,15,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	DockerImageConfig  string        `protobuf:"bytes,16,opt,name=docker_image_config,json=dockerImageConfig,proto3" json:"docker_image_config,omitempty"`
	CheckOnly          bool          `protobuf:"varint,18,opt,name=check_only,json=checkOnly,proto3" json:"check_only,omitempty"`
	ExecutantName      string        `protobuf:"bytes,19,opt,name=executant_name,json=executantName,proto3" json:"executant_name,omitempty"`
	MergeStrategy      MergeStrategy `protobuf:"varint,20,opt,name=merge_strategy,json=mergeStrategy,proto3,enum=ymir.backend.MergeStrategy" json:"merge_strategy,omitempty"`
	TerminatedTaskType TaskType      `protobuf:"varint,21,opt,name=terminated_task_type,json=terminatedTaskType,proto3,enum=mir.command.TaskType" json:"terminated_task_type,omitempty"`
	// Types that are assignable to Sampling:
	//	*GeneralReq_SamplingCount
	//	*GeneralReq_SamplingRate
	Sampling        isGeneralReq_Sampling `protobuf_oneof:"sampling"`
	TaskParameters  string                `protobuf:"bytes,24,opt,name=task_parameters,json=taskParameters,proto3" json:"task_parameters,omitempty"`
	LabelCollection *LabelCollection      `protobuf:"bytes,25,opt,name=label_collection,json=labelCollection,proto3" json:"label_collection,omitempty"`
	EvaluateConfig  *EvaluateConfig       `protobuf:"bytes,26,opt,name=evaluate_config,json=evaluateConfig,proto3" json:"evaluate_config,omitempty"`
	ModelStage      string                `protobuf:"bytes,27,opt,name=model_stage,json=modelStage,proto3" json:"model_stage,omitempty"`
	ReqCreateTask   *ReqCreateTask        `protobuf:"bytes,1001,opt,name=req_create_task,json=reqCreateTask,proto3" json:"req_create_task,omitempty"`
}

func (x *GeneralReq) Reset() {
	*x = GeneralReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReq) ProtoMessage() {}

func (x *GeneralReq) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReq.ProtoReflect.Descriptor instead.
func (*GeneralReq) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{0}
}

func (x *GeneralReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GeneralReq) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *GeneralReq) GetReqType() RequestType {
	if x != nil {
		return x.ReqType
	}
	return RequestType_UNKNOWN
}

func (x *GeneralReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GeneralReq) GetSingletonOp() string {
	if x != nil {
		return x.SingletonOp
	}
	return ""
}

func (x *GeneralReq) GetHisTaskId() string {
	if x != nil {
		return x.HisTaskId
	}
	return ""
}

func (x *GeneralReq) GetDstDatasetId() string {
	if x != nil {
		return x.DstDatasetId
	}
	return ""
}

func (x *GeneralReq) GetInDatasetIds() []string {
	if x != nil {
		return x.InDatasetIds
	}
	return nil
}

func (x *GeneralReq) GetExDatasetIds() []string {
	if x != nil {
		return x.ExDatasetIds
	}
	return nil
}

func (x *GeneralReq) GetInClassIds() []int32 {
	if x != nil {
		return x.InClassIds
	}
	return nil
}

func (x *GeneralReq) GetExClassIds() []int32 {
	if x != nil {
		return x.ExClassIds
	}
	return nil
}

func (x *GeneralReq) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *GeneralReq) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *GeneralReq) GetModelHash() string {
	if x != nil {
		return x.ModelHash
	}
	return ""
}

func (x *GeneralReq) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *GeneralReq) GetDockerImageConfig() string {
	if x != nil {
		return x.DockerImageConfig
	}
	return ""
}

func (x *GeneralReq) GetCheckOnly() bool {
	if x != nil {
		return x.CheckOnly
	}
	return false
}

func (x *GeneralReq) GetExecutantName() string {
	if x != nil {
		return x.ExecutantName
	}
	return ""
}

func (x *GeneralReq) GetMergeStrategy() MergeStrategy {
	if x != nil {
		return x.MergeStrategy
	}
	return MergeStrategy_STOP
}

func (x *GeneralReq) GetTerminatedTaskType() TaskType {
	if x != nil {
		return x.TerminatedTaskType
	}
	return TaskType_TaskTypeUnknown
}

func (m *GeneralReq) GetSampling() isGeneralReq_Sampling {
	if m != nil {
		return m.Sampling
	}
	return nil
}

func (x *GeneralReq) GetSamplingCount() int32 {
	if x, ok := x.GetSampling().(*GeneralReq_SamplingCount); ok {
		return x.SamplingCount
	}
	return 0
}

func (x *GeneralReq) GetSamplingRate() float32 {
	if x, ok := x.GetSampling().(*GeneralReq_SamplingRate); ok {
		return x.SamplingRate
	}
	return 0
}

func (x *GeneralReq) GetTaskParameters() string {
	if x != nil {
		return x.TaskParameters
	}
	return ""
}

func (x *GeneralReq) GetLabelCollection() *LabelCollection {
	if x != nil {
		return x.LabelCollection
	}
	return nil
}

func (x *GeneralReq) GetEvaluateConfig() *EvaluateConfig {
	if x != nil {
		return x.EvaluateConfig
	}
	return nil
}

func (x *GeneralReq) GetModelStage() string {
	if x != nil {
		return x.ModelStage
	}
	return ""
}

func (x *GeneralReq) GetReqCreateTask() *ReqCreateTask {
	if x != nil {
		return x.ReqCreateTask
	}
	return nil
}

type isGeneralReq_Sampling interface {
	isGeneralReq_Sampling()
}

type GeneralReq_SamplingCount struct {
	SamplingCount int32 `protobuf:"varint,22,opt,name=sampling_count,json=samplingCount,proto3,oneof"`
}

type GeneralReq_SamplingRate struct {
	SamplingRate float32 `protobuf:"fixed32,23,opt,name=sampling_rate,json=samplingRate,proto3,oneof"`
}

func (*GeneralReq_SamplingCount) isGeneralReq_Sampling() {}

func (*GeneralReq_SamplingRate) isGeneralReq_Sampling() {}

type GeneralResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code               int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ReqTaskId          string            `protobuf:"bytes,2,opt,name=req_task_id,json=reqTaskId,proto3" json:"req_task_id,omitempty"`
	Message            string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ExtStrs            []string          `protobuf:"bytes,4,rep,name=ext_strs,json=extStrs,proto3" json:"ext_strs,omitempty"`
	HashId             string            `protobuf:"bytes,6,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	DockerImageConfig  map[int32]string  `protobuf:"bytes,7,rep,name=docker_image_config,json=dockerImageConfig,proto3" json:"docker_image_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AvailableGpuCounts int32             `protobuf:"varint,8,opt,name=available_gpu_counts,json=availableGpuCounts,proto3" json:"available_gpu_counts,omitempty"`
	LabelCollection    *LabelCollection  `protobuf:"bytes,9,opt,name=label_collection,json=labelCollection,proto3" json:"label_collection,omitempty"`
	OpsRet             bool              `protobuf:"varint,10,opt,name=ops_ret,json=opsRet,proto3" json:"ops_ret,omitempty"`
	SandboxVersions    []string          `protobuf:"bytes,11,rep,name=sandbox_versions,json=sandboxVersions,proto3" json:"sandbox_versions,omitempty"`
	Objects            *RespCMDInference `protobuf:"bytes,1000,opt,name=objects,proto3" json:"objects,omitempty"`
	EnableLivecode     bool              `protobuf:"varint,1001,opt,name=enable_livecode,json=enableLivecode,proto3" json:"enable_livecode,omitempty"`
	Evaluation         *Evaluation       `protobuf:"bytes,1002,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	ObjectType         ObjectType        `protobuf:"varint,1003,opt,name=object_type,json=objectType,proto3,enum=mir.command.ObjectType" json:"object_type,omitempty"`
}

func (x *GeneralResp) Reset() {
	*x = GeneralResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResp) ProtoMessage() {}

func (x *GeneralResp) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResp.ProtoReflect.Descriptor instead.
func (*GeneralResp) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralResp) GetReqTaskId() string {
	if x != nil {
		return x.ReqTaskId
	}
	return ""
}

func (x *GeneralResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GeneralResp) GetExtStrs() []string {
	if x != nil {
		return x.ExtStrs
	}
	return nil
}

func (x *GeneralResp) GetHashId() string {
	if x != nil {
		return x.HashId
	}
	return ""
}

func (x *GeneralResp) GetDockerImageConfig() map[int32]string {
	if x != nil {
		return x.DockerImageConfig
	}
	return nil
}

func (x *GeneralResp) GetAvailableGpuCounts() int32 {
	if x != nil {
		return x.AvailableGpuCounts
	}
	return 0
}

func (x *GeneralResp) GetLabelCollection() *LabelCollection {
	if x != nil {
		return x.LabelCollection
	}
	return nil
}

func (x *GeneralResp) GetOpsRet() bool {
	if x != nil {
		return x.OpsRet
	}
	return false
}

func (x *GeneralResp) GetSandboxVersions() []string {
	if x != nil {
		return x.SandboxVersions
	}
	return nil
}

func (x *GeneralResp) GetObjects() *RespCMDInference {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *GeneralResp) GetEnableLivecode() bool {
	if x != nil {
		return x.EnableLivecode
	}
	return false
}

func (x *GeneralResp) GetEvaluation() *Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *GeneralResp) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OT_UNKNOWN
}

// base args for create task request
type ReqCreateTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task type
	TaskType      TaskType              `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=mir.command.TaskType" json:"task_type,omitempty"`
	NoTaskMonitor bool                  `protobuf:"varint,2,opt,name=no_task_monitor,json=noTaskMonitor,proto3" json:"no_task_monitor,omitempty"`
	Training      *TaskReqTraining      `protobuf:"bytes,101,opt,name=training,proto3" json:"training,omitempty"`
	Mining        *TaskReqMining        `protobuf:"bytes,102,opt,name=mining,proto3" json:"mining,omitempty"`
	ImportDataset *TaskReqImportDataset `protobuf:"bytes,103,opt,name=import_dataset,json=importDataset,proto3" json:"import_dataset,omitempty"`
	Exporting     *TaskReqExporting     `protobuf:"bytes,104,opt,name=exporting,proto3" json:"exporting,omitempty"`
	Copy          *TaskReqCopyData      `protobuf:"bytes,105,opt,name=copy,proto3" json:"copy,omitempty"`
	Labeling      *TaskReqLabeling      `protobuf:"bytes,106,opt,name=labeling,proto3" json:"labeling,omitempty"`
	ImportModel   *TaskReqImportModel   `protobuf:"bytes,107,opt,name=import_model,json=importModel,proto3" json:"import_model,omitempty"`
}

func (x *ReqCreateTask) Reset() {
	*x = ReqCreateTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqCreateTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqCreateTask) ProtoMessage() {}

func (x *ReqCreateTask) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqCreateTask.ProtoReflect.Descriptor instead.
func (*ReqCreateTask) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{2}
}

func (x *ReqCreateTask) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TaskTypeUnknown
}

func (x *ReqCreateTask) GetNoTaskMonitor() bool {
	if x != nil {
		return x.NoTaskMonitor
	}
	return false
}

func (x *ReqCreateTask) GetTraining() *TaskReqTraining {
	if x != nil {
		return x.Training
	}
	return nil
}

func (x *ReqCreateTask) GetMining() *TaskReqMining {
	if x != nil {
		return x.Mining
	}
	return nil
}

func (x *ReqCreateTask) GetImportDataset() *TaskReqImportDataset {
	if x != nil {
		return x.ImportDataset
	}
	return nil
}

func (x *ReqCreateTask) GetExporting() *TaskReqExporting {
	if x != nil {
		return x.Exporting
	}
	return nil
}

func (x *ReqCreateTask) GetCopy() *TaskReqCopyData {
	if x != nil {
		return x.Copy
	}
	return nil
}

func (x *ReqCreateTask) GetLabeling() *TaskReqLabeling {
	if x != nil {
		return x.Labeling
	}
	return nil
}

func (x *ReqCreateTask) GetImportModel() *TaskReqImportModel {
	if x != nil {
		return x.ImportModel
	}
	return nil
}

type TrainingDatasetType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId   string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	DatasetType TvtType `protobuf:"varint,2,opt,name=dataset_type,json=datasetType,proto3,enum=mir.command.TvtType" json:"dataset_type,omitempty"`
}

func (x *TrainingDatasetType) Reset() {
	*x = TrainingDatasetType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingDatasetType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingDatasetType) ProtoMessage() {}

func (x *TrainingDatasetType) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingDatasetType.ProtoReflect.Descriptor instead.
func (*TrainingDatasetType) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{3}
}

func (x *TrainingDatasetType) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *TrainingDatasetType) GetDatasetType() TvtType {
	if x != nil {
		return x.DatasetType
	}
	return TvtType_TvtTypeUnknown
}

type TaskReqTraining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDatasetTypes   []*TrainingDatasetType `protobuf:"bytes,1,rep,name=in_dataset_types,json=inDatasetTypes,proto3" json:"in_dataset_types,omitempty"`
	PreprocessConfig string                 `protobuf:"bytes,2,opt,name=preprocess_config,json=preprocessConfig,proto3" json:"preprocess_config,omitempty"`
}

func (x *TaskReqTraining) Reset() {
	*x = TaskReqTraining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqTraining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqTraining) ProtoMessage() {}

func (x *TaskReqTraining) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqTraining.ProtoReflect.Descriptor instead.
func (*TaskReqTraining) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{4}
}

func (x *TaskReqTraining) GetInDatasetTypes() []*TrainingDatasetType {
	if x != nil {
		return x.InDatasetTypes
	}
	return nil
}

func (x *TaskReqTraining) GetPreprocessConfig() string {
	if x != nil {
		return x.PreprocessConfig
	}
	return ""
}

type TaskReqMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopK                int32 `protobuf:"varint,1,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"` // > 0, will keep all if set to 0.
	GenerateAnnotations bool  `protobuf:"varint,2,opt,name=generate_annotations,json=generateAnnotations,proto3" json:"generate_annotations,omitempty"`
}

func (x *TaskReqMining) Reset() {
	*x = TaskReqMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqMining) ProtoMessage() {}

func (x *TaskReqMining) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqMining.ProtoReflect.Descriptor instead.
func (*TaskReqMining) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{5}
}

func (x *TaskReqMining) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *TaskReqMining) GetGenerateAnnotations() bool {
	if x != nil {
		return x.GenerateAnnotations
	}
	return false
}

type TaskReqImportDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// store media files
	AssetDir string `protobuf:"bytes,1,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	// pred and gt file dir
	//  for voc: single pascal xml per asset, same base_filename as in asset-folder
	//  for coco: coco-annotations.json in that dir
	PredDir string `protobuf:"bytes,2,opt,name=pred_dir,json=predDir,proto3" json:"pred_dir,omitempty"`
	GtDir   string `protobuf:"bytes,3,opt,name=gt_dir,json=gtDir,proto3" json:"gt_dir,omitempty"`
	// strategy for unknown class types: stop, ignore or add
	UnknownTypesStrategy   UnknownTypesStrategy `protobuf:"varint,4,opt,name=unknown_types_strategy,json=unknownTypesStrategy,proto3,enum=ymir.backend.UnknownTypesStrategy" json:"unknown_types_strategy,omitempty"`
	CleanDirs              bool                 `protobuf:"varint,5,opt,name=clean_dirs,json=cleanDirs,proto3" json:"clean_dirs,omitempty"`
	AnnoType               ObjectType           `protobuf:"varint,6,opt,name=anno_type,json=annoType,proto3,enum=mir.command.ObjectType" json:"anno_type,omitempty"`
	IsInstanceSegmentation bool                 `protobuf:"varint,7,opt,name=is_instance_segmentation,json=isInstanceSegmentation,proto3" json:"is_instance_segmentation,omitempty"`
}

func (x *TaskReqImportDataset) Reset() {
	*x = TaskReqImportDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqImportDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqImportDataset) ProtoMessage() {}

func (x *TaskReqImportDataset) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqImportDataset.ProtoReflect.Descriptor instead.
func (*TaskReqImportDataset) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{6}
}

func (x *TaskReqImportDataset) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *TaskReqImportDataset) GetPredDir() string {
	if x != nil {
		return x.PredDir
	}
	return ""
}

func (x *TaskReqImportDataset) GetGtDir() string {
	if x != nil {
		return x.GtDir
	}
	return ""
}

func (x *TaskReqImportDataset) GetUnknownTypesStrategy() UnknownTypesStrategy {
	if x != nil {
		return x.UnknownTypesStrategy
	}
	return UnknownTypesStrategy_UTS_STOP
}

func (x *TaskReqImportDataset) GetCleanDirs() bool {
	if x != nil {
		return x.CleanDirs
	}
	return false
}

func (x *TaskReqImportDataset) GetAnnoType() ObjectType {
	if x != nil {
		return x.AnnoType
	}
	return ObjectType_OT_UNKNOWN
}

func (x *TaskReqImportDataset) GetIsInstanceSegmentation() bool {
	if x != nil {
		return x.IsInstanceSegmentation
	}
	return false
}

type TaskReqExporting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string       `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Format    ExportFormat `protobuf:"varint,2,opt,name=format,proto3,enum=mir.command.ExportFormat" json:"format,omitempty"`
	AssetDir  string       `protobuf:"bytes,3,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	PredDir   string       `protobuf:"bytes,4,opt,name=pred_dir,json=predDir,proto3" json:"pred_dir,omitempty"`
	GtDir     string       `protobuf:"bytes,5,opt,name=gt_dir,json=gtDir,proto3" json:"gt_dir,omitempty"`
}

func (x *TaskReqExporting) Reset() {
	*x = TaskReqExporting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqExporting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqExporting) ProtoMessage() {}

func (x *TaskReqExporting) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqExporting.ProtoReflect.Descriptor instead.
func (*TaskReqExporting) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{7}
}

func (x *TaskReqExporting) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *TaskReqExporting) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_EF_NO_ANNOTATIONS
}

func (x *TaskReqExporting) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *TaskReqExporting) GetPredDir() string {
	if x != nil {
		return x.PredDir
	}
	return ""
}

func (x *TaskReqExporting) GetGtDir() string {
	if x != nil {
		return x.GtDir
	}
	return ""
}

type TaskReqCopyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcUserId          string `protobuf:"bytes,1,opt,name=src_user_id,json=srcUserId,proto3" json:"src_user_id,omitempty"`
	SrcRepoId          string `protobuf:"bytes,2,opt,name=src_repo_id,json=srcRepoId,proto3" json:"src_repo_id,omitempty"`
	NameStrategyIgnore bool   `protobuf:"varint,3,opt,name=name_strategy_ignore,json=nameStrategyIgnore,proto3" json:"name_strategy_ignore,omitempty"`
	DropAnnotations    bool   `protobuf:"varint,4,opt,name=drop_annotations,json=dropAnnotations,proto3" json:"drop_annotations,omitempty"`
}

func (x *TaskReqCopyData) Reset() {
	*x = TaskReqCopyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqCopyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqCopyData) ProtoMessage() {}

func (x *TaskReqCopyData) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqCopyData.ProtoReflect.Descriptor instead.
func (*TaskReqCopyData) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{8}
}

func (x *TaskReqCopyData) GetSrcUserId() string {
	if x != nil {
		return x.SrcUserId
	}
	return ""
}

func (x *TaskReqCopyData) GetSrcRepoId() string {
	if x != nil {
		return x.SrcRepoId
	}
	return ""
}

func (x *TaskReqCopyData) GetNameStrategyIgnore() bool {
	if x != nil {
		return x.NameStrategyIgnore
	}
	return false
}

func (x *TaskReqCopyData) GetDropAnnotations() bool {
	if x != nil {
		return x.DropAnnotations
	}
	return false
}

type TaskReqLabeling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelerAccounts      []string       `protobuf:"bytes,1,rep,name=labeler_accounts,json=labelerAccounts,proto3" json:"labeler_accounts,omitempty"`
	ExpertInstructionUrl string         `protobuf:"bytes,2,opt,name=expert_instruction_url,json=expertInstructionUrl,proto3" json:"expert_instruction_url,omitempty"`
	ProjectName          string         `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	ExportAnnotation     bool           `protobuf:"varint,4,opt,name=export_annotation,json=exportAnnotation,proto3" json:"export_annotation,omitempty"`
	AnnotationType       AnnotationType `protobuf:"varint,5,opt,name=annotation_type,json=annotationType,proto3,enum=ymir.backend.AnnotationType" json:"annotation_type,omitempty"`
}

func (x *TaskReqLabeling) Reset() {
	*x = TaskReqLabeling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqLabeling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqLabeling) ProtoMessage() {}

func (x *TaskReqLabeling) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqLabeling.ProtoReflect.Descriptor instead.
func (*TaskReqLabeling) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{9}
}

func (x *TaskReqLabeling) GetLabelerAccounts() []string {
	if x != nil {
		return x.LabelerAccounts
	}
	return nil
}

func (x *TaskReqLabeling) GetExpertInstructionUrl() string {
	if x != nil {
		return x.ExpertInstructionUrl
	}
	return ""
}

func (x *TaskReqLabeling) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *TaskReqLabeling) GetExportAnnotation() bool {
	if x != nil {
		return x.ExportAnnotation
	}
	return false
}

func (x *TaskReqLabeling) GetAnnotationType() AnnotationType {
	if x != nil {
		return x.AnnotationType
	}
	return AnnotationType_NOT_SET
}

type TaskReqImportModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelPackagePath string `protobuf:"bytes,1,opt,name=model_package_path,json=modelPackagePath,proto3" json:"model_package_path,omitempty"`
}

func (x *TaskReqImportModel) Reset() {
	*x = TaskReqImportModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReqImportModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReqImportModel) ProtoMessage() {}

func (x *TaskReqImportModel) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReqImportModel.ProtoReflect.Descriptor instead.
func (*TaskReqImportModel) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{10}
}

func (x *TaskReqImportModel) GetModelPackagePath() string {
	if x != nil {
		return x.ModelPackagePath
	}
	return ""
}

type RespCMDInference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// key: image id, value: annotations of that single image
	ImageAnnotations map[string]*SingleImageAnnotations `protobuf:"bytes,1,rep,name=image_annotations,json=imageAnnotations,proto3" json:"image_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RespCMDInference) Reset() {
	*x = RespCMDInference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespCMDInference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespCMDInference) ProtoMessage() {}

func (x *RespCMDInference) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespCMDInference.ProtoReflect.Descriptor instead.
func (*RespCMDInference) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{11}
}

func (x *RespCMDInference) GetImageAnnotations() map[string]*SingleImageAnnotations {
	if x != nil {
		return x.ImageAnnotations
	}
	return nil
}

type LabelCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels      []*Label `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	YmirVersion string   `protobuf:"bytes,2,opt,name=ymir_version,json=ymirVersion,proto3" json:"ymir_version,omitempty"`
}

func (x *LabelCollection) Reset() {
	*x = LabelCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelCollection) ProtoMessage() {}

func (x *LabelCollection) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelCollection.ProtoReflect.Descriptor instead.
func (*LabelCollection) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{12}
}

func (x *LabelCollection) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LabelCollection) GetYmirVersion() string {
	if x != nil {
		return x.YmirVersion
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Aliases    []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	CreateTime string   `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // RFC 3339 date strings
	UpdateTime string   `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // RFC 3339 date strings
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{13}
}

func (x *Label) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Label) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Label) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Label) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Label) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type HelOpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpsType HelOpsType `protobuf:"varint,1,opt,name=ops_type,json=opsType,proto3,enum=ymir.backend.HelOpsType" json:"ops_type,omitempty"`
	// singleton ops arg, such as target task id, etc.
	SingletonOp  string   `protobuf:"bytes,10,opt,name=singleton_op,json=singletonOp,proto3" json:"singleton_op,omitempty"`
	TermTaskType TaskType `protobuf:"varint,11,opt,name=term_task_type,json=termTaskType,proto3,enum=mir.command.TaskType" json:"term_task_type,omitempty"`
}

func (x *HelOpsRequest) Reset() {
	*x = HelOpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelOpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelOpsRequest) ProtoMessage() {}

func (x *HelOpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelOpsRequest.ProtoReflect.Descriptor instead.
func (*HelOpsRequest) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{14}
}

func (x *HelOpsRequest) GetOpsType() HelOpsType {
	if x != nil {
		return x.OpsType
	}
	return HelOpsType_HEL_OPS_UNKNOWN
}

func (x *HelOpsRequest) GetSingletonOp() string {
	if x != nil {
		return x.SingletonOp
	}
	return ""
}

func (x *HelOpsRequest) GetTermTaskType() TaskType {
	if x != nil {
		return x.TermTaskType
	}
	return TaskType_TaskTypeUnknown
}

type HelOpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	GpuInfo *HelGpuInfo    `protobuf:"bytes,10,opt,name=gpu_info,json=gpuInfo,proto3" json:"gpu_info,omitempty"`
	Request *HelOpsRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *HelOpsResponse) Reset() {
	*x = HelOpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelOpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelOpsResponse) ProtoMessage() {}

func (x *HelOpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelOpsResponse.ProtoReflect.Descriptor instead.
func (*HelOpsResponse) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{15}
}

func (x *HelOpsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HelOpsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HelOpsResponse) GetGpuInfo() *HelGpuInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

func (x *HelOpsResponse) GetRequest() *HelOpsRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type HelGpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuCountTotal    int32 `protobuf:"varint,1,opt,name=gpu_count_total,json=gpuCountTotal,proto3" json:"gpu_count_total,omitempty"`
	GpuCountBusy     int32 `protobuf:"varint,2,opt,name=gpu_count_busy,json=gpuCountBusy,proto3" json:"gpu_count_busy,omitempty"`
	GpuCountIdle     int32 `protobuf:"varint,3,opt,name=gpu_count_idle,json=gpuCountIdle,proto3" json:"gpu_count_idle,omitempty"`
	GpuCountReserved int32 `protobuf:"varint,4,opt,name=gpu_count_reserved,json=gpuCountReserved,proto3" json:"gpu_count_reserved,omitempty"`
}

func (x *HelGpuInfo) Reset() {
	*x = HelGpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelGpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelGpuInfo) ProtoMessage() {}

func (x *HelGpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelGpuInfo.ProtoReflect.Descriptor instead.
func (*HelGpuInfo) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{16}
}

func (x *HelGpuInfo) GetGpuCountTotal() int32 {
	if x != nil {
		return x.GpuCountTotal
	}
	return 0
}

func (x *HelGpuInfo) GetGpuCountBusy() int32 {
	if x != nil {
		return x.GpuCountBusy
	}
	return 0
}

func (x *HelGpuInfo) GetGpuCountIdle() int32 {
	if x != nil {
		return x.GpuCountIdle
	}
	return 0
}

func (x *HelGpuInfo) GetGpuCountReserved() int32 {
	if x != nil {
		return x.GpuCountReserved
	}
	return 0
}

// Hel Task Process
type HelTaskRequestCopyDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcUserId string `protobuf:"bytes,1,opt,name=src_user_id,json=srcUserId,proto3" json:"src_user_id,omitempty"`
	SrcRepoId string `protobuf:"bytes,2,opt,name=src_repo_id,json=srcRepoId,proto3" json:"src_repo_id,omitempty"`
	// Input: single dataset id
	InDatasetId        string `protobuf:"bytes,10,opt,name=in_dataset_id,json=inDatasetId,proto3" json:"in_dataset_id,omitempty"`
	NameStrategyIgnore bool   `protobuf:"varint,11,opt,name=name_strategy_ignore,json=nameStrategyIgnore,proto3" json:"name_strategy_ignore,omitempty"`
	DropAnnotations    bool   `protobuf:"varint,12,opt,name=drop_annotations,json=dropAnnotations,proto3" json:"drop_annotations,omitempty"`
}

func (x *HelTaskRequestCopyDataset) Reset() {
	*x = HelTaskRequestCopyDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestCopyDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestCopyDataset) ProtoMessage() {}

func (x *HelTaskRequestCopyDataset) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestCopyDataset.ProtoReflect.Descriptor instead.
func (*HelTaskRequestCopyDataset) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{17}
}

func (x *HelTaskRequestCopyDataset) GetSrcUserId() string {
	if x != nil {
		return x.SrcUserId
	}
	return ""
}

func (x *HelTaskRequestCopyDataset) GetSrcRepoId() string {
	if x != nil {
		return x.SrcRepoId
	}
	return ""
}

func (x *HelTaskRequestCopyDataset) GetInDatasetId() string {
	if x != nil {
		return x.InDatasetId
	}
	return ""
}

func (x *HelTaskRequestCopyDataset) GetNameStrategyIgnore() bool {
	if x != nil {
		return x.NameStrategyIgnore
	}
	return false
}

func (x *HelTaskRequestCopyDataset) GetDropAnnotations() bool {
	if x != nil {
		return x.DropAnnotations
	}
	return false
}

type HelTaskRequestImportDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetDir             string               `protobuf:"bytes,10,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	PredDir              string               `protobuf:"bytes,20,opt,name=pred_dir,json=predDir,proto3" json:"pred_dir,omitempty"`
	GtDir                string               `protobuf:"bytes,21,opt,name=gt_dir,json=gtDir,proto3" json:"gt_dir,omitempty"`
	AnnoFormat           ExportFormat         `protobuf:"varint,22,opt,name=anno_format,json=annoFormat,proto3,enum=mir.command.ExportFormat" json:"anno_format,omitempty"`
	UnknownTypesStrategy UnknownTypesStrategy `protobuf:"varint,23,opt,name=unknown_types_strategy,json=unknownTypesStrategy,proto3,enum=ymir.backend.UnknownTypesStrategy" json:"unknown_types_strategy,omitempty"`
	CleanDirs            bool                 `protobuf:"varint,30,opt,name=clean_dirs,json=cleanDirs,proto3" json:"clean_dirs,omitempty"`
}

func (x *HelTaskRequestImportDataset) Reset() {
	*x = HelTaskRequestImportDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestImportDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestImportDataset) ProtoMessage() {}

func (x *HelTaskRequestImportDataset) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestImportDataset.ProtoReflect.Descriptor instead.
func (*HelTaskRequestImportDataset) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{18}
}

func (x *HelTaskRequestImportDataset) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *HelTaskRequestImportDataset) GetPredDir() string {
	if x != nil {
		return x.PredDir
	}
	return ""
}

func (x *HelTaskRequestImportDataset) GetGtDir() string {
	if x != nil {
		return x.GtDir
	}
	return ""
}

func (x *HelTaskRequestImportDataset) GetAnnoFormat() ExportFormat {
	if x != nil {
		return x.AnnoFormat
	}
	return ExportFormat_EF_NO_ANNOTATIONS
}

func (x *HelTaskRequestImportDataset) GetUnknownTypesStrategy() UnknownTypesStrategy {
	if x != nil {
		return x.UnknownTypesStrategy
	}
	return UnknownTypesStrategy_UTS_STOP
}

func (x *HelTaskRequestImportDataset) GetCleanDirs() bool {
	if x != nil {
		return x.CleanDirs
	}
	return false
}

type HelTaskRequestExportDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetDir   string       `protobuf:"bytes,10,opt,name=asset_dir,json=assetDir,proto3" json:"asset_dir,omitempty"`
	PredDir    string       `protobuf:"bytes,20,opt,name=pred_dir,json=predDir,proto3" json:"pred_dir,omitempty"`
	GtDir      string       `protobuf:"bytes,21,opt,name=gt_dir,json=gtDir,proto3" json:"gt_dir,omitempty"`
	AnnoFormat ExportFormat `protobuf:"varint,22,opt,name=anno_format,json=annoFormat,proto3,enum=mir.command.ExportFormat" json:"anno_format,omitempty"`
}

func (x *HelTaskRequestExportDataset) Reset() {
	*x = HelTaskRequestExportDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestExportDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestExportDataset) ProtoMessage() {}

func (x *HelTaskRequestExportDataset) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestExportDataset.ProtoReflect.Descriptor instead.
func (*HelTaskRequestExportDataset) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{19}
}

func (x *HelTaskRequestExportDataset) GetAssetDir() string {
	if x != nil {
		return x.AssetDir
	}
	return ""
}

func (x *HelTaskRequestExportDataset) GetPredDir() string {
	if x != nil {
		return x.PredDir
	}
	return ""
}

func (x *HelTaskRequestExportDataset) GetGtDir() string {
	if x != nil {
		return x.GtDir
	}
	return ""
}

func (x *HelTaskRequestExportDataset) GetAnnoFormat() ExportFormat {
	if x != nil {
		return x.AnnoFormat
	}
	return ExportFormat_EF_NO_ANNOTATIONS
}

type HelTaskRequestImportModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelPackageFile string `protobuf:"bytes,10,opt,name=model_package_file,json=modelPackageFile,proto3" json:"model_package_file,omitempty"`
}

func (x *HelTaskRequestImportModel) Reset() {
	*x = HelTaskRequestImportModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestImportModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestImportModel) ProtoMessage() {}

func (x *HelTaskRequestImportModel) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestImportModel.ProtoReflect.Descriptor instead.
func (*HelTaskRequestImportModel) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{20}
}

func (x *HelTaskRequestImportModel) GetModelPackageFile() string {
	if x != nil {
		return x.ModelPackageFile
	}
	return ""
}

type HelTaskRequestTrain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input, support multiple inputs
	InDatasetTypes []*TrainingDatasetType `protobuf:"bytes,10,rep,name=in_dataset_types,json=inDatasetTypes,proto3" json:"in_dataset_types,omitempty"`
	MergeStrategy  MergeStrategy          `protobuf:"varint,11,opt,name=merge_strategy,json=mergeStrategy,proto3,enum=ymir.backend.MergeStrategy" json:"merge_strategy,omitempty"`
	// Task configure
	InClassIds        []int32 `protobuf:"varint,20,rep,packed,name=in_class_ids,json=inClassIds,proto3" json:"in_class_ids,omitempty"`
	PreprocessConfig  string  `protobuf:"bytes,21,opt,name=preprocess_config,json=preprocessConfig,proto3" json:"preprocess_config,omitempty"`
	DockerImageName   string  `protobuf:"bytes,22,opt,name=docker_image_name,json=dockerImageName,proto3" json:"docker_image_name,omitempty"`
	DockerImageConfig string  `protobuf:"bytes,23,opt,name=docker_image_config,json=dockerImageConfig,proto3" json:"docker_image_config,omitempty"`
	TaskParameters    string  `protobuf:"bytes,24,opt,name=task_parameters,json=taskParameters,proto3" json:"task_parameters,omitempty"`
	// Optional, for fine-tuning (use pretrained model)
	ModelHash  string `protobuf:"bytes,30,opt,name=model_hash,json=modelHash,proto3" json:"model_hash,omitempty"`
	ModelStage string `protobuf:"bytes,31,opt,name=model_stage,json=modelStage,proto3" json:"model_stage,omitempty"`
}

func (x *HelTaskRequestTrain) Reset() {
	*x = HelTaskRequestTrain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestTrain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestTrain) ProtoMessage() {}

func (x *HelTaskRequestTrain) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestTrain.ProtoReflect.Descriptor instead.
func (*HelTaskRequestTrain) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{21}
}

func (x *HelTaskRequestTrain) GetInDatasetTypes() []*TrainingDatasetType {
	if x != nil {
		return x.InDatasetTypes
	}
	return nil
}

func (x *HelTaskRequestTrain) GetMergeStrategy() MergeStrategy {
	if x != nil {
		return x.MergeStrategy
	}
	return MergeStrategy_STOP
}

func (x *HelTaskRequestTrain) GetInClassIds() []int32 {
	if x != nil {
		return x.InClassIds
	}
	return nil
}

func (x *HelTaskRequestTrain) GetPreprocessConfig() string {
	if x != nil {
		return x.PreprocessConfig
	}
	return ""
}

func (x *HelTaskRequestTrain) GetDockerImageName() string {
	if x != nil {
		return x.DockerImageName
	}
	return ""
}

func (x *HelTaskRequestTrain) GetDockerImageConfig() string {
	if x != nil {
		return x.DockerImageConfig
	}
	return ""
}

func (x *HelTaskRequestTrain) GetTaskParameters() string {
	if x != nil {
		return x.TaskParameters
	}
	return ""
}

func (x *HelTaskRequestTrain) GetModelHash() string {
	if x != nil {
		return x.ModelHash
	}
	return ""
}

func (x *HelTaskRequestTrain) GetModelStage() string {
	if x != nil {
		return x.ModelStage
	}
	return ""
}

type HelTaskRequestMine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input: single dataset id
	InDatasetId string `protobuf:"bytes,10,opt,name=in_dataset_id,json=inDatasetId,proto3" json:"in_dataset_id,omitempty"`
	// Task configure
	DockerImageName   string `protobuf:"bytes,20,opt,name=docker_image_name,json=dockerImageName,proto3" json:"docker_image_name,omitempty"`
	DockerImageConfig string `protobuf:"bytes,21,opt,name=docker_image_config,json=dockerImageConfig,proto3" json:"docker_image_config,omitempty"`
	TaskParameters    string `protobuf:"bytes,22,opt,name=task_parameters,json=taskParameters,proto3" json:"task_parameters,omitempty"`
	// Model
	ModelHash  string `protobuf:"bytes,30,opt,name=model_hash,json=modelHash,proto3" json:"model_hash,omitempty"`
	ModelStage string `protobuf:"bytes,31,opt,name=model_stage,json=modelStage,proto3" json:"model_stage,omitempty"`
	// Task params
	TopK           int32 `protobuf:"varint,40,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"` // > 0, will keep all if set to 0.
	AddAnnotations bool  `protobuf:"varint,41,opt,name=add_annotations,json=addAnnotations,proto3" json:"add_annotations,omitempty"`
}

func (x *HelTaskRequestMine) Reset() {
	*x = HelTaskRequestMine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestMine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestMine) ProtoMessage() {}

func (x *HelTaskRequestMine) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestMine.ProtoReflect.Descriptor instead.
func (*HelTaskRequestMine) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{22}
}

func (x *HelTaskRequestMine) GetInDatasetId() string {
	if x != nil {
		return x.InDatasetId
	}
	return ""
}

func (x *HelTaskRequestMine) GetDockerImageName() string {
	if x != nil {
		return x.DockerImageName
	}
	return ""
}

func (x *HelTaskRequestMine) GetDockerImageConfig() string {
	if x != nil {
		return x.DockerImageConfig
	}
	return ""
}

func (x *HelTaskRequestMine) GetTaskParameters() string {
	if x != nil {
		return x.TaskParameters
	}
	return ""
}

func (x *HelTaskRequestMine) GetModelHash() string {
	if x != nil {
		return x.ModelHash
	}
	return ""
}

func (x *HelTaskRequestMine) GetModelStage() string {
	if x != nil {
		return x.ModelStage
	}
	return ""
}

func (x *HelTaskRequestMine) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *HelTaskRequestMine) GetAddAnnotations() bool {
	if x != nil {
		return x.AddAnnotations
	}
	return false
}

type HelTaskRequestFuse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input, support multiple inputs
	InDatasetIds  []string      `protobuf:"bytes,10,rep,name=in_dataset_ids,json=inDatasetIds,proto3" json:"in_dataset_ids,omitempty"`
	ExDatasetIds  []string      `protobuf:"bytes,11,rep,name=ex_dataset_ids,json=exDatasetIds,proto3" json:"ex_dataset_ids,omitempty"`
	MergeStrategy MergeStrategy `protobuf:"varint,12,opt,name=merge_strategy,json=mergeStrategy,proto3,enum=ymir.backend.MergeStrategy" json:"merge_strategy,omitempty"`
	// Filter classids
	InClassIds []int32 `protobuf:"varint,20,rep,packed,name=in_class_ids,json=inClassIds,proto3" json:"in_class_ids,omitempty"`
	ExClassIds []int32 `protobuf:"varint,21,rep,packed,name=ex_class_ids,json=exClassIds,proto3" json:"ex_class_ids,omitempty"`
	// Sample task
	//
	// Types that are assignable to Sampling:
	//	*HelTaskRequestFuse_SamplingCount
	//	*HelTaskRequestFuse_SamplingRate
	Sampling isHelTaskRequestFuse_Sampling `protobuf_oneof:"sampling"`
}

func (x *HelTaskRequestFuse) Reset() {
	*x = HelTaskRequestFuse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestFuse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestFuse) ProtoMessage() {}

func (x *HelTaskRequestFuse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestFuse.ProtoReflect.Descriptor instead.
func (*HelTaskRequestFuse) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{23}
}

func (x *HelTaskRequestFuse) GetInDatasetIds() []string {
	if x != nil {
		return x.InDatasetIds
	}
	return nil
}

func (x *HelTaskRequestFuse) GetExDatasetIds() []string {
	if x != nil {
		return x.ExDatasetIds
	}
	return nil
}

func (x *HelTaskRequestFuse) GetMergeStrategy() MergeStrategy {
	if x != nil {
		return x.MergeStrategy
	}
	return MergeStrategy_STOP
}

func (x *HelTaskRequestFuse) GetInClassIds() []int32 {
	if x != nil {
		return x.InClassIds
	}
	return nil
}

func (x *HelTaskRequestFuse) GetExClassIds() []int32 {
	if x != nil {
		return x.ExClassIds
	}
	return nil
}

func (m *HelTaskRequestFuse) GetSampling() isHelTaskRequestFuse_Sampling {
	if m != nil {
		return m.Sampling
	}
	return nil
}

func (x *HelTaskRequestFuse) GetSamplingCount() int32 {
	if x, ok := x.GetSampling().(*HelTaskRequestFuse_SamplingCount); ok {
		return x.SamplingCount
	}
	return 0
}

func (x *HelTaskRequestFuse) GetSamplingRate() float32 {
	if x, ok := x.GetSampling().(*HelTaskRequestFuse_SamplingRate); ok {
		return x.SamplingRate
	}
	return 0
}

type isHelTaskRequestFuse_Sampling interface {
	isHelTaskRequestFuse_Sampling()
}

type HelTaskRequestFuse_SamplingCount struct {
	SamplingCount int32 `protobuf:"varint,22,opt,name=sampling_count,json=samplingCount,proto3,oneof"`
}

type HelTaskRequestFuse_SamplingRate struct {
	SamplingRate float32 `protobuf:"fixed32,23,opt,name=sampling_rate,json=samplingRate,proto3,oneof"`
}

func (*HelTaskRequestFuse_SamplingCount) isHelTaskRequestFuse_Sampling() {}

func (*HelTaskRequestFuse_SamplingRate) isHelTaskRequestFuse_Sampling() {}

type HelTaskRequestPullImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DockerImageName string `protobuf:"bytes,10,opt,name=docker_image_name,json=dockerImageName,proto3" json:"docker_image_name,omitempty"`
}

func (x *HelTaskRequestPullImage) Reset() {
	*x = HelTaskRequestPullImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequestPullImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequestPullImage) ProtoMessage() {}

func (x *HelTaskRequestPullImage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequestPullImage.ProtoReflect.Descriptor instead.
func (*HelTaskRequestPullImage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{24}
}

func (x *HelTaskRequestPullImage) GetDockerImageName() string {
	if x != nil {
		return x.DockerImageName
	}
	return ""
}

type HelTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RepoId   string   `protobuf:"bytes,2,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	TaskType TaskType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=mir.command.TaskType" json:"task_type,omitempty"`
	// #Task id related
	TaskId string `protobuf:"bytes,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Dataset task
	Fuse          *HelTaskRequestFuse          `protobuf:"bytes,100,opt,name=fuse,proto3" json:"fuse,omitempty"`
	CopyDataset   *HelTaskRequestCopyDataset   `protobuf:"bytes,101,opt,name=copy_dataset,json=copyDataset,proto3" json:"copy_dataset,omitempty"`
	ImportDataset *HelTaskRequestImportDataset `protobuf:"bytes,102,opt,name=import_dataset,json=importDataset,proto3" json:"import_dataset,omitempty"`
	ExportDataset *HelTaskRequestExportDataset `protobuf:"bytes,103,opt,name=export_dataset,json=exportDataset,proto3" json:"export_dataset,omitempty"`
	ImportModel   *HelTaskRequestImportModel   `protobuf:"bytes,104,opt,name=import_model,json=importModel,proto3" json:"import_model,omitempty"`
	// TMI task
	PullImage *HelTaskRequestPullImage `protobuf:"bytes,200,opt,name=pull_image,json=pullImage,proto3" json:"pull_image,omitempty"`
	Train     *HelTaskRequestTrain     `protobuf:"bytes,201,opt,name=train,proto3" json:"train,omitempty"`
	Mine      *HelTaskRequestMine      `protobuf:"bytes,202,opt,name=mine,proto3" json:"mine,omitempty"`
}

func (x *HelTaskRequest) Reset() {
	*x = HelTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskRequest) ProtoMessage() {}

func (x *HelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskRequest.ProtoReflect.Descriptor instead.
func (*HelTaskRequest) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{25}
}

func (x *HelTaskRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *HelTaskRequest) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *HelTaskRequest) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TaskTypeUnknown
}

func (x *HelTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *HelTaskRequest) GetFuse() *HelTaskRequestFuse {
	if x != nil {
		return x.Fuse
	}
	return nil
}

func (x *HelTaskRequest) GetCopyDataset() *HelTaskRequestCopyDataset {
	if x != nil {
		return x.CopyDataset
	}
	return nil
}

func (x *HelTaskRequest) GetImportDataset() *HelTaskRequestImportDataset {
	if x != nil {
		return x.ImportDataset
	}
	return nil
}

func (x *HelTaskRequest) GetExportDataset() *HelTaskRequestExportDataset {
	if x != nil {
		return x.ExportDataset
	}
	return nil
}

func (x *HelTaskRequest) GetImportModel() *HelTaskRequestImportModel {
	if x != nil {
		return x.ImportModel
	}
	return nil
}

func (x *HelTaskRequest) GetPullImage() *HelTaskRequestPullImage {
	if x != nil {
		return x.PullImage
	}
	return nil
}

func (x *HelTaskRequest) GetTrain() *HelTaskRequestTrain {
	if x != nil {
		return x.Train
	}
	return nil
}

func (x *HelTaskRequest) GetMine() *HelTaskRequestMine {
	if x != nil {
		return x.Mine
	}
	return nil
}

type HelTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Request *HelTaskRequest `protobuf:"bytes,100,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *HelTaskResponse) Reset() {
	*x = HelTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelTaskResponse) ProtoMessage() {}

func (x *HelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelTaskResponse.ProtoReflect.Descriptor instead.
func (*HelTaskResponse) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{26}
}

func (x *HelTaskResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HelTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HelTaskResponse) GetRequest() *HelTaskRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_backend_proto protoreflect.FileDescriptor

var file_backend_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x11, 0x6d,
	0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x84, 0x09, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f,
	0x6e, 0x4f, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x69, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x65,
	0x78, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x69, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x47, 0x0a, 0x14,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48,
	0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6d, 0x69, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x22, 0xd7, 0x05, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x72,
	0x65, 0x71, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74, 0x53, 0x74, 0x72, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x13, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x73, 0x5f, 0x72,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x43, 0x4d, 0x44, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xea,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x44, 0x0a, 0x16, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10,
	0x06, 0x22, 0x97, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x6f, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6e, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x39, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6d, 0x69,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x49, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x70,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x6d, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4b,
	0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x57, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x31,
	0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xce, 0x02, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x44,
	0x69, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x44, 0x69, 0x72, 0x12, 0x58, 0x0a, 0x16, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x6d, 0x69, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x14, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x69,
	0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x6e, 0x6e, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x61, 0x6e, 0x6e, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x44, 0x69,
	0x72, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x74, 0x44, 0x69, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x72, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x70, 0x43, 0x4d, 0x44, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x61,
	0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x6d, 0x69, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x43, 0x4d, 0x44,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x68, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x0f, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x79,
	0x6d, 0x69, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x79, 0x6d, 0x69, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87,
	0x01, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x48, 0x65, 0x6c,
	0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x79,
	0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x4f,
	0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e,
	0x4f, 0x70, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x48, 0x65, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a,
	0x0a, 0x48, 0x65, 0x6c, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x67,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x75, 0x73, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x73, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x22, 0xdc, 0x01,
	0x0a, 0x19, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x72, 0x6f,
	0x70, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x02, 0x0a,
	0x1b, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x64, 0x44, 0x69, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x44, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x14, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x64, 0x44, 0x69, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x44, 0x69, 0x72, 0x12,
	0x3a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x49, 0x0a, 0x19, 0x48,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x13, 0x48, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x4b,
	0x0a, 0x10, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x12, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xc4, 0x02, 0x0a, 0x12, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79,
	0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x78,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0a, 0x65, 0x78, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x17, 0x48, 0x65, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb9, 0x05, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x04, 0x66, 0x75, 0x73, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x75, 0x73,
	0x65, 0x52, 0x04, 0x66, 0x75, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x6d,
	0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x09, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x6d, 0x69,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x65, 0x22, 0x77, 0x0a, 0x0f, 0x48,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2a, 0x2e, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x02, 0x2a, 0x41, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x54, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x54,
	0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x54,
	0x53, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x2a, 0x9e, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4d, 0x44, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4d, 0x44, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4d, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4d, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4d, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4d,
	0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4d, 0x44, 0x5f, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4d, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x0d, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x5f, 0x47, 0x50,
	0x55, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4d, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4d, 0x44, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x10, 0x13,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4d, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4d, 0x44, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x16, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x66, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x67, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x68, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x69, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x6a,
	0x12, 0x10, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0xe9, 0x07, 0x22, 0x04, 0x08, 0x0f, 0x10, 0x0f, 0x2a, 0x2f, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0a, 0x48, 0x65, 0x6c,
	0x4f, 0x70, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45, 0x4c, 0x5f, 0x4f,
	0x50, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x45, 0x4c, 0x5f, 0x4f, 0x50, 0x53, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x47, 0x50, 0x55, 0x10, 0x02, 0x32, 0x66, 0x0a, 0x16, 0x6d, 0x69, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x79, 0x6d, 0x69, 0x72,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x32, 0xb0, 0x01, 0x0a, 0x0b, 0x68, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x48, 0x65, 0x6c, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x10, 0x68, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x6d, 0x69, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x48, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_proto_rawDescOnce sync.Once
	file_backend_proto_rawDescData = file_backend_proto_rawDesc
)

func file_backend_proto_rawDescGZIP() []byte {
	file_backend_proto_rawDescOnce.Do(func() {
		file_backend_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_proto_rawDescData)
	})
	return file_backend_proto_rawDescData
}

var file_backend_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_backend_proto_goTypes = []interface{}{
	(MergeStrategy)(0),                  // 0: ymir.backend.MergeStrategy
	(UnknownTypesStrategy)(0),           // 1: ymir.backend.UnknownTypesStrategy
	(RequestType)(0),                    // 2: ymir.backend.RequestType
	(AnnotationType)(0),                 // 3: ymir.backend.AnnotationType
	(HelOpsType)(0),                     // 4: ymir.backend.HelOpsType
	(*GeneralReq)(nil),                  // 5: ymir.backend.GeneralReq
	(*GeneralResp)(nil),                 // 6: ymir.backend.GeneralResp
	(*ReqCreateTask)(nil),               // 7: ymir.backend.ReqCreateTask
	(*TrainingDatasetType)(nil),         // 8: ymir.backend.TrainingDatasetType
	(*TaskReqTraining)(nil),             // 9: ymir.backend.TaskReqTraining
	(*TaskReqMining)(nil),               // 10: ymir.backend.TaskReqMining
	(*TaskReqImportDataset)(nil),        // 11: ymir.backend.TaskReqImportDataset
	(*TaskReqExporting)(nil),            // 12: ymir.backend.TaskReqExporting
	(*TaskReqCopyData)(nil),             // 13: ymir.backend.TaskReqCopyData
	(*TaskReqLabeling)(nil),             // 14: ymir.backend.TaskReqLabeling
	(*TaskReqImportModel)(nil),          // 15: ymir.backend.TaskReqImportModel
	(*RespCMDInference)(nil),            // 16: ymir.backend.RespCMDInference
	(*LabelCollection)(nil),             // 17: ymir.backend.LabelCollection
	(*Label)(nil),                       // 18: ymir.backend.Label
	(*HelOpsRequest)(nil),               // 19: ymir.backend.HelOpsRequest
	(*HelOpsResponse)(nil),              // 20: ymir.backend.HelOpsResponse
	(*HelGpuInfo)(nil),                  // 21: ymir.backend.HelGpuInfo
	(*HelTaskRequestCopyDataset)(nil),   // 22: ymir.backend.HelTaskRequestCopyDataset
	(*HelTaskRequestImportDataset)(nil), // 23: ymir.backend.HelTaskRequestImportDataset
	(*HelTaskRequestExportDataset)(nil), // 24: ymir.backend.HelTaskRequestExportDataset
	(*HelTaskRequestImportModel)(nil),   // 25: ymir.backend.HelTaskRequestImportModel
	(*HelTaskRequestTrain)(nil),         // 26: ymir.backend.HelTaskRequestTrain
	(*HelTaskRequestMine)(nil),          // 27: ymir.backend.HelTaskRequestMine
	(*HelTaskRequestFuse)(nil),          // 28: ymir.backend.HelTaskRequestFuse
	(*HelTaskRequestPullImage)(nil),     // 29: ymir.backend.HelTaskRequestPullImage
	(*HelTaskRequest)(nil),              // 30: ymir.backend.HelTaskRequest
	(*HelTaskResponse)(nil),             // 31: ymir.backend.HelTaskResponse
	nil,                                 // 32: ymir.backend.GeneralResp.DockerImageConfigEntry
	nil,                                 // 33: ymir.backend.RespCMDInference.ImageAnnotationsEntry
	(TaskType)(0),                       // 34: mir.command.TaskType
	(*EvaluateConfig)(nil),              // 35: mir.command.EvaluateConfig
	(*Evaluation)(nil),                  // 36: mir.command.Evaluation
	(ObjectType)(0),                     // 37: mir.command.ObjectType
	(TvtType)(0),                        // 38: mir.command.TvtType
	(ExportFormat)(0),                   // 39: mir.command.ExportFormat
	(*SingleImageAnnotations)(nil),      // 40: mir.command.SingleImageAnnotations
}
var file_backend_proto_depIdxs = []int32{
	2,  // 0: ymir.backend.GeneralReq.req_type:type_name -> ymir.backend.RequestType
	0,  // 1: ymir.backend.GeneralReq.merge_strategy:type_name -> ymir.backend.MergeStrategy
	34, // 2: ymir.backend.GeneralReq.terminated_task_type:type_name -> mir.command.TaskType
	17, // 3: ymir.backend.GeneralReq.label_collection:type_name -> ymir.backend.LabelCollection
	35, // 4: ymir.backend.GeneralReq.evaluate_config:type_name -> mir.command.EvaluateConfig
	7,  // 5: ymir.backend.GeneralReq.req_create_task:type_name -> ymir.backend.ReqCreateTask
	32, // 6: ymir.backend.GeneralResp.docker_image_config:type_name -> ymir.backend.GeneralResp.DockerImageConfigEntry
	17, // 7: ymir.backend.GeneralResp.label_collection:type_name -> ymir.backend.LabelCollection
	16, // 8: ymir.backend.GeneralResp.objects:type_name -> ymir.backend.RespCMDInference
	36, // 9: ymir.backend.GeneralResp.evaluation:type_name -> mir.command.Evaluation
	37, // 10: ymir.backend.GeneralResp.object_type:type_name -> mir.command.ObjectType
	34, // 11: ymir.backend.ReqCreateTask.task_type:type_name -> mir.command.TaskType
	9,  // 12: ymir.backend.ReqCreateTask.training:type_name -> ymir.backend.TaskReqTraining
	10, // 13: ymir.backend.ReqCreateTask.mining:type_name -> ymir.backend.TaskReqMining
	11, // 14: ymir.backend.ReqCreateTask.import_dataset:type_name -> ymir.backend.TaskReqImportDataset
	12, // 15: ymir.backend.ReqCreateTask.exporting:type_name -> ymir.backend.TaskReqExporting
	13, // 16: ymir.backend.ReqCreateTask.copy:type_name -> ymir.backend.TaskReqCopyData
	14, // 17: ymir.backend.ReqCreateTask.labeling:type_name -> ymir.backend.TaskReqLabeling
	15, // 18: ymir.backend.ReqCreateTask.import_model:type_name -> ymir.backend.TaskReqImportModel
	38, // 19: ymir.backend.TrainingDatasetType.dataset_type:type_name -> mir.command.TvtType
	8,  // 20: ymir.backend.TaskReqTraining.in_dataset_types:type_name -> ymir.backend.TrainingDatasetType
	1,  // 21: ymir.backend.TaskReqImportDataset.unknown_types_strategy:type_name -> ymir.backend.UnknownTypesStrategy
	37, // 22: ymir.backend.TaskReqImportDataset.anno_type:type_name -> mir.command.ObjectType
	39, // 23: ymir.backend.TaskReqExporting.format:type_name -> mir.command.ExportFormat
	3,  // 24: ymir.backend.TaskReqLabeling.annotation_type:type_name -> ymir.backend.AnnotationType
	33, // 25: ymir.backend.RespCMDInference.image_annotations:type_name -> ymir.backend.RespCMDInference.ImageAnnotationsEntry
	18, // 26: ymir.backend.LabelCollection.labels:type_name -> ymir.backend.Label
	4,  // 27: ymir.backend.HelOpsRequest.ops_type:type_name -> ymir.backend.HelOpsType
	34, // 28: ymir.backend.HelOpsRequest.term_task_type:type_name -> mir.command.TaskType
	21, // 29: ymir.backend.HelOpsResponse.gpu_info:type_name -> ymir.backend.HelGpuInfo
	19, // 30: ymir.backend.HelOpsResponse.request:type_name -> ymir.backend.HelOpsRequest
	39, // 31: ymir.backend.HelTaskRequestImportDataset.anno_format:type_name -> mir.command.ExportFormat
	1,  // 32: ymir.backend.HelTaskRequestImportDataset.unknown_types_strategy:type_name -> ymir.backend.UnknownTypesStrategy
	39, // 33: ymir.backend.HelTaskRequestExportDataset.anno_format:type_name -> mir.command.ExportFormat
	8,  // 34: ymir.backend.HelTaskRequestTrain.in_dataset_types:type_name -> ymir.backend.TrainingDatasetType
	0,  // 35: ymir.backend.HelTaskRequestTrain.merge_strategy:type_name -> ymir.backend.MergeStrategy
	0,  // 36: ymir.backend.HelTaskRequestFuse.merge_strategy:type_name -> ymir.backend.MergeStrategy
	34, // 37: ymir.backend.HelTaskRequest.task_type:type_name -> mir.command.TaskType
	28, // 38: ymir.backend.HelTaskRequest.fuse:type_name -> ymir.backend.HelTaskRequestFuse
	22, // 39: ymir.backend.HelTaskRequest.copy_dataset:type_name -> ymir.backend.HelTaskRequestCopyDataset
	23, // 40: ymir.backend.HelTaskRequest.import_dataset:type_name -> ymir.backend.HelTaskRequestImportDataset
	24, // 41: ymir.backend.HelTaskRequest.export_dataset:type_name -> ymir.backend.HelTaskRequestExportDataset
	25, // 42: ymir.backend.HelTaskRequest.import_model:type_name -> ymir.backend.HelTaskRequestImportModel
	29, // 43: ymir.backend.HelTaskRequest.pull_image:type_name -> ymir.backend.HelTaskRequestPullImage
	26, // 44: ymir.backend.HelTaskRequest.train:type_name -> ymir.backend.HelTaskRequestTrain
	27, // 45: ymir.backend.HelTaskRequest.mine:type_name -> ymir.backend.HelTaskRequestMine
	30, // 46: ymir.backend.HelTaskResponse.request:type_name -> ymir.backend.HelTaskRequest
	40, // 47: ymir.backend.RespCMDInference.ImageAnnotationsEntry.value:type_name -> mir.command.SingleImageAnnotations
	5,  // 48: ymir.backend.mir_controller_service.data_manage_request:input_type -> ymir.backend.GeneralReq
	19, // 49: ymir.backend.hel_service.hel_ops_process:input_type -> ymir.backend.HelOpsRequest
	30, // 50: ymir.backend.hel_service.hel_task_process:input_type -> ymir.backend.HelTaskRequest
	6,  // 51: ymir.backend.mir_controller_service.data_manage_request:output_type -> ymir.backend.GeneralResp
	20, // 52: ymir.backend.hel_service.hel_ops_process:output_type -> ymir.backend.HelOpsResponse
	31, // 53: ymir.backend.hel_service.hel_task_process:output_type -> ymir.backend.HelTaskResponse
	51, // [51:54] is the sub-list for method output_type
	48, // [48:51] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_backend_proto_init() }
func file_backend_proto_init() {
	if File_backend_proto != nil {
		return
	}
	file_mir_command_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_backend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqCreateTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingDatasetType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqTraining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqImportDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqExporting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqCopyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqLabeling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReqImportModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespCMDInference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelOpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelOpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelGpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestCopyDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestImportDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestExportDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestImportModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestTrain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestMine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestFuse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequestPullImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_backend_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GeneralReq_SamplingCount)(nil),
		(*GeneralReq_SamplingRate)(nil),
	}
	file_backend_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*HelTaskRequestFuse_SamplingCount)(nil),
		(*HelTaskRequestFuse_SamplingRate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_backend_proto_goTypes,
		DependencyIndexes: file_backend_proto_depIdxs,
		EnumInfos:         file_backend_proto_enumTypes,
		MessageInfos:      file_backend_proto_msgTypes,
	}.Build()
	File_backend_proto = out.File
	file_backend_proto_rawDesc = nil
	file_backend_proto_goTypes = nil
	file_backend_proto_depIdxs = nil
}
