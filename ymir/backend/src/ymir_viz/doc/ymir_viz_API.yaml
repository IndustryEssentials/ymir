openapi: 3.0.1
info:
  title: Ymir-viz
  description: Ymir-viz
  contact:
    email: test@ymir.ai
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  version: 1.0.0
servers:
  - url: "http://xxx.com/v1"
tags:
  - name: asset
    description: Assets represent the smallest granular resources, like pictures
  - name: model
    description: Training task produces model
paths:
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/datasets":
    get:
      tags:
        - dataset
      summary: "get dataset info"
      description: "get dataset info"
      operationId: get_dataset_info
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetResult"
        "400":
          description: Dataset not exists
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets":
    get:
      tags:
        - asset
      summary: "get assets info from special user_id,repo_id,branch_id"
      description: "get assets info from special user_id,repo_id,branch_id, sort by asset_id"
      operationId: get_asserts_info
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: offset
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: limit
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
        - name: class_id
          in: query
          description: single class id
          required: false
          schema:
            type: integer
            default: false
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetsResult"
        "400":
          description: Branch not exists
          content: {}
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets/{asset_id}":
    get:
      tags:
        - asset
      summary: "get asset_id info"
      description: ""
      operationId: get_assert_id_Info
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
        - name: asset_id
          in: path
          description: asset_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetMetaResult"
        "400":
          description: Branch not exists
          content: {}
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/models":
    get:
      tags:
        - model
      summary: "get model info"
      description: "get model info"
      operationId: get_model_info
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelResult"
        "400":
          description: Task not exists
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/evaluations":
    get:
      tags:
        - evaluation
      summary: "get dataset evaluation result"
      description: "get dataset evaluation result"
      operationId: get_dataset_evaluations
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetEvaluationResult"
        "400":
          description: DatasetEvaluation not exists
  "/users/{user_id}/repositories/{repo_id}/branches/{branch_id}/dataset_fast_evaluation":
    get:
      tags:
        - evaluation
      summary: "evaluate dataset and get result"
      description: "evaluate dataset and get result"
      operationId: dataset_fast_evaluation
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: branch_id
          in: path
          description: branch_id
          required: true
          schema:
            type: string
        - name: conf_thr
          in: query
          description: conf_thr
          required: true
          schema:
            type: number
            maximum: 1.0
            minimum: 0.0
            example: 0.0005
        - name: iou_thr
          in: query
          description: iou_thr
          required: true
          schema:
            type: number
            maximum: 1.0
            minimum: 0.0
            example: 0.5
        - name: need_pr_curve
          in: query
          description: need pr curve or not
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetEvaluationResult"
        "400":
          description: Dataset evaluation failed
  /users/{user_id}/repositories/{repo_id}/dataset_duplication:
    get:
      tags:
        - dataset
      summary: check datasets duplication
      description: check datasets duplication
      operationId: check_datasets_duplication
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: string
        - name: repo_id
          in: path
          description: repo_id
          required: true
          schema:
            type: string
        - name: candidate_dataset_ids
          in: query
          description: candidate datasets to check duplication with. each dataset_id is separated by comma (,)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDuplicationResult'
        '400':
          description: Datasets not exist

components:
  schemas:
    AssetInfo:
      type: object
      properties:
        asset_id:
          type: string
        class_ids:
          type: array
          items:
            type: integer
            example: [2, 4]
    #        annotations:
    #          $ref: '#/components/schemas/Annotations'
    AssetsResult:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            result:
              type: object
              properties:
                elements:
                  type: array
                  items:
                    $ref: "#/components/schemas/AssetInfo"
                offset:
                  type: integer
                limit:
                  type: integer
                tatal:
                  type: integer
    AssetMetaResult:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            result:
              $ref: "#/components/schemas/AssetsMetaInfo"
    AssetsMetaInfo:
      type: object
      properties:
        annotations:
          $ref: "#/components/schemas/Annotations"
        class_ids:
          type: array
          items:
            type: integer
        metadata:
          type: object
          properties:
            asset_type:
              type: string
            width:
              type: integer
            height:
              type: integer
            image_channels:
              type: integer
            timestamp:
              type: object
              properties:
                start:
                  type: integer
      example:
        annotations:
          - box:
              x: 121
              y: 1
              w: 33
              h: 44
            class_id: 4
            score: 0.33
        class_ids:
          - 4
          - 6
        metadata:
          asset_type: pic
          width: 100
          height: 100
          image_channels: 1
          timestamp: { "start": 45645 }
    ModelResult:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            result:
              type: object
              properties:
                model_id:
                  type: string
                model_mAP:
                  type: integer
                  maximum: 1
                  minimum: 0
                  description: mean average precision of the model
                  example: 0.5
                task_parameters:
                  type: string
                executor_config:
                  type: string
    DatasetResult:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            result:
              type: object
              properties:
                total_images_cnt:
                  type: integer
                class_ids_count:
                  type: object
                  example: "{3:8, 4:2}"
                class_names_count:
                  type: object
                  example: "{'cat':8, 'dog':2}"
                ignored_labels:
                  type: object
                  example: "{'cat':8}"
                negative_info:
                  type: object
                  properties:
                    negative_images_cnt:
                      type: integer
                    project_negative_images_cnt:
                      type: integer
    DatasetEvaluationResult:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            result:
              type: object
              additionalProperties:
                type: object
                properties:
                  conf_thr:
                    type: number
                  iou_evaluations:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/DatasetEvaluation'
                  iou_averaged_evaluation:
                    $ref: '#/components/schemas/DatasetEvaluation'

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        request_id:
          type: string
        message:
          type: string
    Annotations:
      type: array
      items:
        type: object
        properties:
          box:
            type: object
            properties:
              x:
                type: integer
              y:
                type: integer
              w:
                type: integer
              h:
                type: integer
          class_id:
            type: integer
          score:
            type: integer
    DatasetEvaluation:
      type: object
      properties:
        ci_evaluations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DatasetEvaluationElement"
        ci_averaged_evaluation:
          $ref: "#/components/schemas/DatasetEvaluationElement"
        ck_evaluations:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DatasetEvaluationTotalSubElement"
    DatasetEvaluationTotalSubElement:
      type: object
      properties:
        total:  # averaged by sub cks
          $ref: "#/components/schemas/DatasetEvaluationElement"
        sub:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DatasetEvaluationElement"
    DatasetEvaluationElement:
      type: object
      properties:
        ap:
          type: number
        ar:
          type: number
        tp:
          type: integer
        fp:
          type: integer
        fn:
          type: integer
        pr_curve:
          type: array
          items:
            $ref: "#/components/schemas/DatasetEvaluationElementPoint3d"
          example: [{'x': 0, 'y': 1, 'z': 0.5}, {'x': 0.1, 'y': 0.9, 'z': 0.3}, {'x': 1, 'y': 0, 'z': 0.3}]
    DatasetEvaluationElementPoint3d:
      type: object
      properties:
        x:
          type: number
        y:
          type: number
        z:
          type: number
      example: {'x': 0.0, 'y': 1.0, 'z': 0.3}  # x: recall, y: precision, z: confidence
    DatasetDuplicationResult:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            result:
              type: integer
