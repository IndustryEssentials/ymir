openapi: 3.0.1
info:
  title: Ymir-viz
  description: Ymir-viz
  contact:
    email: test@ymir.ai
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://xxx.com/v1
tags:
- name: asset
  description: "Assets represent the smallest granular resources, like pictures"
- name: model
  description: Training task produces model
paths:
  /users/{user_id}/repositories/{repo_id}/branches/{branch_id}/datasets:
    get:
      tags:
      - dataset
      summary: get dataset info
      description: get dataset info
      operationId: get_dataset_info
      parameters:
      - name: user_id
        in: path
        description: user_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repo_id
        in: path
        description: repo_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_id
        in: path
        description: branch_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResult'
        "400":
          description: Dataset not exists
      x-openapi-router-controller: src.controllers.dataset_controller
  /users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets:
    get:
      tags:
      - asset
      summary: "get assets info from special user_id,repo_id,branch_id"
      description: "get assets info from special user_id,repo_id,branch_id, sort by\
        \ asset_id"
      operationId: get_asserts_info
      parameters:
      - name: user_id
        in: path
        description: user_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repo_id
        in: path
        description: repo_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_id
        in: path
        description: branch_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: offset
        in: query
        description: offset
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        description: limit
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 0
          type: integer
          default: 20
      - name: class_id
        in: query
        description: single class id
        required: false
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsResult'
        "400":
          description: Branch not exists
          content: {}
      x-openapi-router-controller: src.controllers.asset_controller
  /users/{user_id}/repositories/{repo_id}/branches/{branch_id}/assets/{asset_id}:
    get:
      tags:
      - asset
      summary: get asset_id info
      description: ""
      operationId: get_assert_id_info
      parameters:
      - name: user_id
        in: path
        description: user_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repo_id
        in: path
        description: repo_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_id
        in: path
        description: branch_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: asset_id
        in: path
        description: asset_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetMetaResult'
        "400":
          description: Branch not exists
          content: {}
      x-openapi-router-controller: src.controllers.asset_controller
  /users/{user_id}/repositories/{repo_id}/branches/{branch_id}/models:
    get:
      tags:
      - model
      summary: get model info
      description: get model info
      operationId: get_model_info
      parameters:
      - name: user_id
        in: path
        description: user_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: repo_id
        in: path
        description: repo_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_id
        in: path
        description: branch_id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelResult'
        "400":
          description: Task not exists
      x-openapi-router-controller: src.controllers.model_controller
components:
  schemas:
    AssetInfo:
      type: object
      properties:
        asset_id:
          type: string
        class_ids:
          type: array
          items:
            type: integer
    AssetsResult:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            $ref: '#/components/schemas/AssetsResult_result'
    AssetMetaResult:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            $ref: '#/components/schemas/AssetsMetaInfo'
    AssetsMetaInfo:
      type: object
      properties:
        annotations:
          $ref: '#/components/schemas/Annotations'
        class_ids:
          type: array
          items:
            type: integer
        metadata:
          $ref: '#/components/schemas/AssetsMetaInfo_metadata'
      example:
        annotations:
        - box:
            x: 121
            "y": 1
            w: 33
            h: 44
          class_id: 4
          score: 0.33
        class_ids:
        - 4
        - 6
        metadata:
          asset_type: pic
          width: 100
          height: 100
          image_channels: 1
          timestamp:
            start: 45645
    ModelResult:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            $ref: '#/components/schemas/ModelResult_result'
    DatasetResult:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            $ref: '#/components/schemas/DatasetResult_result'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        request_id:
          type: string
        message:
          type: string
    Annotations:
      type: array
      items:
        $ref: '#/components/schemas/Annotations_inner'
    AssetsResult_result_negative_info:
      type: object
      properties:
        negative_images_cnt:
          type: integer
        project_negative_images_cnt:
          type: integer
    AssetsResult_result:
      type: object
      properties:
        class_ids_count:
          type: object
          example: "{4:8, 5:2}"
        total_images_cnt:
          type: integer
        ignored_labels:
          type: object
          example: "{cat:8}"
        negative_info:
          $ref: '#/components/schemas/AssetsResult_result_negative_info'
        elements:
          type: array
          items:
            $ref: '#/components/schemas/AssetInfo'
        offset:
          type: integer
        limit:
          type: integer
        tatal:
          type: integer
    AssetsMetaInfo_metadata_timestamp:
      type: object
      properties:
        start:
          type: integer
    AssetsMetaInfo_metadata:
      type: object
      properties:
        asset_type:
          type: string
        width:
          type: integer
        height:
          type: integer
        image_channels:
          type: integer
        timestamp:
          $ref: '#/components/schemas/AssetsMetaInfo_metadata_timestamp'
    ModelResult_result:
      type: object
      properties:
        task_type:
          type: string
          description: 也可作为Enum
        model_id:
          type: string
        model_mAP:
          maximum: 1
          minimum: 0
          type: integer
          description: mean average precision of the model
    DatasetResult_result:
      type: object
      properties:
        total_images_cnt:
          type: integer
        class_ids_count:
          type: object
          example: "{4:8, 5:2}"
        ignored_labels:
          type: object
          example: "{cat:8}"
        negative_info:
          $ref: '#/components/schemas/AssetsResult_result_negative_info'
    Annotations_inner:
      type: object
      properties:
        box:
          type: object
          properties:
            x:
              type: integer
            "y":
              type: integer
            w:
              type: integer
            h:
              type: integer
        class_id:
          type: integer
        score:
          type: integer

