# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.swagger_models.base_model_ import Model
from src.swagger_models.data_stats_pred_gt_result import DataStatsPredGtResult  # noqa: F401,E501
from src import util


class DatasetStatsResultResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, total_images_count: int=None, pred: DataStatsPredGtResult=None, gt: DataStatsPredGtResult=None):  # noqa: E501
        """DatasetStatsResultResult - a model defined in Swagger

        :param total_images_count: The total_images_count of this DatasetStatsResultResult.  # noqa: E501
        :type total_images_count: int
        :param pred: The pred of this DatasetStatsResultResult.  # noqa: E501
        :type pred: DataStatsPredGtResult
        :param gt: The gt of this DatasetStatsResultResult.  # noqa: E501
        :type gt: DataStatsPredGtResult
        """
        self.swagger_types = {
            'total_images_count': int,
            'pred': DataStatsPredGtResult,
            'gt': DataStatsPredGtResult
        }

        self.attribute_map = {
            'total_images_count': 'total_images_count',
            'pred': 'pred',
            'gt': 'gt'
        }
        self._total_images_count = total_images_count
        self._pred = pred
        self._gt = gt

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetStatsResultResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetStatsResult_result of this DatasetStatsResultResult.  # noqa: E501
        :rtype: DatasetStatsResultResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_images_count(self) -> int:
        """Gets the total_images_count of this DatasetStatsResultResult.


        :return: The total_images_count of this DatasetStatsResultResult.
        :rtype: int
        """
        return self._total_images_count

    @total_images_count.setter
    def total_images_count(self, total_images_count: int):
        """Sets the total_images_count of this DatasetStatsResultResult.


        :param total_images_count: The total_images_count of this DatasetStatsResultResult.
        :type total_images_count: int
        """

        self._total_images_count = total_images_count

    @property
    def pred(self) -> DataStatsPredGtResult:
        """Gets the pred of this DatasetStatsResultResult.


        :return: The pred of this DatasetStatsResultResult.
        :rtype: DataStatsPredGtResult
        """
        return self._pred

    @pred.setter
    def pred(self, pred: DataStatsPredGtResult):
        """Sets the pred of this DatasetStatsResultResult.


        :param pred: The pred of this DatasetStatsResultResult.
        :type pred: DataStatsPredGtResult
        """

        self._pred = pred

    @property
    def gt(self) -> DataStatsPredGtResult:
        """Gets the gt of this DatasetStatsResultResult.


        :return: The gt of this DatasetStatsResultResult.
        :rtype: DataStatsPredGtResult
        """
        return self._gt

    @gt.setter
    def gt(self, gt: DataStatsPredGtResult):
        """Sets the gt of this DatasetStatsResultResult.


        :param gt: The gt of this DatasetStatsResultResult.
        :type gt: DataStatsPredGtResult
        """

        self._gt = gt
