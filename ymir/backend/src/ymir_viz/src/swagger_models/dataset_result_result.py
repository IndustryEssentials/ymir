# coding: utf-8

from __future__ import absolute_import

from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401

from src import util
from src.swagger_models.assets_result_result_negative_info import AssetsResultResultNegativeInfo  # noqa: F401,E501
from src.swagger_models.base_model_ import Model


class DatasetResultResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_ids_count: object=None, ignored_labels: object=None, negative_info: AssetsResultResultNegativeInfo=None):  # noqa: E501
        """DatasetResultResult - a model defined in Swagger

        :param class_ids_count: The class_ids_count of this DatasetResultResult.  # noqa: E501
        :type class_ids_count: object
        :param ignored_labels: The ignored_labels of this DatasetResultResult.  # noqa: E501
        :type ignored_labels: object
        :param negative_info: The negative_info of this DatasetResultResult.  # noqa: E501
        :type negative_info: AssetsResultResultNegativeInfo
        """
        self.swagger_types = {
            'class_ids_count': object,
            'ignored_labels': object,
            'negative_info': AssetsResultResultNegativeInfo
        }

        self.attribute_map = {
            'class_ids_count': 'class_ids_count',
            'ignored_labels': 'ignored_labels',
            'negative_info': 'negative_info'
        }
        self._class_ids_count = class_ids_count
        self._ignored_labels = ignored_labels
        self._negative_info = negative_info

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetResultResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetResult_result of this DatasetResultResult.  # noqa: E501
        :rtype: DatasetResultResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_ids_count(self) -> object:
        """Gets the class_ids_count of this DatasetResultResult.


        :return: The class_ids_count of this DatasetResultResult.
        :rtype: object
        """
        return self._class_ids_count

    @class_ids_count.setter
    def class_ids_count(self, class_ids_count: object):
        """Sets the class_ids_count of this DatasetResultResult.


        :param class_ids_count: The class_ids_count of this DatasetResultResult.
        :type class_ids_count: object
        """

        self._class_ids_count = class_ids_count

    @property
    def ignored_labels(self) -> object:
        """Gets the ignored_labels of this DatasetResultResult.


        :return: The ignored_labels of this DatasetResultResult.
        :rtype: object
        """
        return self._ignored_labels

    @ignored_labels.setter
    def ignored_labels(self, ignored_labels: object):
        """Sets the ignored_labels of this DatasetResultResult.


        :param ignored_labels: The ignored_labels of this DatasetResultResult.
        :type ignored_labels: object
        """

        self._ignored_labels = ignored_labels

    @property
    def negative_info(self) -> AssetsResultResultNegativeInfo:
        """Gets the negative_info of this DatasetResultResult.


        :return: The negative_info of this DatasetResultResult.
        :rtype: AssetsResultResultNegativeInfo
        """
        return self._negative_info

    @negative_info.setter
    def negative_info(self, negative_info: AssetsResultResultNegativeInfo):
        """Sets the negative_info of this DatasetResultResult.


        :param negative_info: The negative_info of this DatasetResultResult.
        :type negative_info: AssetsResultResultNegativeInfo
        """

        self._negative_info = negative_info
