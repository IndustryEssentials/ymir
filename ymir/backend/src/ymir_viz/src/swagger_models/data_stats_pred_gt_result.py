# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.swagger_models.base_model_ import Model
from src import util


class DataStatsPredGtResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_ids_count: object=None, negative_images_cnt: int=None, positive_images_cnt: int=None):  # noqa: E501
        """DataStatsPredGtResult - a model defined in Swagger

        :param class_ids_count: The class_ids_count of this DataStatsPredGtResult.  # noqa: E501
        :type class_ids_count: object
        :param negative_images_cnt: The negative_images_cnt of this DataStatsPredGtResult.  # noqa: E501
        :type negative_images_cnt: int
        :param positive_images_cnt: The positive_images_cnt of this DataStatsPredGtResult.  # noqa: E501
        :type positive_images_cnt: int
        """
        self.swagger_types = {
            'class_ids_count': object,
            'negative_images_cnt': int,
            'positive_images_cnt': int
        }

        self.attribute_map = {
            'class_ids_count': 'class_ids_count',
            'negative_images_cnt': 'negative_images_cnt',
            'positive_images_cnt': 'positive_images_cnt'
        }
        self._class_ids_count = class_ids_count
        self._negative_images_cnt = negative_images_cnt
        self._positive_images_cnt = positive_images_cnt

    @classmethod
    def from_dict(cls, dikt) -> 'DataStatsPredGtResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataStatsPredGtResult of this DataStatsPredGtResult.  # noqa: E501
        :rtype: DataStatsPredGtResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_ids_count(self) -> object:
        """Gets the class_ids_count of this DataStatsPredGtResult.


        :return: The class_ids_count of this DataStatsPredGtResult.
        :rtype: object
        """
        return self._class_ids_count

    @class_ids_count.setter
    def class_ids_count(self, class_ids_count: object):
        """Sets the class_ids_count of this DataStatsPredGtResult.


        :param class_ids_count: The class_ids_count of this DataStatsPredGtResult.
        :type class_ids_count: object
        """

        self._class_ids_count = class_ids_count

    @property
    def negative_images_cnt(self) -> int:
        """Gets the negative_images_cnt of this DataStatsPredGtResult.


        :return: The negative_images_cnt of this DataStatsPredGtResult.
        :rtype: int
        """
        return self._negative_images_cnt

    @negative_images_cnt.setter
    def negative_images_cnt(self, negative_images_cnt: int):
        """Sets the negative_images_cnt of this DataStatsPredGtResult.


        :param negative_images_cnt: The negative_images_cnt of this DataStatsPredGtResult.
        :type negative_images_cnt: int
        """

        self._negative_images_cnt = negative_images_cnt

    @property
    def positive_images_cnt(self) -> int:
        """Gets the positive_images_cnt of this DataStatsPredGtResult.


        :return: The positive_images_cnt of this DataStatsPredGtResult.
        :rtype: int
        """
        return self._positive_images_cnt

    @positive_images_cnt.setter
    def positive_images_cnt(self, positive_images_cnt: int):
        """Sets the positive_images_cnt of this DataStatsPredGtResult.


        :param positive_images_cnt: The positive_images_cnt of this DataStatsPredGtResult.
        :type positive_images_cnt: int
        """

        self._positive_images_cnt = positive_images_cnt
