# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from src.swagger_models.base_model_ import Model
from src.swagger_models.dataset_evaluation_ck_element import DatasetEvaluationCkElement  # noqa: F401,E501
from src.swagger_models.dataset_evaluation_element import DatasetEvaluationElement  # noqa: F401,E501
from src import util


class DatasetEvaluation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, ci_evaluations: Dict[str, DatasetEvaluationElement]=None, ci_averaged_evaluation: DatasetEvaluationElement=None, ck_evaluations: Dict[str, DatasetEvaluationCkElement]=None):  # noqa: E501
        """DatasetEvaluation - a model defined in Swagger

        :param ci_evaluations: The ci_evaluations of this DatasetEvaluation.  # noqa: E501
        :type ci_evaluations: Dict[str, DatasetEvaluationElement]
        :param ci_averaged_evaluation: The ci_averaged_evaluation of this DatasetEvaluation.  # noqa: E501
        :type ci_averaged_evaluation: DatasetEvaluationElement
        :param ck_evaluations: The ck_evaluations of this DatasetEvaluation.  # noqa: E501
        :type ck_evaluations: Dict[str, DatasetEvaluationCkElement]
        """
        self.swagger_types = {
            'ci_evaluations': Dict[str, DatasetEvaluationElement],
            'ci_averaged_evaluation': DatasetEvaluationElement,
            'ck_evaluations': Dict[str, DatasetEvaluationCkElement]
        }

        self.attribute_map = {
            'ci_evaluations': 'ci_evaluations',
            'ci_averaged_evaluation': 'ci_averaged_evaluation',
            'ck_evaluations': 'ck_evaluations'
        }
        self._ci_evaluations = ci_evaluations
        self._ci_averaged_evaluation = ci_averaged_evaluation
        self._ck_evaluations = ck_evaluations

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetEvaluation of this DatasetEvaluation.  # noqa: E501
        :rtype: DatasetEvaluation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ci_evaluations(self) -> Dict[str, DatasetEvaluationElement]:
        """Gets the ci_evaluations of this DatasetEvaluation.


        :return: The ci_evaluations of this DatasetEvaluation.
        :rtype: Dict[str, DatasetEvaluationElement]
        """
        return self._ci_evaluations

    @ci_evaluations.setter
    def ci_evaluations(self, ci_evaluations: Dict[str, DatasetEvaluationElement]):
        """Sets the ci_evaluations of this DatasetEvaluation.


        :param ci_evaluations: The ci_evaluations of this DatasetEvaluation.
        :type ci_evaluations: Dict[str, DatasetEvaluationElement]
        """

        self._ci_evaluations = ci_evaluations

    @property
    def ci_averaged_evaluation(self) -> DatasetEvaluationElement:
        """Gets the ci_averaged_evaluation of this DatasetEvaluation.


        :return: The ci_averaged_evaluation of this DatasetEvaluation.
        :rtype: DatasetEvaluationElement
        """
        return self._ci_averaged_evaluation

    @ci_averaged_evaluation.setter
    def ci_averaged_evaluation(self, ci_averaged_evaluation: DatasetEvaluationElement):
        """Sets the ci_averaged_evaluation of this DatasetEvaluation.


        :param ci_averaged_evaluation: The ci_averaged_evaluation of this DatasetEvaluation.
        :type ci_averaged_evaluation: DatasetEvaluationElement
        """

        self._ci_averaged_evaluation = ci_averaged_evaluation

    @property
    def ck_evaluations(self) -> Dict[str, DatasetEvaluationCkElement]:
        """Gets the ck_evaluations of this DatasetEvaluation.


        :return: The ck_evaluations of this DatasetEvaluation.
        :rtype: Dict[str, DatasetEvaluationCkElement]
        """
        return self._ck_evaluations

    @ck_evaluations.setter
    def ck_evaluations(self, ck_evaluations: Dict[str, DatasetEvaluationCkElement]):
        """Sets the ck_evaluations of this DatasetEvaluation.


        :param ck_evaluations: The ck_evaluations of this DatasetEvaluation.
        :type ck_evaluations: Dict[str, DatasetEvaluationCkElement]
        """

        self._ck_evaluations = ck_evaluations
