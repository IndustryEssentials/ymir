// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: mir_command.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// assertion type: training, validation or test
type TvtType int32

const (
	TvtType_TvtTypeUnknown    TvtType = 0
	TvtType_TvtTypeTraining   TvtType = 1
	TvtType_TvtTypeValidation TvtType = 2
	TvtType_TvtTypeTest       TvtType = 3
)

// Enum value maps for TvtType.
var (
	TvtType_name = map[int32]string{
		0: "TvtTypeUnknown",
		1: "TvtTypeTraining",
		2: "TvtTypeValidation",
		3: "TvtTypeTest",
	}
	TvtType_value = map[string]int32{
		"TvtTypeUnknown":    0,
		"TvtTypeTraining":   1,
		"TvtTypeValidation": 2,
		"TvtTypeTest":       3,
	}
)

func (x TvtType) Enum() *TvtType {
	p := new(TvtType)
	*p = x
	return p
}

func (x TvtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TvtType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[0].Descriptor()
}

func (TvtType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[0]
}

func (x TvtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TvtType.Descriptor instead.
func (TvtType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{0}
}

type AssetType int32

const (
	AssetType_AssetTypeUnknown       AssetType = 0
	AssetType_AssetTypeImageJpeg     AssetType = 1
	AssetType_AssetTypeImagePng      AssetType = 2
	AssetType_AssetTypeImagePixelMat AssetType = 3
	AssetType_AssetTypeImageYuv420p  AssetType = 4
	AssetType_AssetTypeImageYuv420sp AssetType = 5
	AssetType_AssetTypeImageYuv422p  AssetType = 6
	AssetType_AssetTypeImageYuv422sp AssetType = 7
	AssetType_AssetTypeImageBmp      AssetType = 8
	AssetType_AssetTypeVideoMp4      AssetType = 101
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0:   "AssetTypeUnknown",
		1:   "AssetTypeImageJpeg",
		2:   "AssetTypeImagePng",
		3:   "AssetTypeImagePixelMat",
		4:   "AssetTypeImageYuv420p",
		5:   "AssetTypeImageYuv420sp",
		6:   "AssetTypeImageYuv422p",
		7:   "AssetTypeImageYuv422sp",
		8:   "AssetTypeImageBmp",
		101: "AssetTypeVideoMp4",
	}
	AssetType_value = map[string]int32{
		"AssetTypeUnknown":       0,
		"AssetTypeImageJpeg":     1,
		"AssetTypeImagePng":      2,
		"AssetTypeImagePixelMat": 3,
		"AssetTypeImageYuv420p":  4,
		"AssetTypeImageYuv420sp": 5,
		"AssetTypeImageYuv422p":  6,
		"AssetTypeImageYuv422sp": 7,
		"AssetTypeImageBmp":      8,
		"AssetTypeVideoMp4":      101,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[1].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[1]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{1}
}

/// task type
type TaskType int32

const (
	TaskType_TaskTypeUnknown    TaskType = 0
	TaskType_TaskTypeTraining   TaskType = 1
	TaskType_TaskTypeMining     TaskType = 2
	TaskType_TaskTypeLabel      TaskType = 3
	TaskType_TaskTypeFilter     TaskType = 4
	TaskType_TaskTypeImportData TaskType = 5
	TaskType_TaskTypeExportData TaskType = 6
	TaskType_TaskTypeCopyData   TaskType = 7
	TaskType_TaskTypeMerge      TaskType = 8
	TaskType_TaskTypeInfer      TaskType = 9
	TaskType_TaskTypeSampling   TaskType = 10
	/// used by ymir_controller
	TaskType_TaskTypeFusion        TaskType = 11
	TaskType_TaskTypeInit          TaskType = 12
	TaskType_TaskTypeImportModel   TaskType = 13
	TaskType_TaskTypeCopyModel     TaskType = 14
	TaskType_TaskTypeDatasetInfer  TaskType = 15
	TaskType_TaskTypeEvaluate      TaskType = 16
	TaskType_TaskTypeVisualization TaskType = 17
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "TaskTypeUnknown",
		1:  "TaskTypeTraining",
		2:  "TaskTypeMining",
		3:  "TaskTypeLabel",
		4:  "TaskTypeFilter",
		5:  "TaskTypeImportData",
		6:  "TaskTypeExportData",
		7:  "TaskTypeCopyData",
		8:  "TaskTypeMerge",
		9:  "TaskTypeInfer",
		10: "TaskTypeSampling",
		11: "TaskTypeFusion",
		12: "TaskTypeInit",
		13: "TaskTypeImportModel",
		14: "TaskTypeCopyModel",
		15: "TaskTypeDatasetInfer",
		16: "TaskTypeEvaluate",
		17: "TaskTypeVisualization",
	}
	TaskType_value = map[string]int32{
		"TaskTypeUnknown":       0,
		"TaskTypeTraining":      1,
		"TaskTypeMining":        2,
		"TaskTypeLabel":         3,
		"TaskTypeFilter":        4,
		"TaskTypeImportData":    5,
		"TaskTypeExportData":    6,
		"TaskTypeCopyData":      7,
		"TaskTypeMerge":         8,
		"TaskTypeInfer":         9,
		"TaskTypeSampling":      10,
		"TaskTypeFusion":        11,
		"TaskTypeInit":          12,
		"TaskTypeImportModel":   13,
		"TaskTypeCopyModel":     14,
		"TaskTypeDatasetInfer":  15,
		"TaskTypeEvaluate":      16,
		"TaskTypeVisualization": 17,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[2].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[2]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{2}
}

type TaskState int32

const (
	TaskState_TaskStateUnknown TaskState = 0
	TaskState_TaskStatePending TaskState = 1
	TaskState_TaskStateRunning TaskState = 2
	TaskState_TaskStateDone    TaskState = 3
	TaskState_TaskStateError   TaskState = 4
	TaskState_TaskStateMiss    TaskState = 5
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0: "TaskStateUnknown",
		1: "TaskStatePending",
		2: "TaskStateRunning",
		3: "TaskStateDone",
		4: "TaskStateError",
		5: "TaskStateMiss",
	}
	TaskState_value = map[string]int32{
		"TaskStateUnknown": 0,
		"TaskStatePending": 1,
		"TaskStateRunning": 2,
		"TaskStateDone":    3,
		"TaskStateError":   4,
		"TaskStateMiss":    5,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[3].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[3]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{3}
}

type Sha1Type int32

const (
	Sha1Type_SHA1_TYPE_UNKNOWN Sha1Type = 0
	Sha1Type_SHA1_TYPE_ASSET   Sha1Type = 1
	Sha1Type_SHA1_TYPE_COMMIT  Sha1Type = 2
)

// Enum value maps for Sha1Type.
var (
	Sha1Type_name = map[int32]string{
		0: "SHA1_TYPE_UNKNOWN",
		1: "SHA1_TYPE_ASSET",
		2: "SHA1_TYPE_COMMIT",
	}
	Sha1Type_value = map[string]int32{
		"SHA1_TYPE_UNKNOWN": 0,
		"SHA1_TYPE_ASSET":   1,
		"SHA1_TYPE_COMMIT":  2,
	}
)

func (x Sha1Type) Enum() *Sha1Type {
	p := new(Sha1Type)
	*p = x
	return p
}

func (x Sha1Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sha1Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[4].Descriptor()
}

func (Sha1Type) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[4]
}

func (x Sha1Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sha1Type.Descriptor instead.
func (Sha1Type) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{4}
}

type MirStorage int32

const (
	MirStorage_MIR_METADATAS   MirStorage = 0
	MirStorage_MIR_ANNOTATIONS MirStorage = 1
	MirStorage_MIR_KEYWORDS    MirStorage = 2
	MirStorage_MIR_TASKS       MirStorage = 3
	MirStorage_MIR_CONTEXT     MirStorage = 4
)

// Enum value maps for MirStorage.
var (
	MirStorage_name = map[int32]string{
		0: "MIR_METADATAS",
		1: "MIR_ANNOTATIONS",
		2: "MIR_KEYWORDS",
		3: "MIR_TASKS",
		4: "MIR_CONTEXT",
	}
	MirStorage_value = map[string]int32{
		"MIR_METADATAS":   0,
		"MIR_ANNOTATIONS": 1,
		"MIR_KEYWORDS":    2,
		"MIR_TASKS":       3,
		"MIR_CONTEXT":     4,
	}
)

func (x MirStorage) Enum() *MirStorage {
	p := new(MirStorage)
	*p = x
	return p
}

func (x MirStorage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirStorage) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[5].Descriptor()
}

func (MirStorage) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[5]
}

func (x MirStorage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirStorage.Descriptor instead.
func (MirStorage) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{5}
}

type LabelFormat int32

const (
	LabelFormat_NO_ANNOTATION     LabelFormat = 0
	LabelFormat_PASCAL_VOC        LabelFormat = 1
	LabelFormat_IF_ARK            LabelFormat = 2
	LabelFormat_LABEL_STUDIO_JSON LabelFormat = 3
)

// Enum value maps for LabelFormat.
var (
	LabelFormat_name = map[int32]string{
		0: "NO_ANNOTATION",
		1: "PASCAL_VOC",
		2: "IF_ARK",
		3: "LABEL_STUDIO_JSON",
	}
	LabelFormat_value = map[string]int32{
		"NO_ANNOTATION":     0,
		"PASCAL_VOC":        1,
		"IF_ARK":            2,
		"LABEL_STUDIO_JSON": 3,
	}
)

func (x LabelFormat) Enum() *LabelFormat {
	p := new(LabelFormat)
	*p = x
	return p
}

func (x LabelFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[6].Descriptor()
}

func (LabelFormat) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[6]
}

func (x LabelFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelFormat.Descriptor instead.
func (LabelFormat) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{6}
}

type ConfusionMatrixType int32

const (
	ConfusionMatrixType_NotSet  ConfusionMatrixType = 0
	ConfusionMatrixType_TP      ConfusionMatrixType = 1
	ConfusionMatrixType_FP      ConfusionMatrixType = 2
	ConfusionMatrixType_FN      ConfusionMatrixType = 3
	ConfusionMatrixType_TN      ConfusionMatrixType = 4
	ConfusionMatrixType_Unknown ConfusionMatrixType = 5
	// Matched True Positive, only for gt.
	ConfusionMatrixType_MTP     ConfusionMatrixType = 11
	ConfusionMatrixType_IGNORED ConfusionMatrixType = 12
)

// Enum value maps for ConfusionMatrixType.
var (
	ConfusionMatrixType_name = map[int32]string{
		0:  "NotSet",
		1:  "TP",
		2:  "FP",
		3:  "FN",
		4:  "TN",
		5:  "Unknown",
		11: "MTP",
		12: "IGNORED",
	}
	ConfusionMatrixType_value = map[string]int32{
		"NotSet":  0,
		"TP":      1,
		"FP":      2,
		"FN":      3,
		"TN":      4,
		"Unknown": 5,
		"MTP":     11,
		"IGNORED": 12,
	}
)

func (x ConfusionMatrixType) Enum() *ConfusionMatrixType {
	p := new(ConfusionMatrixType)
	*p = x
	return p
}

func (x ConfusionMatrixType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfusionMatrixType) Descriptor() protoreflect.EnumDescriptor {
	return file_mir_command_proto_enumTypes[7].Descriptor()
}

func (ConfusionMatrixType) Type() protoreflect.EnumType {
	return &file_mir_command_proto_enumTypes[7]
}

func (x ConfusionMatrixType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfusionMatrixType.Descriptor instead.
func (ConfusionMatrixType) EnumDescriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{7}
}

/// ========== metadatas.mir ==========
type MirMetadatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// key: asset hash, value: attributes
	Attributes map[string]*MetadataAttributes `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirMetadatas) Reset() {
	*x = MirMetadatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirMetadatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirMetadatas) ProtoMessage() {}

func (x *MirMetadatas) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirMetadatas.ProtoReflect.Descriptor instead.
func (*MirMetadatas) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{0}
}

func (x *MirMetadatas) GetAttributes() map[string]*MetadataAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type MetadataAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetName   string     `protobuf:"bytes,1,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	Timestamp     *Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TvtType       TvtType    `protobuf:"varint,3,opt,name=tvt_type,json=tvtType,proto3,enum=mir.command.TvtType" json:"tvt_type,omitempty"`
	AssetType     AssetType  `protobuf:"varint,4,opt,name=asset_type,json=assetType,proto3,enum=mir.command.AssetType" json:"asset_type,omitempty"`
	Width         int32      `protobuf:"varint,5,opt,name=width,proto3" json:"width,omitempty"`                                      /// column number
	Height        int32      `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`                                    /// row number
	ImageChannels int32      `protobuf:"varint,7,opt,name=image_channels,json=imageChannels,proto3" json:"image_channels,omitempty"` /// (for images) channel count
	ByteSize      int32      `protobuf:"varint,8,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (x *MetadataAttributes) Reset() {
	*x = MetadataAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataAttributes) ProtoMessage() {}

func (x *MetadataAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataAttributes.ProtoReflect.Descriptor instead.
func (*MetadataAttributes) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{1}
}

func (x *MetadataAttributes) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *MetadataAttributes) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetadataAttributes) GetTvtType() TvtType {
	if x != nil {
		return x.TvtType
	}
	return TvtType_TvtTypeUnknown
}

func (x *MetadataAttributes) GetAssetType() AssetType {
	if x != nil {
		return x.AssetType
	}
	return AssetType_AssetTypeUnknown
}

func (x *MetadataAttributes) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MetadataAttributes) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MetadataAttributes) GetImageChannels() int32 {
	if x != nil {
		return x.ImageChannels
	}
	return 0
}

func (x *MetadataAttributes) GetByteSize() int32 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// start time stamp
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	/// duration (in seconds), for images, it's always 0
	Duration float32 `protobuf:"fixed32,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{2}
}

func (x *Timestamp) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Timestamp) GetDuration() float32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

/// ========== annotations.mir ==========
type MirAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadTaskId  string                 `protobuf:"bytes,2,opt,name=head_task_id,json=headTaskId,proto3" json:"head_task_id,omitempty"`
	GroundTruth *SingleTaskAnnotations `protobuf:"bytes,3,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	Prediction  *SingleTaskAnnotations `protobuf:"bytes,4,opt,name=prediction,proto3" json:"prediction,omitempty"`
	// key: asset id, value: cks and image quality, from pred and gt
	ImageCks map[string]*SingleImageCks `protobuf:"bytes,5,rep,name=image_cks,json=imageCks,proto3" json:"image_cks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirAnnotations) Reset() {
	*x = MirAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirAnnotations) ProtoMessage() {}

func (x *MirAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirAnnotations.ProtoReflect.Descriptor instead.
func (*MirAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{3}
}

func (x *MirAnnotations) GetHeadTaskId() string {
	if x != nil {
		return x.HeadTaskId
	}
	return ""
}

func (x *MirAnnotations) GetGroundTruth() *SingleTaskAnnotations {
	if x != nil {
		return x.GroundTruth
	}
	return nil
}

func (x *MirAnnotations) GetPrediction() *SingleTaskAnnotations {
	if x != nil {
		return x.Prediction
	}
	return nil
}

func (x *MirAnnotations) GetImageCks() map[string]*SingleImageCks {
	if x != nil {
		return x.ImageCks
	}
	return nil
}

type SingleTaskAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// key: image id, value: annotations of that single image
	ImageAnnotations map[string]*SingleImageAnnotations `protobuf:"bytes,1,rep,name=image_annotations,json=imageAnnotations,proto3" json:"image_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TaskId           string                             `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *SingleTaskAnnotations) Reset() {
	*x = SingleTaskAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTaskAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTaskAnnotations) ProtoMessage() {}

func (x *SingleTaskAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTaskAnnotations.ProtoReflect.Descriptor instead.
func (*SingleTaskAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{4}
}

func (x *SingleTaskAnnotations) GetImageAnnotations() map[string]*SingleImageAnnotations {
	if x != nil {
		return x.ImageAnnotations
	}
	return nil
}

func (x *SingleTaskAnnotations) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type SingleImageAnnotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *SingleImageAnnotations) Reset() {
	*x = SingleImageAnnotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleImageAnnotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleImageAnnotations) ProtoMessage() {}

func (x *SingleImageAnnotations) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleImageAnnotations.ProtoReflect.Descriptor instead.
func (*SingleImageAnnotations) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{5}
}

func (x *SingleImageAnnotations) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type SingleImageCks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cks          map[string]string `protobuf:"bytes,1,rep,name=cks,proto3" json:"cks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImageQuality float32           `protobuf:"fixed32,2,opt,name=image_quality,json=imageQuality,proto3" json:"image_quality,omitempty"`
}

func (x *SingleImageCks) Reset() {
	*x = SingleImageCks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleImageCks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleImageCks) ProtoMessage() {}

func (x *SingleImageCks) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleImageCks.ProtoReflect.Descriptor instead.
func (*SingleImageCks) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{6}
}

func (x *SingleImageCks) GetCks() map[string]string {
	if x != nil {
		return x.Cks
	}
	return nil
}

func (x *SingleImageCks) GetImageQuality() float32 {
	if x != nil {
		return x.ImageQuality
	}
	return 0
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of this annotation in current single image, may be different from the index in repeated field.
	Index       int32               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Box         *Rect               `protobuf:"bytes,2,opt,name=box,proto3" json:"box,omitempty"`
	ClassId     int32               `protobuf:"varint,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Score       float64             `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
	AnnoQuality float32             `protobuf:"fixed32,5,opt,name=anno_quality,json=annoQuality,proto3" json:"anno_quality,omitempty"`
	Tags        map[string]string   `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cm          ConfusionMatrixType `protobuf:"varint,7,opt,name=cm,proto3,enum=mir.command.ConfusionMatrixType" json:"cm,omitempty"`
	DetLinkId   int32               `protobuf:"varint,8,opt,name=det_link_id,json=detLinkId,proto3" json:"det_link_id,omitempty"`
	ClassName   string              `protobuf:"bytes,9,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"` // for data parsed from outside, e.g. inference.
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{7}
}

func (x *Annotation) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Annotation) GetBox() *Rect {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *Annotation) GetClassId() int32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *Annotation) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Annotation) GetAnnoQuality() float32 {
	if x != nil {
		return x.AnnoQuality
	}
	return 0
}

func (x *Annotation) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Annotation) GetCm() ConfusionMatrixType {
	if x != nil {
		return x.Cm
	}
	return ConfusionMatrixType_NotSet
}

func (x *Annotation) GetDetLinkId() int32 {
	if x != nil {
		return x.DetLinkId
	}
	return 0
}

func (x *Annotation) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

type Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X           int32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y           int32   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W           int32   `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H           int32   `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	RotateAngle float32 `protobuf:"fixed32,5,opt,name=rotate_angle,json=rotateAngle,proto3" json:"rotate_angle,omitempty"` // unit in pi.
}

func (x *Rect) Reset() {
	*x = Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{8}
}

func (x *Rect) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rect) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rect) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Rect) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Rect) GetRotateAngle() float32 {
	if x != nil {
		return x.RotateAngle
	}
	return 0
}

/// ========== keywords.mir ==========
type MirKeywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: asset hash, value: keywords list
	Keywords map[string]*Keywords `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PredIdx  *KeywordToIndex      `protobuf:"bytes,7,opt,name=pred_idx,json=predIdx,proto3" json:"pred_idx,omitempty"` // ci to assets, generated from preds
	GtIdx    *KeywordToIndex      `protobuf:"bytes,8,opt,name=gt_idx,json=gtIdx,proto3" json:"gt_idx,omitempty"`       // ci to assets, generated from gt
	// key: ck main key, value: assets and assets with sub keys, from (mir_annotations.image_cks) pred and gt
	CkIdx map[string]*AssetAnnoIndex `protobuf:"bytes,9,rep,name=ck_idx,json=ckIdx,proto3" json:"ck_idx,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MirKeywords) Reset() {
	*x = MirKeywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirKeywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirKeywords) ProtoMessage() {}

func (x *MirKeywords) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirKeywords.ProtoReflect.Descriptor instead.
func (*MirKeywords) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{9}
}

func (x *MirKeywords) GetKeywords() map[string]*Keywords {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *MirKeywords) GetPredIdx() *KeywordToIndex {
	if x != nil {
		return x.PredIdx
	}
	return nil
}

func (x *MirKeywords) GetGtIdx() *KeywordToIndex {
	if x != nil {
		return x.GtIdx
	}
	return nil
}

func (x *MirKeywords) GetCkIdx() map[string]*AssetAnnoIndex {
	if x != nil {
		return x.CkIdx
	}
	return nil
}

type KeywordToIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key: ci, value: annos
	Cis map[int32]*MapStringToInt32List `protobuf:"bytes,1,rep,name=cis,proto3" json:"cis,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// key: ck main key, value: annos and annos with sub keys
	Tags map[string]*AssetAnnoIndex `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KeywordToIndex) Reset() {
	*x = KeywordToIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeywordToIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeywordToIndex) ProtoMessage() {}

func (x *KeywordToIndex) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeywordToIndex.ProtoReflect.Descriptor instead.
func (*KeywordToIndex) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{10}
}

func (x *KeywordToIndex) GetCis() map[int32]*MapStringToInt32List {
	if x != nil {
		return x.Cis
	}
	return nil
}

func (x *KeywordToIndex) GetTags() map[string]*AssetAnnoIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds []string `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{11}
}

func (x *StringList) GetAssetIds() []string {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

type MapStringToInt32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyIds map[string]*Int32List `protobuf:"bytes,1,rep,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringToInt32List) Reset() {
	*x = MapStringToInt32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringToInt32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringToInt32List) ProtoMessage() {}

func (x *MapStringToInt32List) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringToInt32List.ProtoReflect.Descriptor instead.
func (*MapStringToInt32List) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{12}
}

func (x *MapStringToInt32List) GetKeyIds() map[string]*Int32List {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{13}
}

func (x *Int32List) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type Keywords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// class ids for predictions
	PredefinedKeyids []int32 `protobuf:"varint,1,rep,packed,name=predefined_keyids,json=predefinedKeyids,proto3" json:"predefined_keyids,omitempty"`
	// class ids for ground truth
	GtPredefinedKeyids []int32 `protobuf:"varint,2,rep,packed,name=gt_predefined_keyids,json=gtPredefinedKeyids,proto3" json:"gt_predefined_keyids,omitempty"`
}

func (x *Keywords) Reset() {
	*x = Keywords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keywords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keywords) ProtoMessage() {}

func (x *Keywords) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keywords.ProtoReflect.Descriptor instead.
func (*Keywords) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{14}
}

func (x *Keywords) GetPredefinedKeyids() []int32 {
	if x != nil {
		return x.PredefinedKeyids
	}
	return nil
}

func (x *Keywords) GetGtPredefinedKeyids() []int32 {
	if x != nil {
		return x.GtPredefinedKeyids
	}
	return nil
}

type AssetAnnoIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetAnnos map[string]*Int32List            `protobuf:"bytes,1,rep,name=asset_annos,json=assetAnnos,proto3" json:"asset_annos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: asset id, value: annotation indexes
	SubIndexes map[string]*MapStringToInt32List `protobuf:"bytes,2,rep,name=sub_indexes,json=subIndexes,proto3" json:"sub_indexes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: ck value, value: asset and it's annotation indexes
}

func (x *AssetAnnoIndex) Reset() {
	*x = AssetAnnoIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetAnnoIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetAnnoIndex) ProtoMessage() {}

func (x *AssetAnnoIndex) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetAnnoIndex.ProtoReflect.Descriptor instead.
func (*AssetAnnoIndex) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{15}
}

func (x *AssetAnnoIndex) GetAssetAnnos() map[string]*Int32List {
	if x != nil {
		return x.AssetAnnos
	}
	return nil
}

func (x *AssetAnnoIndex) GetSubIndexes() map[string]*MapStringToInt32List {
	if x != nil {
		return x.SubIndexes
	}
	return nil
}

/// ========== tasks.mir ==========
type MirTasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks      map[string]*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HeadTaskId string           `protobuf:"bytes,2,opt,name=head_task_id,json=headTaskId,proto3" json:"head_task_id,omitempty"`
}

func (x *MirTasks) Reset() {
	*x = MirTasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirTasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirTasks) ProtoMessage() {}

func (x *MirTasks) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirTasks.ProtoReflect.Descriptor instead.
func (*MirTasks) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{16}
}

func (x *MirTasks) GetTasks() map[string]*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *MirTasks) GetHeadTaskId() string {
	if x != nil {
		return x.HeadTaskId
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TaskType `protobuf:"varint,1,opt,name=type,proto3,enum=mir.command.TaskType" json:"type,omitempty"`
	/// user defined task name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	/// auto generated unique id
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	/// execution time of this task
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // RFC 3339 date strings
	/// (for training task): result model for cmd train
	Model      *ModelMeta  `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	ReturnCode int32       `protobuf:"varint,8,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg  string      `protobuf:"bytes,9,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Evaluation *Evaluation `protobuf:"bytes,10,opt,name=evaluation,proto3" json:"evaluation,omitempty"`
	/// (for import task): new types for cmd import, key: class name, value: asset count
	NewTypes map[string]int32 `protobuf:"bytes,11,rep,name=new_types,json=newTypes,proto3" json:"new_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	/// (for import task): reason for new types, True: added, False: ignored
	NewTypesAdded            bool   `protobuf:"varint,12,opt,name=new_types_added,json=newTypesAdded,proto3" json:"new_types_added,omitempty"`
	SerializedTaskParameters string `protobuf:"bytes,102,opt,name=serialized_task_parameters,json=serializedTaskParameters,proto3" json:"serialized_task_parameters,omitempty"`
	SerializedExecutorConfig string `protobuf:"bytes,103,opt,name=serialized_executor_config,json=serializedExecutorConfig,proto3" json:"serialized_executor_config,omitempty"`
	SrcRevs                  string `protobuf:"bytes,104,opt,name=src_revs,json=srcRevs,proto3" json:"src_revs,omitempty"`
	DstRev                   string `protobuf:"bytes,105,opt,name=dst_rev,json=dstRev,proto3" json:"dst_rev,omitempty"`
	Executor                 string `protobuf:"bytes,106,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{17}
}

func (x *Task) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TaskTypeUnknown
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Task) GetModel() *ModelMeta {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *Task) GetReturnCode() int32 {
	if x != nil {
		return x.ReturnCode
	}
	return 0
}

func (x *Task) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *Task) GetEvaluation() *Evaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *Task) GetNewTypes() map[string]int32 {
	if x != nil {
		return x.NewTypes
	}
	return nil
}

func (x *Task) GetNewTypesAdded() bool {
	if x != nil {
		return x.NewTypesAdded
	}
	return false
}

func (x *Task) GetSerializedTaskParameters() string {
	if x != nil {
		return x.SerializedTaskParameters
	}
	return ""
}

func (x *Task) GetSerializedExecutorConfig() string {
	if x != nil {
		return x.SerializedExecutorConfig
	}
	return ""
}

func (x *Task) GetSrcRevs() string {
	if x != nil {
		return x.SrcRevs
	}
	return ""
}

func (x *Task) GetDstRev() string {
	if x != nil {
		return x.DstRev
	}
	return ""
}

func (x *Task) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

type ModelMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// hash for models.tar.gz
	ModelHash string `protobuf:"bytes,1,opt,name=model_hash,json=modelHash,proto3" json:"model_hash,omitempty"`
	/// model mAP
	MeanAveragePrecision float32 `protobuf:"fixed32,2,opt,name=mean_average_precision,json=meanAveragePrecision,proto3" json:"mean_average_precision,omitempty"`
	/// context generated by train command
	Context       string                 `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	Stages        map[string]*ModelStage `protobuf:"bytes,4,rep,name=stages,proto3" json:"stages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BestStageName string                 `protobuf:"bytes,5,opt,name=best_stage_name,json=bestStageName,proto3" json:"best_stage_name,omitempty"`
}

func (x *ModelMeta) Reset() {
	*x = ModelMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelMeta) ProtoMessage() {}

func (x *ModelMeta) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelMeta.ProtoReflect.Descriptor instead.
func (*ModelMeta) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{18}
}

func (x *ModelMeta) GetModelHash() string {
	if x != nil {
		return x.ModelHash
	}
	return ""
}

func (x *ModelMeta) GetMeanAveragePrecision() float32 {
	if x != nil {
		return x.MeanAveragePrecision
	}
	return 0
}

func (x *ModelMeta) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ModelMeta) GetStages() map[string]*ModelStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *ModelMeta) GetBestStageName() string {
	if x != nil {
		return x.BestStageName
	}
	return ""
}

type ModelStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageName string   `protobuf:"bytes,1,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	Files     []string `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MAP       float32  `protobuf:"fixed32,4,opt,name=mAP,proto3" json:"mAP,omitempty"`
}

func (x *ModelStage) Reset() {
	*x = ModelStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelStage) ProtoMessage() {}

func (x *ModelStage) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelStage.ProtoReflect.Descriptor instead.
func (*ModelStage) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{19}
}

func (x *ModelStage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *ModelStage) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ModelStage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ModelStage) GetMAP() float32 {
	if x != nil {
		return x.MAP
	}
	return 0
}

type Evaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *EvaluateConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// key: prediction dataset id, value: evaluation result for ground truth and prediction dataset
	// map<string, SingleDatasetEvaluation> dataset_evaluations = 2;
	DatasetEvaluation *SingleDatasetEvaluation `protobuf:"bytes,3,opt,name=dataset_evaluation,json=datasetEvaluation,proto3" json:"dataset_evaluation,omitempty"`
}

func (x *Evaluation) Reset() {
	*x = Evaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evaluation) ProtoMessage() {}

func (x *Evaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evaluation.ProtoReflect.Descriptor instead.
func (*Evaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{20}
}

func (x *Evaluation) GetConfig() *EvaluateConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Evaluation) GetDatasetEvaluation() *SingleDatasetEvaluation {
	if x != nil {
		return x.DatasetEvaluation
	}
	return nil
}

type EvaluateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// string gt_dataset_id = 1;
	// repeated string pred_dataset_ids = 2;
	ConfThr         float32 `protobuf:"fixed32,3,opt,name=conf_thr,json=confThr,proto3" json:"conf_thr,omitempty"`
	IouThrsInterval string  `protobuf:"bytes,4,opt,name=iou_thrs_interval,json=iouThrsInterval,proto3" json:"iou_thrs_interval,omitempty"`
	NeedPrCurve     bool    `protobuf:"varint,5,opt,name=need_pr_curve,json=needPrCurve,proto3" json:"need_pr_curve,omitempty"`
	ClassIds        []int32 `protobuf:"varint,7,rep,packed,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
}

func (x *EvaluateConfig) Reset() {
	*x = EvaluateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateConfig) ProtoMessage() {}

func (x *EvaluateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateConfig.ProtoReflect.Descriptor instead.
func (*EvaluateConfig) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{21}
}

func (x *EvaluateConfig) GetConfThr() float32 {
	if x != nil {
		return x.ConfThr
	}
	return 0
}

func (x *EvaluateConfig) GetIouThrsInterval() string {
	if x != nil {
		return x.IouThrsInterval
	}
	return ""
}

func (x *EvaluateConfig) GetNeedPrCurve() bool {
	if x != nil {
		return x.NeedPrCurve
	}
	return false
}

func (x *EvaluateConfig) GetClassIds() []int32 {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

type SingleDatasetEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfThr               float32                         `protobuf:"fixed32,1,opt,name=conf_thr,json=confThr,proto3" json:"conf_thr,omitempty"`
	GtDatasetId           string                          `protobuf:"bytes,2,opt,name=gt_dataset_id,json=gtDatasetId,proto3" json:"gt_dataset_id,omitempty"`
	PredDatasetId         string                          `protobuf:"bytes,3,opt,name=pred_dataset_id,json=predDatasetId,proto3" json:"pred_dataset_id,omitempty"`
	IouEvaluations        map[string]*SingleIouEvaluation `protobuf:"bytes,4,rep,name=iou_evaluations,json=iouEvaluations,proto3" json:"iou_evaluations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: string of iou threshold
	IouAveragedEvaluation *SingleIouEvaluation            `protobuf:"bytes,5,opt,name=iou_averaged_evaluation,json=iouAveragedEvaluation,proto3" json:"iou_averaged_evaluation,omitempty"`                                                                  // average for all ious
}

func (x *SingleDatasetEvaluation) Reset() {
	*x = SingleDatasetEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDatasetEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDatasetEvaluation) ProtoMessage() {}

func (x *SingleDatasetEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDatasetEvaluation.ProtoReflect.Descriptor instead.
func (*SingleDatasetEvaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{22}
}

func (x *SingleDatasetEvaluation) GetConfThr() float32 {
	if x != nil {
		return x.ConfThr
	}
	return 0
}

func (x *SingleDatasetEvaluation) GetGtDatasetId() string {
	if x != nil {
		return x.GtDatasetId
	}
	return ""
}

func (x *SingleDatasetEvaluation) GetPredDatasetId() string {
	if x != nil {
		return x.PredDatasetId
	}
	return ""
}

func (x *SingleDatasetEvaluation) GetIouEvaluations() map[string]*SingleIouEvaluation {
	if x != nil {
		return x.IouEvaluations
	}
	return nil
}

func (x *SingleDatasetEvaluation) GetIouAveragedEvaluation() *SingleIouEvaluation {
	if x != nil {
		return x.IouAveragedEvaluation
	}
	return nil
}

type SingleIouEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiEvaluations        map[int32]*SingleEvaluationElement     `protobuf:"bytes,1,rep,name=ci_evaluations,json=ciEvaluations,proto3" json:"ci_evaluations,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: class ids
	CiAveragedEvaluation *SingleEvaluationElement               `protobuf:"bytes,2,opt,name=ci_averaged_evaluation,json=ciAveragedEvaluation,proto3" json:"ci_averaged_evaluation,omitempty"`                                                                   // evaluations averaged by class ids
	CkEvaluations        map[string]*SingleCkTotalSubEvaluation `protobuf:"bytes,3,rep,name=ck_evaluations,json=ckEvaluations,proto3" json:"ck_evaluations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SingleIouEvaluation) Reset() {
	*x = SingleIouEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleIouEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleIouEvaluation) ProtoMessage() {}

func (x *SingleIouEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleIouEvaluation.ProtoReflect.Descriptor instead.
func (*SingleIouEvaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{23}
}

func (x *SingleIouEvaluation) GetCiEvaluations() map[int32]*SingleEvaluationElement {
	if x != nil {
		return x.CiEvaluations
	}
	return nil
}

func (x *SingleIouEvaluation) GetCiAveragedEvaluation() *SingleEvaluationElement {
	if x != nil {
		return x.CiAveragedEvaluation
	}
	return nil
}

func (x *SingleIouEvaluation) GetCkEvaluations() map[string]*SingleCkTotalSubEvaluation {
	if x != nil {
		return x.CkEvaluations
	}
	return nil
}

type SingleEvaluationElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ap      float32       `protobuf:"fixed32,1,opt,name=ap,proto3" json:"ap,omitempty"`
	Ar      float32       `protobuf:"fixed32,2,opt,name=ar,proto3" json:"ar,omitempty"`
	Tp      int32         `protobuf:"varint,3,opt,name=tp,proto3" json:"tp,omitempty"`
	Fp      int32         `protobuf:"varint,4,opt,name=fp,proto3" json:"fp,omitempty"`
	Fn      int32         `protobuf:"varint,5,opt,name=fn,proto3" json:"fn,omitempty"`
	PrCurve []*FloatPoint `protobuf:"bytes,6,rep,name=pr_curve,json=prCurve,proto3" json:"pr_curve,omitempty"`
}

func (x *SingleEvaluationElement) Reset() {
	*x = SingleEvaluationElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleEvaluationElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleEvaluationElement) ProtoMessage() {}

func (x *SingleEvaluationElement) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleEvaluationElement.ProtoReflect.Descriptor instead.
func (*SingleEvaluationElement) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{24}
}

func (x *SingleEvaluationElement) GetAp() float32 {
	if x != nil {
		return x.Ap
	}
	return 0
}

func (x *SingleEvaluationElement) GetAr() float32 {
	if x != nil {
		return x.Ar
	}
	return 0
}

func (x *SingleEvaluationElement) GetTp() int32 {
	if x != nil {
		return x.Tp
	}
	return 0
}

func (x *SingleEvaluationElement) GetFp() int32 {
	if x != nil {
		return x.Fp
	}
	return 0
}

func (x *SingleEvaluationElement) GetFn() int32 {
	if x != nil {
		return x.Fn
	}
	return 0
}

func (x *SingleEvaluationElement) GetPrCurve() []*FloatPoint {
	if x != nil {
		return x.PrCurve
	}
	return nil
}

type SingleCkTotalSubEvaluation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total *SingleEvaluationElement            `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	Sub   map[string]*SingleEvaluationElement `protobuf:"bytes,2,rep,name=sub,proto3" json:"sub,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SingleCkTotalSubEvaluation) Reset() {
	*x = SingleCkTotalSubEvaluation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleCkTotalSubEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleCkTotalSubEvaluation) ProtoMessage() {}

func (x *SingleCkTotalSubEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleCkTotalSubEvaluation.ProtoReflect.Descriptor instead.
func (*SingleCkTotalSubEvaluation) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{25}
}

func (x *SingleCkTotalSubEvaluation) GetTotal() *SingleEvaluationElement {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *SingleCkTotalSubEvaluation) GetSub() map[string]*SingleEvaluationElement {
	if x != nil {
		return x.Sub
	}
	return nil
}

type FloatPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *FloatPoint) Reset() {
	*x = FloatPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatPoint) ProtoMessage() {}

func (x *FloatPoint) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatPoint.ProtoReflect.Descriptor instead.
func (*FloatPoint) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{26}
}

func (x *FloatPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FloatPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *FloatPoint) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

/// ========== context.mir ==========
type MirContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// total images count
	ImagesCnt int32 `protobuf:"varint,1,opt,name=images_cnt,json=imagesCnt,proto3" json:"images_cnt,omitempty"`
	/// total negative images count (images without any annotations), from pred
	NegativeImagesCnt int32 `protobuf:"varint,2,opt,name=negative_images_cnt,json=negativeImagesCnt,proto3" json:"negative_images_cnt,omitempty"`
	/// total negative images count (images without any project class names), from pred
	ProjectNegativeImagesCnt int32 `protobuf:"varint,3,opt,name=project_negative_images_cnt,json=projectNegativeImagesCnt,proto3" json:"project_negative_images_cnt,omitempty"`
	/// key: class id, value: images count, from pred
	PredefinedKeyidsCnt map[int32]int32 `protobuf:"bytes,4,rep,name=predefined_keyids_cnt,json=predefinedKeyidsCnt,proto3" json:"predefined_keyids_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	/// key: class id (only in this project), value: images count, from pred
	ProjectPredefinedKeyidsCnt map[int32]int32 `protobuf:"bytes,5,rep,name=project_predefined_keyids_cnt,json=projectPredefinedKeyidsCnt,proto3" json:"project_predefined_keyids_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	/// from pred and gt
	CksCnt           map[string]*SingleMapCount `protobuf:"bytes,6,rep,name=cks_cnt,json=cksCnt,proto3" json:"cks_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AssetQualityHist map[string]int32           `protobuf:"bytes,8,rep,name=asset_quality_hist,json=assetQualityHist,proto3" json:"asset_quality_hist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`    // key: 0 (lower bnd), 0.1, 0.2, ..., 0.9, 1.0, increment 0.1
	AssetAreaHist    map[int32]int32            `protobuf:"bytes,9,rep,name=asset_area_hist,json=assetAreaHist,proto3" json:"asset_area_hist,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`            // key: 0 (lower bnd), 10, 50, 100, 200, 400, 600, 800, unit: 10000 pixels
	AssetBytesHist   map[string]int32           `protobuf:"bytes,10,rep,name=asset_bytes_hist,json=assetBytesHist,proto3" json:"asset_bytes_hist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`         // key: 0, 0.5, ..., 5, unit: mbytes
	AssetHwRatioHist map[string]int32           `protobuf:"bytes,12,rep,name=asset_hw_ratio_hist,json=assetHwRatioHist,proto3" json:"asset_hw_ratio_hist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // height / width ratio histgram, key: 0, 0.1, 0.2, ..., 1.5
	TotalAssetMbytes int32                      `protobuf:"varint,11,opt,name=total_asset_mbytes,json=totalAssetMbytes,proto3" json:"total_asset_mbytes,omitempty"`
	PredStats        *AnnoStats                 `protobuf:"bytes,100,opt,name=pred_stats,json=predStats,proto3" json:"pred_stats,omitempty"`
	GtStats          *AnnoStats                 `protobuf:"bytes,101,opt,name=gt_stats,json=gtStats,proto3" json:"gt_stats,omitempty"`
}

func (x *MirContext) Reset() {
	*x = MirContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirContext) ProtoMessage() {}

func (x *MirContext) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirContext.ProtoReflect.Descriptor instead.
func (*MirContext) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{27}
}

func (x *MirContext) GetImagesCnt() int32 {
	if x != nil {
		return x.ImagesCnt
	}
	return 0
}

func (x *MirContext) GetNegativeImagesCnt() int32 {
	if x != nil {
		return x.NegativeImagesCnt
	}
	return 0
}

func (x *MirContext) GetProjectNegativeImagesCnt() int32 {
	if x != nil {
		return x.ProjectNegativeImagesCnt
	}
	return 0
}

func (x *MirContext) GetPredefinedKeyidsCnt() map[int32]int32 {
	if x != nil {
		return x.PredefinedKeyidsCnt
	}
	return nil
}

func (x *MirContext) GetProjectPredefinedKeyidsCnt() map[int32]int32 {
	if x != nil {
		return x.ProjectPredefinedKeyidsCnt
	}
	return nil
}

func (x *MirContext) GetCksCnt() map[string]*SingleMapCount {
	if x != nil {
		return x.CksCnt
	}
	return nil
}

func (x *MirContext) GetAssetQualityHist() map[string]int32 {
	if x != nil {
		return x.AssetQualityHist
	}
	return nil
}

func (x *MirContext) GetAssetAreaHist() map[int32]int32 {
	if x != nil {
		return x.AssetAreaHist
	}
	return nil
}

func (x *MirContext) GetAssetBytesHist() map[string]int32 {
	if x != nil {
		return x.AssetBytesHist
	}
	return nil
}

func (x *MirContext) GetAssetHwRatioHist() map[string]int32 {
	if x != nil {
		return x.AssetHwRatioHist
	}
	return nil
}

func (x *MirContext) GetTotalAssetMbytes() int32 {
	if x != nil {
		return x.TotalAssetMbytes
	}
	return 0
}

func (x *MirContext) GetPredStats() *AnnoStats {
	if x != nil {
		return x.PredStats
	}
	return nil
}

func (x *MirContext) GetGtStats() *AnnoStats {
	if x != nil {
		return x.GtStats
	}
	return nil
}

type SingleMapCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cnt    int32            `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	SubCnt map[string]int32 `protobuf:"bytes,2,rep,name=sub_cnt,json=subCnt,proto3" json:"sub_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SingleMapCount) Reset() {
	*x = SingleMapCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleMapCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleMapCount) ProtoMessage() {}

func (x *SingleMapCount) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleMapCount.ProtoReflect.Descriptor instead.
func (*SingleMapCount) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{28}
}

func (x *SingleMapCount) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *SingleMapCount) GetSubCnt() map[string]int32 {
	if x != nil {
		return x.SubCnt
	}
	return nil
}

type AnnoStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCnt         int32                      `protobuf:"varint,1,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`
	PositiveAssetCnt int32                      `protobuf:"varint,2,opt,name=positive_asset_cnt,json=positiveAssetCnt,proto3" json:"positive_asset_cnt,omitempty"`
	NegativeAssetCnt int32                      `protobuf:"varint,3,opt,name=negative_asset_cnt,json=negativeAssetCnt,proto3" json:"negative_asset_cnt,omitempty"`
	QualityHist      map[string]int32           `protobuf:"bytes,4,rep,name=quality_hist,json=qualityHist,proto3" json:"quality_hist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`         // key: 0 (lower bnd), 0.1, 0.2, ..., 0.9, 1.0, increment 0.1
	AreaHist         map[int32]int32            `protobuf:"bytes,5,rep,name=area_hist,json=areaHist,proto3" json:"area_hist,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                 // ranges: 0 (lower bnd), 50, 500, 2500, 5000, 10000, 50000, 100000, 200000
	AreaRatioHist    map[string]int32           `protobuf:"bytes,6,rep,name=area_ratio_hist,json=areaRatioHist,proto3" json:"area_ratio_hist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // key: 0 (lower bnd), 0.1, 0.2, ..., 0.9, 1.0, increment 0.1
	TagsCnt          map[string]*SingleMapCount `protobuf:"bytes,7,rep,name=tags_cnt,json=tagsCnt,proto3" json:"tags_cnt,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                      // key: main tag name, value: main tag count and sub tag names and counts
	ClassIdsCnt      map[int32]int32            `protobuf:"bytes,8,rep,name=class_ids_cnt,json=classIdsCnt,proto3" json:"class_ids_cnt,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`      // key: class ids, value: asset count for this class id
}

func (x *AnnoStats) Reset() {
	*x = AnnoStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mir_command_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnoStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnoStats) ProtoMessage() {}

func (x *AnnoStats) ProtoReflect() protoreflect.Message {
	mi := &file_mir_command_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnoStats.ProtoReflect.Descriptor instead.
func (*AnnoStats) Descriptor() ([]byte, []int) {
	return file_mir_command_proto_rawDescGZIP(), []int{29}
}

func (x *AnnoStats) GetTotalCnt() int32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *AnnoStats) GetPositiveAssetCnt() int32 {
	if x != nil {
		return x.PositiveAssetCnt
	}
	return 0
}

func (x *AnnoStats) GetNegativeAssetCnt() int32 {
	if x != nil {
		return x.NegativeAssetCnt
	}
	return 0
}

func (x *AnnoStats) GetQualityHist() map[string]int32 {
	if x != nil {
		return x.QualityHist
	}
	return nil
}

func (x *AnnoStats) GetAreaHist() map[int32]int32 {
	if x != nil {
		return x.AreaHist
	}
	return nil
}

func (x *AnnoStats) GetAreaRatioHist() map[string]int32 {
	if x != nil {
		return x.AreaRatioHist
	}
	return nil
}

func (x *AnnoStats) GetTagsCnt() map[string]*SingleMapCount {
	if x != nil {
		return x.TagsCnt
	}
	return nil
}

func (x *AnnoStats) GetClassIdsCnt() map[int32]int32 {
	if x != nil {
		return x.ClassIdsCnt
	}
	return nil
}

var File_mir_command_proto protoreflect.FileDescriptor

var file_mir_command_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a,
	0x12, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x08,
	0x74, 0x76, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x76, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x72, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74,
	0x68, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x1a, 0x58, 0x0a,
	0x0d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x81, 0x02,
	0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x68, 0x0a, 0x15, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x59, 0x0a, 0x16, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xa5, 0x01, 0x0a,
	0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x12,
	0x36, 0x0a, 0x03, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6b, 0x73, 0x2e, 0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x36, 0x0a, 0x08,
	0x43, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x02, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x03, 0x62, 0x6f, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x63, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x63, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x64, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x0b, 0x4d, 0x69, 0x72, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x70, 0x72, 0x65, 0x64, 0x49,
	0x64, 0x78, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x05, 0x67, 0x74, 0x49, 0x64, 0x78, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x43, 0x6b, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6b, 0x49,
	0x64, 0x78, 0x1a, 0x52, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0a, 0x43, 0x6b, 0x49, 0x64, 0x78, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a,
	0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xb4, 0x02, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36,
	0x0a, 0x03, 0x63, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x43, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x63, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x59, 0x0a, 0x08, 0x43, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x29, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0xb1, 0x01,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x6f, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x51,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x69, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x67, 0x74, 0x50, 0x72, 0x65, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c,
	0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x73, 0x12, 0x4c, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53,
	0x75, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x60, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x4d, 0x69, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x36, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x68, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x4b, 0x0a, 0x0a, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaa, 0x05, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x4d, 0x73, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x76, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x52, 0x65, 0x76, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x64, 0x10, 0x65, 0x4a, 0x04,
	0x08, 0x65, 0x10, 0x66, 0x22, 0xb2, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x52, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x0a, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x41,
	0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x41, 0x50, 0x22, 0x9c, 0x01, 0x0a,
	0x0a, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x53, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xaa, 0x01, 0x0a, 0x0e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x68, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6f, 0x75,
	0x5f, 0x74, 0x68, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6f, 0x75, 0x54, 0x68, 0x72, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65,
	0x65, 0x64, 0x50, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xa2, 0x03, 0x0a, 0x17, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x74, 0x68, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x54, 0x68, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x67, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0f, 0x69,
	0x6f, 0x75, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6f, 0x75, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x69, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58,
	0x0a, 0x17, 0x69, 0x6f, 0x75, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x15, 0x69, 0x6f, 0x75, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x63, 0x0a, 0x13, 0x49, 0x6f, 0x75, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x03,
	0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x69, 0x5f, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x63, 0x69, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5a, 0x0a, 0x16, 0x63, 0x69, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x63, 0x69, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a,
	0x0e, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6f, 0x75, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6b, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x66, 0x0a, 0x12, 0x43, 0x69, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x69, 0x0a, 0x12, 0x43, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a,
	0x17, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x61, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x74, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x5f, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x22, 0xfa, 0x01, 0x0a,
	0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75,
	0x62, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x73, 0x75, 0x62, 0x1a, 0x5c, 0x0a, 0x08, 0x53,
	0x75, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x7a, 0x22, 0xbc, 0x0b, 0x0a, 0x0a, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x64,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x69, 0x64, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x13, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64,
	0x73, 0x43, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x69, 0x64,
	0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6b, 0x73, 0x43, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6b, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x5b,
	0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x48, 0x69, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x48, 0x69, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x68, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x4d, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x48, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x48, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x07, 0x67, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x46, 0x0a, 0x18,
	0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73,
	0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x69, 0x64, 0x73, 0x43,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0b, 0x43, 0x6b, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x48, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x48, 0x77,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x73, 0x75, 0x62, 0x43, 0x6e, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x43, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xcb, 0x06, 0x0a, 0x09, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e,
	0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x41, 0x72, 0x65, 0x61, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x48, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x72,
	0x65, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x74,
	0x61, 0x67, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x74, 0x61, 0x67, 0x73, 0x43, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x49, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x72, 0x65, 0x61,
	0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x72, 0x65, 0x61, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x73, 0x43,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x43, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x5a, 0x0a, 0x07, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x76, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x73, 0x74, 0x10, 0x03, 0x2a, 0x88, 0x02, 0x0a,
	0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4a, 0x70, 0x65, 0x67, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59, 0x75, 0x76,
	0x34, 0x32, 0x30, 0x70, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59, 0x75, 0x76, 0x34, 0x32, 0x30, 0x73, 0x70,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x59, 0x75, 0x76, 0x34, 0x32, 0x32, 0x70, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x59,
	0x75, 0x76, 0x34, 0x32, 0x32, 0x73, 0x70, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x6d, 0x70, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x70, 0x34, 0x10, 0x65, 0x2a, 0x93, 0x03, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0b,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x69, 0x74,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11, 0x2a, 0x87, 0x01,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x10, 0x05, 0x2a, 0x4c, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x31, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x41, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x48, 0x41, 0x31, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x0a, 0x4d, 0x69, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x49, 0x52, 0x5f, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x49, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x49, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x2a, 0x53, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x53, 0x43, 0x41, 0x4c, 0x5f, 0x56, 0x4f, 0x43, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x46, 0x5f, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x03, 0x2a, 0x64, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x74, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x50, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x46, 0x50, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x46, 0x4e, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x54, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x54, 0x50, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mir_command_proto_rawDescOnce sync.Once
	file_mir_command_proto_rawDescData = file_mir_command_proto_rawDesc
)

func file_mir_command_proto_rawDescGZIP() []byte {
	file_mir_command_proto_rawDescOnce.Do(func() {
		file_mir_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_mir_command_proto_rawDescData)
	})
	return file_mir_command_proto_rawDescData
}

var file_mir_command_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mir_command_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_mir_command_proto_goTypes = []interface{}{
	(TvtType)(0),                       // 0: mir.command.TvtType
	(AssetType)(0),                     // 1: mir.command.AssetType
	(TaskType)(0),                      // 2: mir.command.TaskType
	(TaskState)(0),                     // 3: mir.command.TaskState
	(Sha1Type)(0),                      // 4: mir.command.Sha1Type
	(MirStorage)(0),                    // 5: mir.command.MirStorage
	(LabelFormat)(0),                   // 6: mir.command.LabelFormat
	(ConfusionMatrixType)(0),           // 7: mir.command.ConfusionMatrixType
	(*MirMetadatas)(nil),               // 8: mir.command.MirMetadatas
	(*MetadataAttributes)(nil),         // 9: mir.command.MetadataAttributes
	(*Timestamp)(nil),                  // 10: mir.command.Timestamp
	(*MirAnnotations)(nil),             // 11: mir.command.MirAnnotations
	(*SingleTaskAnnotations)(nil),      // 12: mir.command.SingleTaskAnnotations
	(*SingleImageAnnotations)(nil),     // 13: mir.command.SingleImageAnnotations
	(*SingleImageCks)(nil),             // 14: mir.command.SingleImageCks
	(*Annotation)(nil),                 // 15: mir.command.Annotation
	(*Rect)(nil),                       // 16: mir.command.Rect
	(*MirKeywords)(nil),                // 17: mir.command.MirKeywords
	(*KeywordToIndex)(nil),             // 18: mir.command.KeywordToIndex
	(*StringList)(nil),                 // 19: mir.command.StringList
	(*MapStringToInt32List)(nil),       // 20: mir.command.MapStringToInt32List
	(*Int32List)(nil),                  // 21: mir.command.Int32List
	(*Keywords)(nil),                   // 22: mir.command.Keywords
	(*AssetAnnoIndex)(nil),             // 23: mir.command.AssetAnnoIndex
	(*MirTasks)(nil),                   // 24: mir.command.MirTasks
	(*Task)(nil),                       // 25: mir.command.Task
	(*ModelMeta)(nil),                  // 26: mir.command.ModelMeta
	(*ModelStage)(nil),                 // 27: mir.command.ModelStage
	(*Evaluation)(nil),                 // 28: mir.command.Evaluation
	(*EvaluateConfig)(nil),             // 29: mir.command.EvaluateConfig
	(*SingleDatasetEvaluation)(nil),    // 30: mir.command.SingleDatasetEvaluation
	(*SingleIouEvaluation)(nil),        // 31: mir.command.SingleIouEvaluation
	(*SingleEvaluationElement)(nil),    // 32: mir.command.SingleEvaluationElement
	(*SingleCkTotalSubEvaluation)(nil), // 33: mir.command.SingleCkTotalSubEvaluation
	(*FloatPoint)(nil),                 // 34: mir.command.FloatPoint
	(*MirContext)(nil),                 // 35: mir.command.MirContext
	(*SingleMapCount)(nil),             // 36: mir.command.SingleMapCount
	(*AnnoStats)(nil),                  // 37: mir.command.AnnoStats
	nil,                                // 38: mir.command.MirMetadatas.AttributesEntry
	nil,                                // 39: mir.command.MirAnnotations.ImageCksEntry
	nil,                                // 40: mir.command.SingleTaskAnnotations.ImageAnnotationsEntry
	nil,                                // 41: mir.command.SingleImageCks.CksEntry
	nil,                                // 42: mir.command.Annotation.TagsEntry
	nil,                                // 43: mir.command.MirKeywords.KeywordsEntry
	nil,                                // 44: mir.command.MirKeywords.CkIdxEntry
	nil,                                // 45: mir.command.KeywordToIndex.CisEntry
	nil,                                // 46: mir.command.KeywordToIndex.TagsEntry
	nil,                                // 47: mir.command.MapStringToInt32List.KeyIdsEntry
	nil,                                // 48: mir.command.AssetAnnoIndex.AssetAnnosEntry
	nil,                                // 49: mir.command.AssetAnnoIndex.SubIndexesEntry
	nil,                                // 50: mir.command.MirTasks.TasksEntry
	nil,                                // 51: mir.command.Task.NewTypesEntry
	nil,                                // 52: mir.command.ModelMeta.StagesEntry
	nil,                                // 53: mir.command.SingleDatasetEvaluation.IouEvaluationsEntry
	nil,                                // 54: mir.command.SingleIouEvaluation.CiEvaluationsEntry
	nil,                                // 55: mir.command.SingleIouEvaluation.CkEvaluationsEntry
	nil,                                // 56: mir.command.SingleCkTotalSubEvaluation.SubEntry
	nil,                                // 57: mir.command.MirContext.PredefinedKeyidsCntEntry
	nil,                                // 58: mir.command.MirContext.ProjectPredefinedKeyidsCntEntry
	nil,                                // 59: mir.command.MirContext.CksCntEntry
	nil,                                // 60: mir.command.MirContext.AssetQualityHistEntry
	nil,                                // 61: mir.command.MirContext.AssetAreaHistEntry
	nil,                                // 62: mir.command.MirContext.AssetBytesHistEntry
	nil,                                // 63: mir.command.MirContext.AssetHwRatioHistEntry
	nil,                                // 64: mir.command.SingleMapCount.SubCntEntry
	nil,                                // 65: mir.command.AnnoStats.QualityHistEntry
	nil,                                // 66: mir.command.AnnoStats.AreaHistEntry
	nil,                                // 67: mir.command.AnnoStats.AreaRatioHistEntry
	nil,                                // 68: mir.command.AnnoStats.TagsCntEntry
	nil,                                // 69: mir.command.AnnoStats.ClassIdsCntEntry
}
var file_mir_command_proto_depIdxs = []int32{
	38, // 0: mir.command.MirMetadatas.attributes:type_name -> mir.command.MirMetadatas.AttributesEntry
	10, // 1: mir.command.MetadataAttributes.timestamp:type_name -> mir.command.Timestamp
	0,  // 2: mir.command.MetadataAttributes.tvt_type:type_name -> mir.command.TvtType
	1,  // 3: mir.command.MetadataAttributes.asset_type:type_name -> mir.command.AssetType
	12, // 4: mir.command.MirAnnotations.ground_truth:type_name -> mir.command.SingleTaskAnnotations
	12, // 5: mir.command.MirAnnotations.prediction:type_name -> mir.command.SingleTaskAnnotations
	39, // 6: mir.command.MirAnnotations.image_cks:type_name -> mir.command.MirAnnotations.ImageCksEntry
	40, // 7: mir.command.SingleTaskAnnotations.image_annotations:type_name -> mir.command.SingleTaskAnnotations.ImageAnnotationsEntry
	15, // 8: mir.command.SingleImageAnnotations.annotations:type_name -> mir.command.Annotation
	41, // 9: mir.command.SingleImageCks.cks:type_name -> mir.command.SingleImageCks.CksEntry
	16, // 10: mir.command.Annotation.box:type_name -> mir.command.Rect
	42, // 11: mir.command.Annotation.tags:type_name -> mir.command.Annotation.TagsEntry
	7,  // 12: mir.command.Annotation.cm:type_name -> mir.command.ConfusionMatrixType
	43, // 13: mir.command.MirKeywords.keywords:type_name -> mir.command.MirKeywords.KeywordsEntry
	18, // 14: mir.command.MirKeywords.pred_idx:type_name -> mir.command.KeywordToIndex
	18, // 15: mir.command.MirKeywords.gt_idx:type_name -> mir.command.KeywordToIndex
	44, // 16: mir.command.MirKeywords.ck_idx:type_name -> mir.command.MirKeywords.CkIdxEntry
	45, // 17: mir.command.KeywordToIndex.cis:type_name -> mir.command.KeywordToIndex.CisEntry
	46, // 18: mir.command.KeywordToIndex.tags:type_name -> mir.command.KeywordToIndex.TagsEntry
	47, // 19: mir.command.MapStringToInt32List.key_ids:type_name -> mir.command.MapStringToInt32List.KeyIdsEntry
	48, // 20: mir.command.AssetAnnoIndex.asset_annos:type_name -> mir.command.AssetAnnoIndex.AssetAnnosEntry
	49, // 21: mir.command.AssetAnnoIndex.sub_indexes:type_name -> mir.command.AssetAnnoIndex.SubIndexesEntry
	50, // 22: mir.command.MirTasks.tasks:type_name -> mir.command.MirTasks.TasksEntry
	2,  // 23: mir.command.Task.type:type_name -> mir.command.TaskType
	26, // 24: mir.command.Task.model:type_name -> mir.command.ModelMeta
	28, // 25: mir.command.Task.evaluation:type_name -> mir.command.Evaluation
	51, // 26: mir.command.Task.new_types:type_name -> mir.command.Task.NewTypesEntry
	52, // 27: mir.command.ModelMeta.stages:type_name -> mir.command.ModelMeta.StagesEntry
	29, // 28: mir.command.Evaluation.config:type_name -> mir.command.EvaluateConfig
	30, // 29: mir.command.Evaluation.dataset_evaluation:type_name -> mir.command.SingleDatasetEvaluation
	53, // 30: mir.command.SingleDatasetEvaluation.iou_evaluations:type_name -> mir.command.SingleDatasetEvaluation.IouEvaluationsEntry
	31, // 31: mir.command.SingleDatasetEvaluation.iou_averaged_evaluation:type_name -> mir.command.SingleIouEvaluation
	54, // 32: mir.command.SingleIouEvaluation.ci_evaluations:type_name -> mir.command.SingleIouEvaluation.CiEvaluationsEntry
	32, // 33: mir.command.SingleIouEvaluation.ci_averaged_evaluation:type_name -> mir.command.SingleEvaluationElement
	55, // 34: mir.command.SingleIouEvaluation.ck_evaluations:type_name -> mir.command.SingleIouEvaluation.CkEvaluationsEntry
	34, // 35: mir.command.SingleEvaluationElement.pr_curve:type_name -> mir.command.FloatPoint
	32, // 36: mir.command.SingleCkTotalSubEvaluation.total:type_name -> mir.command.SingleEvaluationElement
	56, // 37: mir.command.SingleCkTotalSubEvaluation.sub:type_name -> mir.command.SingleCkTotalSubEvaluation.SubEntry
	57, // 38: mir.command.MirContext.predefined_keyids_cnt:type_name -> mir.command.MirContext.PredefinedKeyidsCntEntry
	58, // 39: mir.command.MirContext.project_predefined_keyids_cnt:type_name -> mir.command.MirContext.ProjectPredefinedKeyidsCntEntry
	59, // 40: mir.command.MirContext.cks_cnt:type_name -> mir.command.MirContext.CksCntEntry
	60, // 41: mir.command.MirContext.asset_quality_hist:type_name -> mir.command.MirContext.AssetQualityHistEntry
	61, // 42: mir.command.MirContext.asset_area_hist:type_name -> mir.command.MirContext.AssetAreaHistEntry
	62, // 43: mir.command.MirContext.asset_bytes_hist:type_name -> mir.command.MirContext.AssetBytesHistEntry
	63, // 44: mir.command.MirContext.asset_hw_ratio_hist:type_name -> mir.command.MirContext.AssetHwRatioHistEntry
	37, // 45: mir.command.MirContext.pred_stats:type_name -> mir.command.AnnoStats
	37, // 46: mir.command.MirContext.gt_stats:type_name -> mir.command.AnnoStats
	64, // 47: mir.command.SingleMapCount.sub_cnt:type_name -> mir.command.SingleMapCount.SubCntEntry
	65, // 48: mir.command.AnnoStats.quality_hist:type_name -> mir.command.AnnoStats.QualityHistEntry
	66, // 49: mir.command.AnnoStats.area_hist:type_name -> mir.command.AnnoStats.AreaHistEntry
	67, // 50: mir.command.AnnoStats.area_ratio_hist:type_name -> mir.command.AnnoStats.AreaRatioHistEntry
	68, // 51: mir.command.AnnoStats.tags_cnt:type_name -> mir.command.AnnoStats.TagsCntEntry
	69, // 52: mir.command.AnnoStats.class_ids_cnt:type_name -> mir.command.AnnoStats.ClassIdsCntEntry
	9,  // 53: mir.command.MirMetadatas.AttributesEntry.value:type_name -> mir.command.MetadataAttributes
	14, // 54: mir.command.MirAnnotations.ImageCksEntry.value:type_name -> mir.command.SingleImageCks
	13, // 55: mir.command.SingleTaskAnnotations.ImageAnnotationsEntry.value:type_name -> mir.command.SingleImageAnnotations
	22, // 56: mir.command.MirKeywords.KeywordsEntry.value:type_name -> mir.command.Keywords
	23, // 57: mir.command.MirKeywords.CkIdxEntry.value:type_name -> mir.command.AssetAnnoIndex
	20, // 58: mir.command.KeywordToIndex.CisEntry.value:type_name -> mir.command.MapStringToInt32List
	23, // 59: mir.command.KeywordToIndex.TagsEntry.value:type_name -> mir.command.AssetAnnoIndex
	21, // 60: mir.command.MapStringToInt32List.KeyIdsEntry.value:type_name -> mir.command.Int32List
	21, // 61: mir.command.AssetAnnoIndex.AssetAnnosEntry.value:type_name -> mir.command.Int32List
	20, // 62: mir.command.AssetAnnoIndex.SubIndexesEntry.value:type_name -> mir.command.MapStringToInt32List
	25, // 63: mir.command.MirTasks.TasksEntry.value:type_name -> mir.command.Task
	27, // 64: mir.command.ModelMeta.StagesEntry.value:type_name -> mir.command.ModelStage
	31, // 65: mir.command.SingleDatasetEvaluation.IouEvaluationsEntry.value:type_name -> mir.command.SingleIouEvaluation
	32, // 66: mir.command.SingleIouEvaluation.CiEvaluationsEntry.value:type_name -> mir.command.SingleEvaluationElement
	33, // 67: mir.command.SingleIouEvaluation.CkEvaluationsEntry.value:type_name -> mir.command.SingleCkTotalSubEvaluation
	32, // 68: mir.command.SingleCkTotalSubEvaluation.SubEntry.value:type_name -> mir.command.SingleEvaluationElement
	36, // 69: mir.command.MirContext.CksCntEntry.value:type_name -> mir.command.SingleMapCount
	36, // 70: mir.command.AnnoStats.TagsCntEntry.value:type_name -> mir.command.SingleMapCount
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_mir_command_proto_init() }
func file_mir_command_proto_init() {
	if File_mir_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mir_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirMetadatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTaskAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleImageAnnotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleImageCks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirKeywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeywordToIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringToInt32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keywords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetAnnoIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirTasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDatasetEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleIouEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleEvaluationElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleCkTotalSubEvaluation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleMapCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mir_command_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnoStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mir_command_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mir_command_proto_goTypes,
		DependencyIndexes: file_mir_command_proto_depIdxs,
		EnumInfos:         file_mir_command_proto_enumTypes,
		MessageInfos:      file_mir_command_proto_msgTypes,
	}.Build()
	File_mir_command_proto = out.File
	file_mir_command_proto_rawDesc = nil
	file_mir_command_proto_goTypes = nil
	file_mir_command_proto_depIdxs = nil
}
