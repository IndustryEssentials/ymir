"""add user and role table

Revision ID: 4a002517f2a9
Revises:
Create Date: 2023-03-06 16:53:22.469390

"""
import os

from alembic import op
import sqlalchemy as sa
from sqlalchemy import engine_from_config
from sqlalchemy.engine import reflection


# revision identifiers, used by Alembic.
revision = "4a002517f2a9"
down_revision = None
branch_labels = None
depends_on = None


def table_exist(table, schema=None):
    config = op.get_context().config
    config = config.get_section(config.config_ini_section)
    config["sqlalchemy.url"] = os.getenv("DATABASE_URI", "sqlite:///auth.db")
    engine = engine_from_config(config, prefix="sqlalchemy.")
    insp = reflection.Inspector.from_engine(engine)
    return insp.has_table(table, schema)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exist("role"):
        op.create_table(
            "role",
            sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
            sa.Column("name", sa.String(length=100), nullable=True),
            sa.Column("description", sa.String(length=100), nullable=True),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("role", schema=None) as batch_op:
            batch_op.create_index(batch_op.f("ix_role_id"), ["id"], unique=False)
            batch_op.create_index(batch_op.f("ix_role_name"), ["name"], unique=False)

    if not table_exist("user"):
        op.create_table(
            "user",
            sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
            sa.Column("email", sa.String(length=100), nullable=False),
            sa.Column("username", sa.String(length=100), nullable=True),
            sa.Column("phone", sa.String(length=20), nullable=True),
            sa.Column("avatar", sa.String(length=100), nullable=True),
            sa.Column("hashed_password", sa.String(length=200), nullable=False),
            sa.Column("state", sa.Integer(), nullable=True),
            sa.Column("role", sa.Integer(), nullable=True),
            sa.Column("organization", sa.String(length=100), nullable=True),
            sa.Column("scene", sa.String(length=500), nullable=True),
            sa.Column("uuid", sa.String(length=36), nullable=False),
            sa.Column("is_deleted", sa.Boolean(), nullable=True),
            sa.Column("last_login_datetime", sa.DateTime(), nullable=True),
            sa.Column("create_datetime", sa.DateTime(), nullable=False),
            sa.Column("update_datetime", sa.DateTime(), nullable=False),
            sa.PrimaryKeyConstraint("id"),
        )
        with op.batch_alter_table("user", schema=None) as batch_op:
            batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)
            batch_op.create_index(batch_op.f("ix_user_id"), ["id"], unique=False)
            batch_op.create_index(batch_op.f("ix_user_phone"), ["phone"], unique=True)
            batch_op.create_index(batch_op.f("ix_user_role"), ["role"], unique=False)
            batch_op.create_index(batch_op.f("ix_user_state"), ["state"], unique=False)
            batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.drop_index(batch_op.f("ix_user_state"))
        batch_op.drop_index(batch_op.f("ix_user_role"))
        batch_op.drop_index(batch_op.f("ix_user_phone"))
        batch_op.drop_index(batch_op.f("ix_user_id"))
        batch_op.drop_index(batch_op.f("ix_user_email"))

    op.drop_table("user")
    with op.batch_alter_table("role", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_role_name"))
        batch_op.drop_index(batch_op.f("ix_role_id"))

    op.drop_table("role")
    # ### end Alembic commands ###
