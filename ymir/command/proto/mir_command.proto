syntax = "proto3";

package mir.command;

/// assertion type: training, validation or test
enum TvtType {
    TvtTypeUnknown = 0;
    TvtTypeTraining = 1;
    TvtTypeValidation = 2;
    TvtTypeTest = 3;
};

enum AssetType {
    AssetTypeUnknown = 0;
    AssetTypeImageJpeg = 1;
    AssetTypeImagePng = 2;
    AssetTypeImagePixelMat = 3;
    AssetTypeImageYuv420p = 4;
    AssetTypeImageYuv420sp = 5;
    AssetTypeImageYuv422p = 6;
    AssetTypeImageYuv422sp = 7;
    AssetTypeImageBmp = 8;
    AssetTypeVideoMp4 = 101;
};

/// task type
enum TaskType {
    TaskTypeUnknown = 0;
    TaskTypeTraining = 1;
    TaskTypeMining = 2;
    TaskTypeLabel = 3;
    TaskTypeFilter = 4;
    TaskTypeImportData = 5;
    TaskTypeExportData = 6;
    TaskTypeCopyData = 7;
    TaskTypeMerge = 8;
    TaskTypeInfer = 9;
    TaskTypeSampling = 10;
    /// used by ymir_controller
    TaskTypeFusion = 11;
    TaskTypeInit = 12;
    TaskTypeImportModel = 13;
    TaskTypeEvaluate = 16;

    reserved 14, 15;
};

enum TaskState {
    TaskStateUnknown = 0;
    TaskStatePending = 1;
    TaskStateRunning = 2;
    TaskStateDone = 3;
    TaskStateError = 4;
    TaskStateMiss = 5;
};

enum Sha1Type {
    SHA1_TYPE_UNKNOWN = 0;
    SHA1_TYPE_ASSET = 1;
    SHA1_TYPE_COMMIT = 2;
}

enum MirStorage {
    MIR_METADATAS = 0;
    MIR_ANNOTATIONS = 1;
    MIR_KEYWORDS = 2;
    MIR_TASKS = 3;
    MIR_CONTEXT = 4;
}

enum LabelFormat {
    NO_ANNOTATION = 0;
    PASCAL_VOC = 1;
    IF_ARK = 2;
};

/// ========== metadatas.mir ==========
message MirMetadatas {
    /// key: asset hash, value: attributes
    map<string, MetadataAttributes> attributes = 1;
};

message MetadataAttributes {
    string dataset_name = 1;
    Timestamp timestamp = 2;
    TvtType tvt_type = 3;
    AssetType asset_type = 4;
    int32 width = 5;  /// column number
    int32 height = 6;  /// row number
    int32 image_channels = 7;  /// (for images) channel count
};

message Timestamp {
    /// start time stamp
    int64 start = 1;
    /// duration (in seconds), for images, it's always 0
    float duration = 2;
};

/// ========== annotations.mir ==========
message MirAnnotations {
    /// key: task id, value: annotations of that single task
    map<string, SingleTaskAnnotations> task_annotations = 1;
    string head_task_id = 2;
    SingleTaskAnnotations ground_truth = 3;
    SingleTaskAnnotations prediction = 4;
};

message SingleTaskAnnotations {
    /// key: image id, value: annotations of that single image
    map<string, SingleImageAnnotations> image_annotations = 1;
    string task_id = 2;
};

message SingleImageAnnotations {
    repeated Annotation annotations = 2;
    CustomizedKeywords customized_keywords = 3;
};

message Annotation {
    // Index of this annotation in current single image, may be different from the index in repeated field.
    int32 index = 1;
    Rect box = 2;
    int32 class_id = 3;
    double score = 4;
    CustomizedKeywords tags = 5;
};

message Rect {
    int32 x = 1;
    int32 y = 2;
    int32 w = 3;
    int32 h = 4;
};

// continous or discrete customized keywords
// for continous cks:
//     they have a string key and float value
//     for example: {image_quality: 0.75}, {fp: 0}, {fn: 1}
// for discrete cks:
//     they have a string key and string value
//     for example: {color: red}, {camera: camera0}
// cks can be associated to both image and box
message CustomizedKeywords {
    map<string, string> discrete = 1;
    map<string, float> continous = 2;
}

/// ========== keywords.mir ==========
message MirKeywords {
    // key: asset hash, value: keywords list
    // cnt: count of keywords
    map<string, Keywords> keywords = 1;
    // key: class id, value: assert ids
    map<int32, Assets> index_predefined_keyids = 6;

    KeywordIndexedAssets pred_idx = 7;
    KeywordIndexedAssets gt_idx = 8;

    reserved 2, 3, 4, 5;
};

message KeywordIndexedAssets {
    // key: ci, value: assets
    map<int32, Assets> cis = 1;
    // key: ck main key, value: assets and assets of sub keys
    map<string, SingleCkAssets> cks = 2;
};

message Assets {
    repeated string asset_ids = 1;
};

message Keywords {
    // predefined: managed id-keyword map
    repeated int32 predefined_keyids = 1;
};

// assets for a discrete ck
// e.g. a dataset with following cks:
//      {'color': 'red'} for 1000 images
//      {'color': 'green'} for 2000 images
//      this message should be: assets: 3000 images for key 'color'
//          sub_assets: {'red': 1000 images for subkey red, 'green': 2000 images for subkey green}
message SingleCkAssets {
    Assets assets = 1;
    map<string, Assets> sub_assets = 2;
}

/// ========== tasks.mir ==========
message MirTasks {
    map<string, Task> tasks = 1;
    string head_task_id = 2;
};

message Task {
    TaskType type = 1;
    /// user defined task name
    string name = 2;
    /// auto generated unique id
    string task_id = 3;
    /// execution time of this task
    int64 timestamp = 5;  // RFC 3339 date strings
    /// (special for training task): result model for cmd train
    ModelMeta model = 6;
    /// (special for import task): unknown types for cmd import
    map<string, int32> unknown_types = 7;
    int32 return_code = 8;
    string return_msg = 9;
    Evaluation evaluation = 10;

    string serialized_task_parameters = 102;
    string serialized_executor_config = 103;
    string src_revs = 104;
    string dst_rev = 105;
    string executor = 106;

    reserved 4, 100, 101;
};

message ModelMeta {
    /// hash for models.tar.gz
    string model_hash = 1;
    /// model mAP
    float mean_average_precision = 2;
    /// context generated by train command
    string context = 3;
};

message Evaluation {
    EvaluateConfig config = 1;
    // key: prediction dataset id, value: evaluation result for ground truth and prediction dataset
    map<string, SingleDatasetEvaluation> dataset_evaluations = 2;
}

message EvaluateConfig {
    string gt_dataset_id = 1;
    repeated string pred_dataset_ids = 2;
    float conf_thr = 3;
    string iou_thrs_interval = 4;
    bool need_pr_curve = 5;
}

message SingleDatasetEvaluation {
    float conf_thr = 1;
    string gt_dataset_id = 2;
    string pred_dataset_id = 3;
    map<string, SingleIouEvaluation> iou_evaluations = 4;  // key: string of iou threshold
    SingleIouEvaluation iou_averaged_evaluation = 5;  // average for all ious
}

message SingleIouEvaluation {
    map<int32, SingleTopicEvaluation> ci_evaluations = 1;  // key: class ids
    SingleTopicEvaluation ci_averaged_evaluation = 2;  // evaluations averaged by class ids
    map<string, SingleTopicEvaluation> topic_evaluations = 3;  // key: topic names
}

message SingleTopicEvaluation {
    float ap = 1;
    float ar = 2;
    int32 tp = 3;
    int32 fp = 4;
    int32 fn = 5;
    repeated FloatPoint pr_curve = 6;
}

message FloatPoint {
    float x = 1;
    float y = 2;
}

/// ========== context.mir ==========
message MirContext {
    /// total images count
    int32 images_cnt = 1;
    /// total negative images count (images without any annotations)
    int32 negative_images_cnt = 2;
    /// total negative images count (images without any project class names)
    int32 project_negative_images_cnt = 3;
    /// key: class id, value: images count
    map<int32, int32> predefined_keyids_cnt = 4;
    /// key: class id (only in this project), value: images count
    map<int32, int32> project_predefined_keyids_cnt = 5;
    /// key: discrete customized keywords or tags, value: images count
    map<string, int32> customized_keywords_cnt = 6;
}
